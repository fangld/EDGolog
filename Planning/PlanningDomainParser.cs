//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\PlanningDomain.g4 by ANTLR 4.2.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningDomainParser : Parser {
	public const int
		DOM=1, DEF=2, REQ=3, TYPE=4, PRED=5, ACT=6, PARM=7, PRE=8, EFF=9, OBJ=10, 
		EITHER=11, LB=12, RB=13, LSB=14, RSB=15, COLON=16, QM=17, COMMA=18, UL=19, 
		DASH=20, PLUS=21, MINUS=22, MULT=23, DIV=24, EQ=25, LT=26, LEQ=27, GT=28, 
		GEQ=29, AND=30, OR=31, NOT=32, IMPLY=33, FORALL=34, EXISTS=35, WHEN=36, 
		PREF=37, BINARYCOMP=38, BINARYOP=39, LETTER=40, DIGIT=41, NAME=42, CHAR=43, 
		NUMBER=44, DECIMAL=45, VAR=46, FUNSYM=47, STRIPS=48, TYPING=49, WS=50;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'define'", "'requirements'", "'types'", "'predicates'", 
		"'action'", "'parameters'", "'precondition'", "'effect'", "'object'", 
		"'either'", "'('", "')'", "'['", "']'", "':'", "'?'", "'.'", "'_'", "DASH", 
		"'+'", "MINUS", "'*'", "'/'", "'='", "'<'", "'<='", "'>'", "'>='", "'and'", 
		"'or'", "'not'", "'imply'", "'forall'", "'exists'", "'when'", "'preference'", 
		"BINARYCOMP", "BINARYOP", "LETTER", "DIGIT", "NAME", "CHAR", "NUMBER", 
		"DECIMAL", "VAR", "FUNSYM", "STRIPS", "TYPING", "WS"
	};
	public const int
		RULE_domain = 0, RULE_requireDefine = 1, RULE_requireKey = 2, RULE_typeDefine = 3, 
		RULE_predicatesDefine = 4, RULE_atomicFormulaSkeleton = 5, RULE_predicate = 6, 
		RULE_primitiveType = 7, RULE_type = 8, RULE_structureDefine = 9, RULE_actionDefine = 10, 
		RULE_actionSymbol = 11, RULE_actionDefBody = 12, RULE_listName = 13, RULE_listVariable = 14, 
		RULE_preGD = 15, RULE_prefGD = 16, RULE_prefName = 17, RULE_gd = 18, RULE_atomicFormula = 19, 
		RULE_literal = 20, RULE_term = 21, RULE_effect = 22, RULE_cEffect = 23, 
		RULE_pEffect = 24, RULE_condEffect = 25, RULE_functionTerm = 26;
	public static readonly string[] ruleNames = {
		"domain", "requireDefine", "requireKey", "typeDefine", "predicatesDefine", 
		"atomicFormulaSkeleton", "predicate", "primitiveType", "type", "structureDefine", 
		"actionDefine", "actionSymbol", "actionDefBody", "listName", "listVariable", 
		"preGD", "prefGD", "prefName", "gd", "atomicFormula", "literal", "term", 
		"effect", "cEffect", "pEffect", "condEffect", "functionTerm"
	};

	public override string GrammarFileName { get { return "PlanningDomain.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningDomainParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningDomainParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public IReadOnlyList<StructureDefineContext> structureDefine() {
			return GetRuleContexts<StructureDefineContext>();
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public PredicatesDefineContext predicatesDefine() {
			return GetRuleContext<PredicatesDefineContext>(0);
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningDomainParser.DOM, 0); }
		public StructureDefineContext structureDefine(int i) {
			return GetRuleContext<StructureDefineContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterDomain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitDomain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(LB);
			State = 55; Match(DEF);
			State = 56; Match(LB);
			State = 57; Match(DOM);
			State = 58; Match(NAME);
			State = 59; Match(RB);
			State = 61;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 60; requireDefine();
				}
				break;
			}
			State = 64;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 63; typeDefine();
				}
				break;
			}
			State = 67;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 66; predicatesDefine();
				}
				break;
			}
			State = 72;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 69; structureDefine();
				}
				}
				State = 74;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 75; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireDefineContext : ParserRuleContext {
		public RequireKeyContext requireKey(int i) {
			return GetRuleContext<RequireKeyContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode REQ() { return GetToken(PlanningDomainParser.REQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public IReadOnlyList<RequireKeyContext> requireKey() {
			return GetRuleContexts<RequireKeyContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public RequireDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterRequireDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitRequireDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireDefineContext requireDefine() {
		RequireDefineContext _localctx = new RequireDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_requireDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(LB);
			State = 78; Match(COLON);
			State = 79; Match(REQ);
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 80; requireKey();
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STRIPS || _la==TYPING );
			State = 85; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireKeyContext : ParserRuleContext {
		public ITerminalNode STRIPS() { return GetToken(PlanningDomainParser.STRIPS, 0); }
		public ITerminalNode TYPING() { return GetToken(PlanningDomainParser.TYPING, 0); }
		public RequireKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireKey; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterRequireKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitRequireKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireKeyContext requireKey() {
		RequireKeyContext _localctx = new RequireKeyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_requireKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_la = _input.La(1);
			if ( !(_la==STRIPS || _la==TYPING) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningDomainParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterTypeDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitTypeDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(LB);
			State = 90; Match(COLON);
			State = 91; Match(TYPE);
			State = 92; listName();
			State = 93; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public IReadOnlyList<AtomicFormulaSkeletonContext> atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningDomainParser.PRED, 0); }
		public PredicatesDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicatesDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPredicatesDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPredicatesDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatesDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatesDefineContext predicatesDefine() {
		PredicatesDefineContext _localctx = new PredicatesDefineContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_predicatesDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(LB);
			State = 96; Match(COLON);
			State = 97; Match(PRED);
			State = 99;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 98; atomicFormulaSkeleton();
				}
				}
				State = 101;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 103; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaSkeleton; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaSkeleton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaSkeleton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaSkeleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(LB);
			State = 106; predicate();
			State = 107; listVariable();
			State = 108; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningDomainParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_la = _input.La(1);
			if ( !(_la==OBJ || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ITerminalNode EITHER() { return GetToken(PlanningDomainParser.EITHER, 0); }
		public IReadOnlyList<PrimitiveTypeContext> primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			State = 124;
			switch (_input.La(1)) {
			case OBJ:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; primitiveType();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; Match(LB);
				State = 116; Match(EITHER);
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 117; primitiveType();
					}
					}
					State = 120;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OBJ || _la==NAME );
				State = 122; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDefineContext : ParserRuleContext {
		public ActionDefineContext actionDefine() {
			return GetRuleContext<ActionDefineContext>(0);
		}
		public StructureDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_structureDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterStructureDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitStructureDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDefineContext structureDefine() {
		StructureDefineContext _localctx = new StructureDefineContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_structureDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; actionDefine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ActionDefBodyContext actionDefBody() {
			return GetRuleContext<ActionDefBodyContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningDomainParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningDomainParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningDomainParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningDomainParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterActionDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitActionDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_actionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(LB);
			State = 129; Match(COLON);
			State = 130; Match(ACT);
			State = 131; actionSymbol();
			State = 132; Match(COLON);
			State = 133; Match(PARM);
			State = 134; Match(LB);
			State = 135; listVariable();
			State = 136; Match(RB);
			State = 137; actionDefBody();
			State = 138; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterActionSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitActionSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefBodyContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public ITerminalNode PRE() { return GetToken(PlanningDomainParser.PRE, 0); }
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ITerminalNode EFF() { return GetToken(PlanningDomainParser.EFF, 0); }
		public PreGDContext preGD() {
			return GetRuleContext<PreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningDomainParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningDomainParser.COLON); }
		public ActionDefBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefBody; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterActionDefBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitActionDefBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefBodyContext actionDefBody() {
		ActionDefBodyContext _localctx = new ActionDefBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_actionDefBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 142; Match(COLON);
				State = 143; Match(PRE);
				State = 147;
				switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					State = 144; preGD();
					}
					break;

				case 2:
					{
					{
					State = 145; Match(LB);
					State = 146; Match(RB);
					}
					}
					break;
				}
				}
				break;
			}
			State = 158;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 151; Match(COLON);
				State = 152; Match(EFF);
				State = 156;
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 153; effect();
					}
					break;

				case 2:
					{
					{
					State = 154; Match(LB);
					State = 155; Match(RB);
					}
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningDomainParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningDomainParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterListName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitListName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_listName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 160; Match(NAME);
				}
				}
				State = 163;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningDomainParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningDomainParser.VAR); }
		public ITerminalNode DASH() { return GetToken(PlanningDomainParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterListVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitListVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_listVariable);
		int _la;
		try {
			State = 180;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 165; Match(VAR);
					}
					}
					State = 170;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 171; Match(VAR);
					}
					}
					State = 174;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 176; Match(DASH);
				State = 177; type();
				State = 178; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public PreGDContext preGD(int i) {
			return GetRuleContext<PreGDContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<PreGDContext> preGD() {
			return GetRuleContexts<PreGDContext>();
		}
		public ITerminalNode FORALL() { return GetToken(PlanningDomainParser.FORALL, 0); }
		public PrefGDContext prefGD() {
			return GetRuleContext<PrefGDContext>(0);
		}
		public PreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_preGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreGDContext preGD() {
		PreGDContext _localctx = new PreGDContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_preGD);
		int _la;
		try {
			State = 198;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; prefGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; Match(LB);
				State = 184; Match(AND);
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 185; preGD();
					}
					}
					State = 190;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 191; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192; Match(LB);
				State = 193; Match(FORALL);
				State = 194; listVariable();
				State = 195; preGD();
				State = 196; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode PREF() { return GetToken(PlanningDomainParser.PREF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public PrefNameContext prefName() {
			return GetRuleContext<PrefNameContext>(0);
		}
		public PrefGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPrefGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPrefGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefGDContext prefGD() {
		PrefGDContext _localctx = new PrefGDContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_prefGD);
		try {
			State = 207;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201; Match(LB);
				State = 202; Match(PREF);
				State = 203; prefName();
				State = 204; gd();
				State = 205; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public PrefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPrefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPrefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefNameContext prefName() {
		PrefNameContext _localctx = new PrefNameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_prefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningDomainParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningDomainParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningDomainParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningDomainParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterGd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitGd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_gd);
		int _la;
		try {
			State = 253;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; atomicFormula();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; literal();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 213; Match(LB);
				State = 214; Match(AND);
				State = 218;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 215; gd();
					}
					}
					State = 220;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 221; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 222; Match(LB);
				State = 223; Match(OR);
				State = 227;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 224; gd();
					}
					}
					State = 229;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 230; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 231; Match(LB);
				State = 232; Match(IMPLY);
				State = 233; gd();
				State = 234; gd();
				State = 235; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 237; Match(LB);
				State = 238; Match(EXISTS);
				State = 239; Match(LB);
				State = 240; listVariable();
				State = 241; Match(RB);
				State = 242; gd();
				State = 243; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 245; Match(LB);
				State = 246; Match(FORALL);
				State = 247; Match(LB);
				State = 248; listVariable();
				State = 249; Match(RB);
				State = 250; gd();
				State = 251; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(PlanningDomainParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormula; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterAtomicFormula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitAtomicFormula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaContext atomicFormula() {
		AtomicFormulaContext _localctx = new AtomicFormulaContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_atomicFormula);
		int _la;
		try {
			State = 274;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; Match(LB);
				State = 256; predicate();
				State = 260;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 257; term();
					}
					}
					State = 262;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 263; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265; Match(LB);
				State = 266; Match(EQ);
				State = 270;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 267; term();
					}
					}
					State = 272;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 273; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningDomainParser.NOT, 0); }
		public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_literal);
		try {
			State = 282;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; atomicFormula();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; Match(LB);
				State = 278; Match(NOT);
				State = 279; atomicFormula();
				State = 280; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningDomainParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public FunctionTermContext functionTerm() {
			return GetRuleContext<FunctionTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_term);
		try {
			State = 287;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; Match(NAME);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; Match(VAR);
				}
				break;
			case FUNSYM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286; functionTerm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_effect);
		int _la;
		try {
			State = 299;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289; Match(LB);
				State = 290; Match(AND);
				State = 294;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 291; cEffect();
					}
					}
					State = 296;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 297; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public PEffectContext pEffect() {
			return GetRuleContext<PEffectContext>(0);
		}
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningDomainParser.FORALL, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningDomainParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterCEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitCEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_cEffect);
		try {
			State = 314;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; Match(LB);
				State = 302; Match(FORALL);
				State = 303; listVariable();
				State = 304; effect();
				State = 305; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307; Match(LB);
				State = 308; Match(WHEN);
				State = 309; gd();
				State = 310; condEffect();
				State = 311; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 313; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningDomainParser.NOT, 0); }
		public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public PEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PEffectContext pEffect() {
		PEffectContext _localctx = new PEffectContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_pEffect);
		try {
			State = 322;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316; Match(LB);
				State = 317; Match(NOT);
				State = 318; atomicFormula();
				State = 319; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321; atomicFormula();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public IReadOnlyList<PEffectContext> pEffect() {
			return GetRuleContexts<PEffectContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public PEffectContext pEffect(int i) {
			return GetRuleContext<PEffectContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterCondEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitCondEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_condEffect);
		int _la;
		try {
			State = 334;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; Match(LB);
				State = 325; Match(AND);
				State = 329;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 326; pEffect();
					}
					}
					State = 331;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 332; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode FUNSYM() { return GetToken(PlanningDomainParser.FUNSYM, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public FunctionTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterFunctionTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitFunctionTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTermContext functionTerm() {
		FunctionTermContext _localctx = new FunctionTermContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_functionTerm);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(FUNSYM);
			State = 340;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 337; term();
					}
					} 
				}
				State = 342;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x34\x15A\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2@\n"+
		"\x2\x3\x2\x5\x2\x43\n\x2\x3\x2\x5\x2\x46\n\x2\x3\x2\a\x2I\n\x2\f\x2\xE"+
		"\x2L\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3T\n\x3\r\x3\xE\x3U"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x6\x6\x66\n\x6\r\x6\xE\x6g\x3\x6\x3\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x6\ny\n\n\r\n\xE\n"+
		"z\x3\n\x3\n\x5\n\x7F\n\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE"+
		"\x96\n\xE\x5\xE\x98\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x9F\n\xE"+
		"\x5\xE\xA1\n\xE\x3\xF\x6\xF\xA4\n\xF\r\xF\xE\xF\xA5\x3\x10\a\x10\xA9\n"+
		"\x10\f\x10\xE\x10\xAC\v\x10\x3\x10\x6\x10\xAF\n\x10\r\x10\xE\x10\xB0\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x5\x10\xB7\n\x10\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\a\x11\xBD\n\x11\f\x11\xE\x11\xC0\v\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\xC9\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\xD2\n\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\a\x14\xDB\n\x14\f\x14\xE\x14\xDE\v\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\a\x14\xE4\n\x14\f\x14\xE\x14\xE7\v\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5"+
		"\x14\x100\n\x14\x3\x15\x3\x15\x3\x15\a\x15\x105\n\x15\f\x15\xE\x15\x108"+
		"\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x10F\n\x15\f\x15\xE\x15"+
		"\x112\v\x15\x3\x15\x5\x15\x115\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\x11D\n\x16\x3\x17\x3\x17\x3\x17\x5\x17\x122\n\x17\x3\x18"+
		"\x3\x18\x3\x18\a\x18\x127\n\x18\f\x18\xE\x18\x12A\v\x18\x3\x18\x3\x18"+
		"\x5\x18\x12E\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x13D\n\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x145\n\x1A\x3\x1B\x3\x1B\x3\x1B\a"+
		"\x1B\x14A\n\x1B\f\x1B\xE\x1B\x14D\v\x1B\x3\x1B\x3\x1B\x5\x1B\x151\n\x1B"+
		"\x3\x1C\x3\x1C\a\x1C\x155\n\x1C\f\x1C\xE\x1C\x158\v\x1C\x3\x1C\x2\x2\x2"+
		"\x1D\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32"+
		"\x2\x34\x2\x36\x2\x2\x4\x3\x2\x32\x33\x4\x2\f\f,,\x168\x2\x38\x3\x2\x2"+
		"\x2\x4O\x3\x2\x2\x2\x6Y\x3\x2\x2\x2\b[\x3\x2\x2\x2\n\x61\x3\x2\x2\x2\f"+
		"k\x3\x2\x2\x2\xEp\x3\x2\x2\x2\x10r\x3\x2\x2\x2\x12~\x3\x2\x2\x2\x14\x80"+
		"\x3\x2\x2\x2\x16\x82\x3\x2\x2\x2\x18\x8E\x3\x2\x2\x2\x1A\x97\x3\x2\x2"+
		"\x2\x1C\xA3\x3\x2\x2\x2\x1E\xB6\x3\x2\x2\x2 \xC8\x3\x2\x2\x2\"\xD1\x3"+
		"\x2\x2\x2$\xD3\x3\x2\x2\x2&\xFF\x3\x2\x2\x2(\x114\x3\x2\x2\x2*\x11C\x3"+
		"\x2\x2\x2,\x121\x3\x2\x2\x2.\x12D\x3\x2\x2\x2\x30\x13C\x3\x2\x2\x2\x32"+
		"\x144\x3\x2\x2\x2\x34\x150\x3\x2\x2\x2\x36\x152\x3\x2\x2\x2\x38\x39\a"+
		"\xE\x2\x2\x39:\a\x4\x2\x2:;\a\xE\x2\x2;<\a\x3\x2\x2<=\a,\x2\x2=?\a\xF"+
		"\x2\x2>@\x5\x4\x3\x2?>\x3\x2\x2\x2?@\x3\x2\x2\x2@\x42\x3\x2\x2\x2\x41"+
		"\x43\x5\b\x5\x2\x42\x41\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x45\x3\x2"+
		"\x2\x2\x44\x46\x5\n\x6\x2\x45\x44\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46"+
		"J\x3\x2\x2\x2GI\x5\x14\v\x2HG\x3\x2\x2\x2IL\x3\x2\x2\x2JH\x3\x2\x2\x2"+
		"JK\x3\x2\x2\x2KM\x3\x2\x2\x2LJ\x3\x2\x2\x2MN\a\xF\x2\x2N\x3\x3\x2\x2\x2"+
		"OP\a\xE\x2\x2PQ\a\x12\x2\x2QS\a\x5\x2\x2RT\x5\x6\x4\x2SR\x3\x2\x2\x2T"+
		"U\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2VW\x3\x2\x2\x2WX\a\xF\x2\x2X"+
		"\x5\x3\x2\x2\x2YZ\t\x2\x2\x2Z\a\x3\x2\x2\x2[\\\a\xE\x2\x2\\]\a\x12\x2"+
		"\x2]^\a\x6\x2\x2^_\x5\x1C\xF\x2_`\a\xF\x2\x2`\t\x3\x2\x2\x2\x61\x62\a"+
		"\xE\x2\x2\x62\x63\a\x12\x2\x2\x63\x65\a\a\x2\x2\x64\x66\x5\f\a\x2\x65"+
		"\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2hi\x3"+
		"\x2\x2\x2ij\a\xF\x2\x2j\v\x3\x2\x2\x2kl\a\xE\x2\x2lm\x5\xE\b\x2mn\x5\x1E"+
		"\x10\x2no\a\xF\x2\x2o\r\x3\x2\x2\x2pq\a,\x2\x2q\xF\x3\x2\x2\x2rs\t\x3"+
		"\x2\x2s\x11\x3\x2\x2\x2t\x7F\x5\x10\t\x2uv\a\xE\x2\x2vx\a\r\x2\x2wy\x5"+
		"\x10\t\x2xw\x3\x2\x2\x2yz\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x3"+
		"\x2\x2\x2|}\a\xF\x2\x2}\x7F\x3\x2\x2\x2~t\x3\x2\x2\x2~u\x3\x2\x2\x2\x7F"+
		"\x13\x3\x2\x2\x2\x80\x81\x5\x16\f\x2\x81\x15\x3\x2\x2\x2\x82\x83\a\xE"+
		"\x2\x2\x83\x84\a\x12\x2\x2\x84\x85\a\b\x2\x2\x85\x86\x5\x18\r\x2\x86\x87"+
		"\a\x12\x2\x2\x87\x88\a\t\x2\x2\x88\x89\a\xE\x2\x2\x89\x8A\x5\x1E\x10\x2"+
		"\x8A\x8B\a\xF\x2\x2\x8B\x8C\x5\x1A\xE\x2\x8C\x8D\a\xF\x2\x2\x8D\x17\x3"+
		"\x2\x2\x2\x8E\x8F\a,\x2\x2\x8F\x19\x3\x2\x2\x2\x90\x91\a\x12\x2\x2\x91"+
		"\x95\a\n\x2\x2\x92\x96\x5 \x11\x2\x93\x94\a\xE\x2\x2\x94\x96\a\xF\x2\x2"+
		"\x95\x92\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x98\x3\x2\x2\x2\x97\x90\x3"+
		"\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\xA0\x3\x2\x2\x2\x99\x9A\a\x12\x2\x2"+
		"\x9A\x9E\a\v\x2\x2\x9B\x9F\x5.\x18\x2\x9C\x9D\a\xE\x2\x2\x9D\x9F\a\xF"+
		"\x2\x2\x9E\x9B\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA1\x3\x2\x2\x2\xA0"+
		"\x99\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\x1B\x3\x2\x2\x2\xA2\xA4\a,\x2"+
		"\x2\xA3\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6"+
		"\x3\x2\x2\x2\xA6\x1D\x3\x2\x2\x2\xA7\xA9\a\x30\x2\x2\xA8\xA7\x3\x2\x2"+
		"\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xB7"+
		"\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAF\a\x30\x2\x2\xAE\xAD\x3\x2\x2"+
		"\x2\xAF\xB0\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2"+
		"\x3\x2\x2\x2\xB2\xB3\a\x16\x2\x2\xB3\xB4\x5\x12\n\x2\xB4\xB5\x5\x1E\x10"+
		"\x2\xB5\xB7\x3\x2\x2\x2\xB6\xAA\x3\x2\x2\x2\xB6\xAE\x3\x2\x2\x2\xB7\x1F"+
		"\x3\x2\x2\x2\xB8\xC9\x5\"\x12\x2\xB9\xBA\a\xE\x2\x2\xBA\xBE\a \x2\x2\xBB"+
		"\xBD\x5 \x11\x2\xBC\xBB\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2"+
		"\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC1\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1"+
		"\xC9\a\xF\x2\x2\xC2\xC3\a\xE\x2\x2\xC3\xC4\a$\x2\x2\xC4\xC5\x5\x1E\x10"+
		"\x2\xC5\xC6\x5 \x11\x2\xC6\xC7\a\xF\x2\x2\xC7\xC9\x3\x2\x2\x2\xC8\xB8"+
		"\x3\x2\x2\x2\xC8\xB9\x3\x2\x2\x2\xC8\xC2\x3\x2\x2\x2\xC9!\x3\x2\x2\x2"+
		"\xCA\xD2\x5&\x14\x2\xCB\xCC\a\xE\x2\x2\xCC\xCD\a\'\x2\x2\xCD\xCE\x5$\x13"+
		"\x2\xCE\xCF\x5&\x14\x2\xCF\xD0\a\xF\x2\x2\xD0\xD2\x3\x2\x2\x2\xD1\xCA"+
		"\x3\x2\x2\x2\xD1\xCB\x3\x2\x2\x2\xD2#\x3\x2\x2\x2\xD3\xD4\a,\x2\x2\xD4"+
		"%\x3\x2\x2\x2\xD5\x100\x5(\x15\x2\xD6\x100\x5*\x16\x2\xD7\xD8\a\xE\x2"+
		"\x2\xD8\xDC\a \x2\x2\xD9\xDB\x5&\x14\x2\xDA\xD9\x3\x2\x2\x2\xDB\xDE\x3"+
		"\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDF\x3\x2\x2\x2"+
		"\xDE\xDC\x3\x2\x2\x2\xDF\x100\a\xF\x2\x2\xE0\xE1\a\xE\x2\x2\xE1\xE5\a"+
		"!\x2\x2\xE2\xE4\x5&\x14\x2\xE3\xE2\x3\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5"+
		"\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE8\x3\x2\x2\x2\xE7\xE5\x3\x2"+
		"\x2\x2\xE8\x100\a\xF\x2\x2\xE9\xEA\a\xE\x2\x2\xEA\xEB\a#\x2\x2\xEB\xEC"+
		"\x5&\x14\x2\xEC\xED\x5&\x14\x2\xED\xEE\a\xF\x2\x2\xEE\x100\x3\x2\x2\x2"+
		"\xEF\xF0\a\xE\x2\x2\xF0\xF1\a%\x2\x2\xF1\xF2\a\xE\x2\x2\xF2\xF3\x5\x1E"+
		"\x10\x2\xF3\xF4\a\xF\x2\x2\xF4\xF5\x5&\x14\x2\xF5\xF6\a\xF\x2\x2\xF6\x100"+
		"\x3\x2\x2\x2\xF7\xF8\a\xE\x2\x2\xF8\xF9\a$\x2\x2\xF9\xFA\a\xE\x2\x2\xFA"+
		"\xFB\x5\x1E\x10\x2\xFB\xFC\a\xF\x2\x2\xFC\xFD\x5&\x14\x2\xFD\xFE\a\xF"+
		"\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xD5\x3\x2\x2\x2\xFF\xD6\x3\x2\x2\x2\xFF"+
		"\xD7\x3\x2\x2\x2\xFF\xE0\x3\x2\x2\x2\xFF\xE9\x3\x2\x2\x2\xFF\xEF\x3\x2"+
		"\x2\x2\xFF\xF7\x3\x2\x2\x2\x100\'\x3\x2\x2\x2\x101\x102\a\xE\x2\x2\x102"+
		"\x106\x5\xE\b\x2\x103\x105\x5,\x17\x2\x104\x103\x3\x2\x2\x2\x105\x108"+
		"\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x109\x3"+
		"\x2\x2\x2\x108\x106\x3\x2\x2\x2\x109\x10A\a\xF\x2\x2\x10A\x115\x3\x2\x2"+
		"\x2\x10B\x10C\a\xE\x2\x2\x10C\x110\a\x1B\x2\x2\x10D\x10F\x5,\x17\x2\x10E"+
		"\x10D\x3\x2\x2\x2\x10F\x112\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110\x111"+
		"\x3\x2\x2\x2\x111\x113\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x113\x115\a\xF"+
		"\x2\x2\x114\x101\x3\x2\x2\x2\x114\x10B\x3\x2\x2\x2\x115)\x3\x2\x2\x2\x116"+
		"\x11D\x5(\x15\x2\x117\x118\a\xE\x2\x2\x118\x119\a\"\x2\x2\x119\x11A\x5"+
		"(\x15\x2\x11A\x11B\a\xF\x2\x2\x11B\x11D\x3\x2\x2\x2\x11C\x116\x3\x2\x2"+
		"\x2\x11C\x117\x3\x2\x2\x2\x11D+\x3\x2\x2\x2\x11E\x122\a,\x2\x2\x11F\x122"+
		"\a\x30\x2\x2\x120\x122\x5\x36\x1C\x2\x121\x11E\x3\x2\x2\x2\x121\x11F\x3"+
		"\x2\x2\x2\x121\x120\x3\x2\x2\x2\x122-\x3\x2\x2\x2\x123\x124\a\xE\x2\x2"+
		"\x124\x128\a \x2\x2\x125\x127\x5\x30\x19\x2\x126\x125\x3\x2\x2\x2\x127"+
		"\x12A\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12B"+
		"\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12B\x12E\a\xF\x2\x2\x12C\x12E\x5\x30"+
		"\x19\x2\x12D\x123\x3\x2\x2\x2\x12D\x12C\x3\x2\x2\x2\x12E/\x3\x2\x2\x2"+
		"\x12F\x130\a\xE\x2\x2\x130\x131\a$\x2\x2\x131\x132\x5\x1E\x10\x2\x132"+
		"\x133\x5.\x18\x2\x133\x134\a\xF\x2\x2\x134\x13D\x3\x2\x2\x2\x135\x136"+
		"\a\xE\x2\x2\x136\x137\a&\x2\x2\x137\x138\x5&\x14\x2\x138\x139\x5\x34\x1B"+
		"\x2\x139\x13A\a\xF\x2\x2\x13A\x13D\x3\x2\x2\x2\x13B\x13D\x5\x32\x1A\x2"+
		"\x13C\x12F\x3\x2\x2\x2\x13C\x135\x3\x2\x2\x2\x13C\x13B\x3\x2\x2\x2\x13D"+
		"\x31\x3\x2\x2\x2\x13E\x13F\a\xE\x2\x2\x13F\x140\a\"\x2\x2\x140\x141\x5"+
		"(\x15\x2\x141\x142\a\xF\x2\x2\x142\x145\x3\x2\x2\x2\x143\x145\x5(\x15"+
		"\x2\x144\x13E\x3\x2\x2\x2\x144\x143\x3\x2\x2\x2\x145\x33\x3\x2\x2\x2\x146"+
		"\x147\a\xE\x2\x2\x147\x14B\a \x2\x2\x148\x14A\x5\x32\x1A\x2\x149\x148"+
		"\x3\x2\x2\x2\x14A\x14D\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14B\x14C\x3"+
		"\x2\x2\x2\x14C\x14E\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14E\x151\a\xF\x2"+
		"\x2\x14F\x151\x5\x32\x1A\x2\x150\x146\x3\x2\x2\x2\x150\x14F\x3\x2\x2\x2"+
		"\x151\x35\x3\x2\x2\x2\x152\x156\a\x31\x2\x2\x153\x155\x5,\x17\x2\x154"+
		"\x153\x3\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x156\x157"+
		"\x3\x2\x2\x2\x157\x37\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2$?\x42\x45JUgz"+
		"~\x95\x97\x9E\xA0\xA5\xAA\xB0\xB6\xBE\xC8\xD1\xDC\xE5\xFF\x106\x110\x114"+
		"\x11C\x121\x128\x12D\x13C\x144\x14B\x150\x156";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
