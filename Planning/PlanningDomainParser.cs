//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\PlanningDomain.g4 by ANTLR 4.2.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningDomainParser : Parser {
	public const int
		DOM=1, DEF=2, REQ=3, TYPE=4, PRED=5, ACT=6, PARM=7, PRE=8, EFF=9, OBJ=10, 
		EITHER=11, STRIPS=12, TYPING=13, LB=14, RB=15, LSB=16, RSB=17, COLON=18, 
		QM=19, COMMA=20, UL=21, DASH=22, PLUS=23, MINUS=24, MULT=25, DIV=26, EQ=27, 
		LT=28, LEQ=29, GT=30, GEQ=31, AND=32, OR=33, NOT=34, IMPLY=35, FORALL=36, 
		EXISTS=37, WHEN=38, PREF=39, BINCOMP=40, BINOP=41, LETTER=42, DIGIT=43, 
		NAME=44, CHAR=45, NUMBER=46, DECIMAL=47, VAR=48, FUNSYM=49, WS=50;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'define'", "'requirements'", "'types'", "'predicates'", 
		"'action'", "'parameters'", "'precondition'", "'effect'", "'object'", 
		"'either'", "'strips'", "'typing'", "'('", "')'", "'['", "']'", "':'", 
		"'?'", "'.'", "'_'", "DASH", "'+'", "MINUS", "'*'", "'/'", "'='", "'<'", 
		"'<='", "'>'", "'>='", "'and'", "'or'", "'not'", "'imply'", "'forall'", 
		"'exists'", "'when'", "'preference'", "BINCOMP", "BINOP", "LETTER", "DIGIT", 
		"NAME", "CHAR", "NUMBER", "DECIMAL", "VAR", "FUNSYM", "WS"
	};
	public const int
		RULE_domain = 0, RULE_requireDefine = 1, RULE_requireKey = 2, RULE_strips = 3, 
		RULE_typing = 4, RULE_typeDefine = 5, RULE_predicatesDefine = 6, RULE_atomicFormulaSkeleton = 7, 
		RULE_predicate = 8, RULE_primitiveType = 9, RULE_type = 10, RULE_structureDefine = 11, 
		RULE_actionDefine = 12, RULE_actionSymbol = 13, RULE_actionDefBody = 14, 
		RULE_listName = 15, RULE_listVariable = 16, RULE_preGD = 17, RULE_prefGD = 18, 
		RULE_prefName = 19, RULE_gd = 20, RULE_atomicFormula = 21, RULE_literal = 22, 
		RULE_term = 23, RULE_effect = 24, RULE_cEffect = 25, RULE_pEffect = 26, 
		RULE_condEffect = 27, RULE_functionTerm = 28;
	public static readonly string[] ruleNames = {
		"domain", "requireDefine", "requireKey", "strips", "typing", "typeDefine", 
		"predicatesDefine", "atomicFormulaSkeleton", "predicate", "primitiveType", 
		"type", "structureDefine", "actionDefine", "actionSymbol", "actionDefBody", 
		"listName", "listVariable", "preGD", "prefGD", "prefName", "gd", "atomicFormula", 
		"literal", "term", "effect", "cEffect", "pEffect", "condEffect", "functionTerm"
	};

	public override string GrammarFileName { get { return "PlanningDomain.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningDomainParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningDomainParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public IReadOnlyList<StructureDefineContext> structureDefine() {
			return GetRuleContexts<StructureDefineContext>();
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public PredicatesDefineContext predicatesDefine() {
			return GetRuleContext<PredicatesDefineContext>(0);
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningDomainParser.DOM, 0); }
		public StructureDefineContext structureDefine(int i) {
			return GetRuleContext<StructureDefineContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterDomain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitDomain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(LB);
			State = 59; Match(DEF);
			State = 60; Match(LB);
			State = 61; Match(DOM);
			State = 62; Match(NAME);
			State = 63; Match(RB);
			State = 65;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 64; requireDefine();
				}
				break;
			}
			State = 68;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 67; typeDefine();
				}
				break;
			}
			State = 71;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 70; predicatesDefine();
				}
				break;
			}
			State = 76;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 73; structureDefine();
				}
				}
				State = 78;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 79; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireDefineContext : ParserRuleContext {
		public RequireKeyContext requireKey(int i) {
			return GetRuleContext<RequireKeyContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode REQ() { return GetToken(PlanningDomainParser.REQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public IReadOnlyList<RequireKeyContext> requireKey() {
			return GetRuleContexts<RequireKeyContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public RequireDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterRequireDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitRequireDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireDefineContext requireDefine() {
		RequireDefineContext _localctx = new RequireDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_requireDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(LB);
			State = 82; Match(COLON);
			State = 83; Match(REQ);
			State = 85;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 84; requireKey();
				}
				}
				State = 87;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==COLON );
			State = 89; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireKeyContext : ParserRuleContext {
		public StripsContext strips() {
			return GetRuleContext<StripsContext>(0);
		}
		public TypingContext typing() {
			return GetRuleContext<TypingContext>(0);
		}
		public RequireKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireKey; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterRequireKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitRequireKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireKeyContext requireKey() {
		RequireKeyContext _localctx = new RequireKeyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_requireKey);
		try {
			State = 93;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; strips();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; typing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StripsContext : ParserRuleContext {
		public ITerminalNode STRIPS() { return GetToken(PlanningDomainParser.STRIPS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public StripsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_strips; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterStrips(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitStrips(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrips(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StripsContext strips() {
		StripsContext _localctx = new StripsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_strips);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(COLON);
			State = 96; Match(STRIPS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypingContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public ITerminalNode TYPING() { return GetToken(PlanningDomainParser.TYPING, 0); }
		public TypingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typing; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterTyping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitTyping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypingContext typing() {
		TypingContext _localctx = new TypingContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_typing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(COLON);
			State = 99; Match(TYPING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningDomainParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterTypeDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitTypeDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(LB);
			State = 102; Match(COLON);
			State = 103; Match(TYPE);
			State = 104; listName();
			State = 105; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public IReadOnlyList<AtomicFormulaSkeletonContext> atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningDomainParser.PRED, 0); }
		public PredicatesDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicatesDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPredicatesDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPredicatesDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatesDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatesDefineContext predicatesDefine() {
		PredicatesDefineContext _localctx = new PredicatesDefineContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_predicatesDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(LB);
			State = 108; Match(COLON);
			State = 109; Match(PRED);
			State = 111;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 110; atomicFormulaSkeleton();
				}
				}
				State = 113;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 115; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaSkeleton; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaSkeleton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaSkeleton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaSkeleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(LB);
			State = 118; predicate();
			State = 119; listVariable();
			State = 120; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningDomainParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			_la = _input.La(1);
			if ( !(_la==OBJ || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ITerminalNode EITHER() { return GetToken(PlanningDomainParser.EITHER, 0); }
		public IReadOnlyList<PrimitiveTypeContext> primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			State = 136;
			switch (_input.La(1)) {
			case OBJ:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126; primitiveType();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; Match(LB);
				State = 128; Match(EITHER);
				State = 130;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 129; primitiveType();
					}
					}
					State = 132;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OBJ || _la==NAME );
				State = 134; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDefineContext : ParserRuleContext {
		public ActionDefineContext actionDefine() {
			return GetRuleContext<ActionDefineContext>(0);
		}
		public StructureDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_structureDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterStructureDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitStructureDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDefineContext structureDefine() {
		StructureDefineContext _localctx = new StructureDefineContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_structureDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; actionDefine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ActionDefBodyContext actionDefBody() {
			return GetRuleContext<ActionDefBodyContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningDomainParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningDomainParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningDomainParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningDomainParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterActionDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitActionDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_actionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(LB);
			State = 141; Match(COLON);
			State = 142; Match(ACT);
			State = 143; actionSymbol();
			State = 144; Match(COLON);
			State = 145; Match(PARM);
			State = 146; Match(LB);
			State = 147; listVariable();
			State = 148; Match(RB);
			State = 149; actionDefBody();
			State = 150; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterActionSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitActionSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefBodyContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public ITerminalNode PRE() { return GetToken(PlanningDomainParser.PRE, 0); }
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ITerminalNode EFF() { return GetToken(PlanningDomainParser.EFF, 0); }
		public PreGDContext preGD() {
			return GetRuleContext<PreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningDomainParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningDomainParser.COLON); }
		public ActionDefBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefBody; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterActionDefBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitActionDefBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefBodyContext actionDefBody() {
		ActionDefBodyContext _localctx = new ActionDefBodyContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_actionDefBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 154; Match(COLON);
				State = 155; Match(PRE);
				State = 159;
				switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					State = 156; preGD();
					}
					break;

				case 2:
					{
					{
					State = 157; Match(LB);
					State = 158; Match(RB);
					}
					}
					break;
				}
				}
				break;
			}
			State = 170;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 163; Match(COLON);
				State = 164; Match(EFF);
				State = 168;
				switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					State = 165; effect();
					}
					break;

				case 2:
					{
					{
					State = 166; Match(LB);
					State = 167; Match(RB);
					}
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningDomainParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningDomainParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterListName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitListName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_listName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 172; Match(NAME);
				}
				}
				State = 175;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningDomainParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningDomainParser.VAR); }
		public ITerminalNode DASH() { return GetToken(PlanningDomainParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterListVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitListVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_listVariable);
		int _la;
		try {
			State = 192;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 177; Match(VAR);
					}
					}
					State = 182;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 183; Match(VAR);
					}
					}
					State = 186;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 188; Match(DASH);
				State = 189; type();
				State = 190; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public PreGDContext preGD(int i) {
			return GetRuleContext<PreGDContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<PreGDContext> preGD() {
			return GetRuleContexts<PreGDContext>();
		}
		public ITerminalNode FORALL() { return GetToken(PlanningDomainParser.FORALL, 0); }
		public PrefGDContext prefGD() {
			return GetRuleContext<PrefGDContext>(0);
		}
		public PreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_preGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreGDContext preGD() {
		PreGDContext _localctx = new PreGDContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_preGD);
		int _la;
		try {
			State = 210;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194; prefGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(LB);
				State = 196; Match(AND);
				State = 200;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 197; preGD();
					}
					}
					State = 202;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 203; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 204; Match(LB);
				State = 205; Match(FORALL);
				State = 206; listVariable();
				State = 207; preGD();
				State = 208; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode PREF() { return GetToken(PlanningDomainParser.PREF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public PrefNameContext prefName() {
			return GetRuleContext<PrefNameContext>(0);
		}
		public PrefGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPrefGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPrefGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefGDContext prefGD() {
		PrefGDContext _localctx = new PrefGDContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_prefGD);
		try {
			State = 219;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213; Match(LB);
				State = 214; Match(PREF);
				State = 215; prefName();
				State = 216; gd();
				State = 217; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public PrefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPrefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPrefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefNameContext prefName() {
		PrefNameContext _localctx = new PrefNameContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_prefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningDomainParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningDomainParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningDomainParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningDomainParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterGd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitGd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_gd);
		int _la;
		try {
			State = 265;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; atomicFormula();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224; literal();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 225; Match(LB);
				State = 226; Match(AND);
				State = 230;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 227; gd();
					}
					}
					State = 232;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 233; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 234; Match(LB);
				State = 235; Match(OR);
				State = 239;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 236; gd();
					}
					}
					State = 241;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 242; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 243; Match(LB);
				State = 244; Match(IMPLY);
				State = 245; gd();
				State = 246; gd();
				State = 247; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 249; Match(LB);
				State = 250; Match(EXISTS);
				State = 251; Match(LB);
				State = 252; listVariable();
				State = 253; Match(RB);
				State = 254; gd();
				State = 255; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 257; Match(LB);
				State = 258; Match(FORALL);
				State = 259; Match(LB);
				State = 260; listVariable();
				State = 261; Match(RB);
				State = 262; gd();
				State = 263; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(PlanningDomainParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormula; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterAtomicFormula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitAtomicFormula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaContext atomicFormula() {
		AtomicFormulaContext _localctx = new AtomicFormulaContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_atomicFormula);
		int _la;
		try {
			State = 286;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267; Match(LB);
				State = 268; predicate();
				State = 272;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 269; term();
					}
					}
					State = 274;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 275; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; Match(LB);
				State = 278; Match(EQ);
				State = 282;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 279; term();
					}
					}
					State = 284;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 285; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningDomainParser.NOT, 0); }
		public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_literal);
		try {
			State = 294;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; atomicFormula();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; Match(LB);
				State = 290; Match(NOT);
				State = 291; atomicFormula();
				State = 292; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningDomainParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public FunctionTermContext functionTerm() {
			return GetRuleContext<FunctionTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_term);
		try {
			State = 299;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; Match(NAME);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; Match(VAR);
				}
				break;
			case FUNSYM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 298; functionTerm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_effect);
		int _la;
		try {
			State = 311;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; Match(LB);
				State = 302; Match(AND);
				State = 306;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 303; cEffect();
					}
					}
					State = 308;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 309; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public PEffectContext pEffect() {
			return GetRuleContext<PEffectContext>(0);
		}
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningDomainParser.FORALL, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningDomainParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterCEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitCEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_cEffect);
		try {
			State = 326;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313; Match(LB);
				State = 314; Match(FORALL);
				State = 315; listVariable();
				State = 316; effect();
				State = 317; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; Match(LB);
				State = 320; Match(WHEN);
				State = 321; gd();
				State = 322; condEffect();
				State = 323; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 325; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningDomainParser.NOT, 0); }
		public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public PEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PEffectContext pEffect() {
		PEffectContext _localctx = new PEffectContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_pEffect);
		try {
			State = 334;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; Match(LB);
				State = 329; Match(NOT);
				State = 330; atomicFormula();
				State = 331; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333; atomicFormula();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public IReadOnlyList<PEffectContext> pEffect() {
			return GetRuleContexts<PEffectContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public PEffectContext pEffect(int i) {
			return GetRuleContext<PEffectContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterCondEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitCondEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_condEffect);
		int _la;
		try {
			State = 346;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 336; Match(LB);
				State = 337; Match(AND);
				State = 341;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 338; pEffect();
					}
					}
					State = 343;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 344; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode FUNSYM() { return GetToken(PlanningDomainParser.FUNSYM, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public FunctionTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterFunctionTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitFunctionTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTermContext functionTerm() {
		FunctionTermContext _localctx = new FunctionTermContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_functionTerm);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(FUNSYM);
			State = 352;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 349; term();
					}
					} 
				}
				State = 354;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x34\x166\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x5\x2\x44\n\x2\x3\x2\x5\x2G\n\x2\x3\x2\x5\x2J\n\x2"+
		"\x3\x2\a\x2M\n\x2\f\x2\xE\x2P\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x6\x3X\n\x3\r\x3\xE\x3Y\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4`\n\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3"+
		"\b\x3\b\x6\br\n\b\r\b\xE\bs\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3"+
		"\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x6\f\x85\n\f\r\f\xE\f\x86\x3\f\x3\f\x5"+
		"\f\x8B\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5"+
		"\x10\xA2\n\x10\x5\x10\xA4\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5"+
		"\x10\xAB\n\x10\x5\x10\xAD\n\x10\x3\x11\x6\x11\xB0\n\x11\r\x11\xE\x11\xB1"+
		"\x3\x12\a\x12\xB5\n\x12\f\x12\xE\x12\xB8\v\x12\x3\x12\x6\x12\xBB\n\x12"+
		"\r\x12\xE\x12\xBC\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xC3\n\x12\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\a\x13\xC9\n\x13\f\x13\xE\x13\xCC\v\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xD5\n\x13\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xDE\n\x14\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\xE7\n\x16\f\x16\xE\x16\xEA\v\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\xF0\n\x16\f\x16\xE\x16\xF3\v\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x10C\n\x16\x3\x17\x3\x17\x3\x17\a\x17\x111\n"+
		"\x17\f\x17\xE\x17\x114\v\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17"+
		"\x11B\n\x17\f\x17\xE\x17\x11E\v\x17\x3\x17\x5\x17\x121\n\x17\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x129\n\x18\x3\x19\x3\x19\x3\x19"+
		"\x5\x19\x12E\n\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\x133\n\x1A\f\x1A\xE\x1A"+
		"\x136\v\x1A\x3\x1A\x3\x1A\x5\x1A\x13A\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x149\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x151\n\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\a\x1D\x156\n\x1D\f\x1D\xE\x1D\x159\v\x1D\x3\x1D"+
		"\x3\x1D\x5\x1D\x15D\n\x1D\x3\x1E\x3\x1E\a\x1E\x161\n\x1E\f\x1E\xE\x1E"+
		"\x164\v\x1E\x3\x1E\x2\x2\x2\x1F\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2"+
		"&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2\x2\x3\x4\x2"+
		"\f\f..\x173\x2<\x3\x2\x2\x2\x4S\x3\x2\x2\x2\x6_\x3\x2\x2\x2\b\x61\x3\x2"+
		"\x2\x2\n\x64\x3\x2\x2\x2\fg\x3\x2\x2\x2\xEm\x3\x2\x2\x2\x10w\x3\x2\x2"+
		"\x2\x12|\x3\x2\x2\x2\x14~\x3\x2\x2\x2\x16\x8A\x3\x2\x2\x2\x18\x8C\x3\x2"+
		"\x2\x2\x1A\x8E\x3\x2\x2\x2\x1C\x9A\x3\x2\x2\x2\x1E\xA3\x3\x2\x2\x2 \xAF"+
		"\x3\x2\x2\x2\"\xC2\x3\x2\x2\x2$\xD4\x3\x2\x2\x2&\xDD\x3\x2\x2\x2(\xDF"+
		"\x3\x2\x2\x2*\x10B\x3\x2\x2\x2,\x120\x3\x2\x2\x2.\x128\x3\x2\x2\x2\x30"+
		"\x12D\x3\x2\x2\x2\x32\x139\x3\x2\x2\x2\x34\x148\x3\x2\x2\x2\x36\x150\x3"+
		"\x2\x2\x2\x38\x15C\x3\x2\x2\x2:\x15E\x3\x2\x2\x2<=\a\x10\x2\x2=>\a\x4"+
		"\x2\x2>?\a\x10\x2\x2?@\a\x3\x2\x2@\x41\a.\x2\x2\x41\x43\a\x11\x2\x2\x42"+
		"\x44\x5\x4\x3\x2\x43\x42\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x46\x3\x2"+
		"\x2\x2\x45G\x5\f\a\x2\x46\x45\x3\x2\x2\x2\x46G\x3\x2\x2\x2GI\x3\x2\x2"+
		"\x2HJ\x5\xE\b\x2IH\x3\x2\x2\x2IJ\x3\x2\x2\x2JN\x3\x2\x2\x2KM\x5\x18\r"+
		"\x2LK\x3\x2\x2\x2MP\x3\x2\x2\x2NL\x3\x2\x2\x2NO\x3\x2\x2\x2OQ\x3\x2\x2"+
		"\x2PN\x3\x2\x2\x2QR\a\x11\x2\x2R\x3\x3\x2\x2\x2ST\a\x10\x2\x2TU\a\x14"+
		"\x2\x2UW\a\x5\x2\x2VX\x5\x6\x4\x2WV\x3\x2\x2\x2XY\x3\x2\x2\x2YW\x3\x2"+
		"\x2\x2YZ\x3\x2\x2\x2Z[\x3\x2\x2\x2[\\\a\x11\x2\x2\\\x5\x3\x2\x2\x2]`\x5"+
		"\b\x5\x2^`\x5\n\x6\x2_]\x3\x2\x2\x2_^\x3\x2\x2\x2`\a\x3\x2\x2\x2\x61\x62"+
		"\a\x14\x2\x2\x62\x63\a\xE\x2\x2\x63\t\x3\x2\x2\x2\x64\x65\a\x14\x2\x2"+
		"\x65\x66\a\xF\x2\x2\x66\v\x3\x2\x2\x2gh\a\x10\x2\x2hi\a\x14\x2\x2ij\a"+
		"\x6\x2\x2jk\x5 \x11\x2kl\a\x11\x2\x2l\r\x3\x2\x2\x2mn\a\x10\x2\x2no\a"+
		"\x14\x2\x2oq\a\a\x2\x2pr\x5\x10\t\x2qp\x3\x2\x2\x2rs\x3\x2\x2\x2sq\x3"+
		"\x2\x2\x2st\x3\x2\x2\x2tu\x3\x2\x2\x2uv\a\x11\x2\x2v\xF\x3\x2\x2\x2wx"+
		"\a\x10\x2\x2xy\x5\x12\n\x2yz\x5\"\x12\x2z{\a\x11\x2\x2{\x11\x3\x2\x2\x2"+
		"|}\a.\x2\x2}\x13\x3\x2\x2\x2~\x7F\t\x2\x2\x2\x7F\x15\x3\x2\x2\x2\x80\x8B"+
		"\x5\x14\v\x2\x81\x82\a\x10\x2\x2\x82\x84\a\r\x2\x2\x83\x85\x5\x14\v\x2"+
		"\x84\x83\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x86\x87\x3"+
		"\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89\a\x11\x2\x2\x89\x8B\x3\x2\x2\x2"+
		"\x8A\x80\x3\x2\x2\x2\x8A\x81\x3\x2\x2\x2\x8B\x17\x3\x2\x2\x2\x8C\x8D\x5"+
		"\x1A\xE\x2\x8D\x19\x3\x2\x2\x2\x8E\x8F\a\x10\x2\x2\x8F\x90\a\x14\x2\x2"+
		"\x90\x91\a\b\x2\x2\x91\x92\x5\x1C\xF\x2\x92\x93\a\x14\x2\x2\x93\x94\a"+
		"\t\x2\x2\x94\x95\a\x10\x2\x2\x95\x96\x5\"\x12\x2\x96\x97\a\x11\x2\x2\x97"+
		"\x98\x5\x1E\x10\x2\x98\x99\a\x11\x2\x2\x99\x1B\x3\x2\x2\x2\x9A\x9B\a."+
		"\x2\x2\x9B\x1D\x3\x2\x2\x2\x9C\x9D\a\x14\x2\x2\x9D\xA1\a\n\x2\x2\x9E\xA2"+
		"\x5$\x13\x2\x9F\xA0\a\x10\x2\x2\xA0\xA2\a\x11\x2\x2\xA1\x9E\x3\x2\x2\x2"+
		"\xA1\x9F\x3\x2\x2\x2\xA2\xA4\x3\x2\x2\x2\xA3\x9C\x3\x2\x2\x2\xA3\xA4\x3"+
		"\x2\x2\x2\xA4\xAC\x3\x2\x2\x2\xA5\xA6\a\x14\x2\x2\xA6\xAA\a\v\x2\x2\xA7"+
		"\xAB\x5\x32\x1A\x2\xA8\xA9\a\x10\x2\x2\xA9\xAB\a\x11\x2\x2\xAA\xA7\x3"+
		"\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xA5\x3\x2\x2\x2"+
		"\xAC\xAD\x3\x2\x2\x2\xAD\x1F\x3\x2\x2\x2\xAE\xB0\a.\x2\x2\xAF\xAE\x3\x2"+
		"\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2"+
		"!\x3\x2\x2\x2\xB3\xB5\a\x32\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\xB8\x3\x2\x2"+
		"\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xC3\x3\x2\x2\x2\xB8\xB6"+
		"\x3\x2\x2\x2\xB9\xBB\a\x32\x2\x2\xBA\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2\x2"+
		"\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBF"+
		"\a\x18\x2\x2\xBF\xC0\x5\x16\f\x2\xC0\xC1\x5\"\x12\x2\xC1\xC3\x3\x2\x2"+
		"\x2\xC2\xB6\x3\x2\x2\x2\xC2\xBA\x3\x2\x2\x2\xC3#\x3\x2\x2\x2\xC4\xD5\x5"+
		"&\x14\x2\xC5\xC6\a\x10\x2\x2\xC6\xCA\a\"\x2\x2\xC7\xC9\x5$\x13\x2\xC8"+
		"\xC7\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2"+
		"\x2\x2\xCB\xCD\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xD5\a\x11\x2\x2\xCE"+
		"\xCF\a\x10\x2\x2\xCF\xD0\a&\x2\x2\xD0\xD1\x5\"\x12\x2\xD1\xD2\x5$\x13"+
		"\x2\xD2\xD3\a\x11\x2\x2\xD3\xD5\x3\x2\x2\x2\xD4\xC4\x3\x2\x2\x2\xD4\xC5"+
		"\x3\x2\x2\x2\xD4\xCE\x3\x2\x2\x2\xD5%\x3\x2\x2\x2\xD6\xDE\x5*\x16\x2\xD7"+
		"\xD8\a\x10\x2\x2\xD8\xD9\a)\x2\x2\xD9\xDA\x5(\x15\x2\xDA\xDB\x5*\x16\x2"+
		"\xDB\xDC\a\x11\x2\x2\xDC\xDE\x3\x2\x2\x2\xDD\xD6\x3\x2\x2\x2\xDD\xD7\x3"+
		"\x2\x2\x2\xDE\'\x3\x2\x2\x2\xDF\xE0\a.\x2\x2\xE0)\x3\x2\x2\x2\xE1\x10C"+
		"\x5,\x17\x2\xE2\x10C\x5.\x18\x2\xE3\xE4\a\x10\x2\x2\xE4\xE8\a\"\x2\x2"+
		"\xE5\xE7\x5*\x16\x2\xE6\xE5\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2\xE8\xE6\x3"+
		"\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEB\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2"+
		"\xEB\x10C\a\x11\x2\x2\xEC\xED\a\x10\x2\x2\xED\xF1\a#\x2\x2\xEE\xF0\x5"+
		"*\x16\x2\xEF\xEE\x3\x2\x2\x2\xF0\xF3\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF1"+
		"\xF2\x3\x2\x2\x2\xF2\xF4\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF4\x10C\a\x11"+
		"\x2\x2\xF5\xF6\a\x10\x2\x2\xF6\xF7\a%\x2\x2\xF7\xF8\x5*\x16\x2\xF8\xF9"+
		"\x5*\x16\x2\xF9\xFA\a\x11\x2\x2\xFA\x10C\x3\x2\x2\x2\xFB\xFC\a\x10\x2"+
		"\x2\xFC\xFD\a\'\x2\x2\xFD\xFE\a\x10\x2\x2\xFE\xFF\x5\"\x12\x2\xFF\x100"+
		"\a\x11\x2\x2\x100\x101\x5*\x16\x2\x101\x102\a\x11\x2\x2\x102\x10C\x3\x2"+
		"\x2\x2\x103\x104\a\x10\x2\x2\x104\x105\a&\x2\x2\x105\x106\a\x10\x2\x2"+
		"\x106\x107\x5\"\x12\x2\x107\x108\a\x11\x2\x2\x108\x109\x5*\x16\x2\x109"+
		"\x10A\a\x11\x2\x2\x10A\x10C\x3\x2\x2\x2\x10B\xE1\x3\x2\x2\x2\x10B\xE2"+
		"\x3\x2\x2\x2\x10B\xE3\x3\x2\x2\x2\x10B\xEC\x3\x2\x2\x2\x10B\xF5\x3\x2"+
		"\x2\x2\x10B\xFB\x3\x2\x2\x2\x10B\x103\x3\x2\x2\x2\x10C+\x3\x2\x2\x2\x10D"+
		"\x10E\a\x10\x2\x2\x10E\x112\x5\x12\n\x2\x10F\x111\x5\x30\x19\x2\x110\x10F"+
		"\x3\x2\x2\x2\x111\x114\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x113\x3"+
		"\x2\x2\x2\x113\x115\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x115\x116\a\x11"+
		"\x2\x2\x116\x121\x3\x2\x2\x2\x117\x118\a\x10\x2\x2\x118\x11C\a\x1D\x2"+
		"\x2\x119\x11B\x5\x30\x19\x2\x11A\x119\x3\x2\x2\x2\x11B\x11E\x3\x2\x2\x2"+
		"\x11C\x11A\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11F\x3\x2\x2\x2\x11E"+
		"\x11C\x3\x2\x2\x2\x11F\x121\a\x11\x2\x2\x120\x10D\x3\x2\x2\x2\x120\x117"+
		"\x3\x2\x2\x2\x121-\x3\x2\x2\x2\x122\x129\x5,\x17\x2\x123\x124\a\x10\x2"+
		"\x2\x124\x125\a$\x2\x2\x125\x126\x5,\x17\x2\x126\x127\a\x11\x2\x2\x127"+
		"\x129\x3\x2\x2\x2\x128\x122\x3\x2\x2\x2\x128\x123\x3\x2\x2\x2\x129/\x3"+
		"\x2\x2\x2\x12A\x12E\a.\x2\x2\x12B\x12E\a\x32\x2\x2\x12C\x12E\x5:\x1E\x2"+
		"\x12D\x12A\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12D\x12C\x3\x2\x2\x2\x12E"+
		"\x31\x3\x2\x2\x2\x12F\x130\a\x10\x2\x2\x130\x134\a\"\x2\x2\x131\x133\x5"+
		"\x34\x1B\x2\x132\x131\x3\x2\x2\x2\x133\x136\x3\x2\x2\x2\x134\x132\x3\x2"+
		"\x2\x2\x134\x135\x3\x2\x2\x2\x135\x137\x3\x2\x2\x2\x136\x134\x3\x2\x2"+
		"\x2\x137\x13A\a\x11\x2\x2\x138\x13A\x5\x34\x1B\x2\x139\x12F\x3\x2\x2\x2"+
		"\x139\x138\x3\x2\x2\x2\x13A\x33\x3\x2\x2\x2\x13B\x13C\a\x10\x2\x2\x13C"+
		"\x13D\a&\x2\x2\x13D\x13E\x5\"\x12\x2\x13E\x13F\x5\x32\x1A\x2\x13F\x140"+
		"\a\x11\x2\x2\x140\x149\x3\x2\x2\x2\x141\x142\a\x10\x2\x2\x142\x143\a("+
		"\x2\x2\x143\x144\x5*\x16\x2\x144\x145\x5\x38\x1D\x2\x145\x146\a\x11\x2"+
		"\x2\x146\x149\x3\x2\x2\x2\x147\x149\x5\x36\x1C\x2\x148\x13B\x3\x2\x2\x2"+
		"\x148\x141\x3\x2\x2\x2\x148\x147\x3\x2\x2\x2\x149\x35\x3\x2\x2\x2\x14A"+
		"\x14B\a\x10\x2\x2\x14B\x14C\a$\x2\x2\x14C\x14D\x5,\x17\x2\x14D\x14E\a"+
		"\x11\x2\x2\x14E\x151\x3\x2\x2\x2\x14F\x151\x5,\x17\x2\x150\x14A\x3\x2"+
		"\x2\x2\x150\x14F\x3\x2\x2\x2\x151\x37\x3\x2\x2\x2\x152\x153\a\x10\x2\x2"+
		"\x153\x157\a\"\x2\x2\x154\x156\x5\x36\x1C\x2\x155\x154\x3\x2\x2\x2\x156"+
		"\x159\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x15A"+
		"\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15D\a\x11\x2\x2\x15B\x15D\x5"+
		"\x36\x1C\x2\x15C\x152\x3\x2\x2\x2\x15C\x15B\x3\x2\x2\x2\x15D\x39\x3\x2"+
		"\x2\x2\x15E\x162\a\x33\x2\x2\x15F\x161\x5\x30\x19\x2\x160\x15F\x3\x2\x2"+
		"\x2\x161\x164\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2"+
		"\x163;\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2%\x43\x46INY_s\x86\x8A\xA1\xA3"+
		"\xAA\xAC\xB1\xB6\xBC\xC2\xCA\xD4\xDD\xE8\xF1\x10B\x112\x11C\x120\x128"+
		"\x12D\x134\x139\x148\x150\x157\x15C\x162";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
