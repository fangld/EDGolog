//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\PlanningDomain.g4 by ANTLR 4.2.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningDomainParser : Parser {
	public const int
		LB=1, RB=2, LSB=3, RSB=4, COLON=5, QM=6, COMMA=7, UL=8, DASH=9, PLUS=10, 
		MINUS=11, MULT=12, DIV=13, EQ=14, LT=15, LEQ=16, GT=17, GEQ=18, AND=19, 
		OR=20, NOT=21, IMPLY=22, FORALL=23, EXISTS=24, PREF=25, BINARYCOMP=26, 
		BINARYOP=27, LETTER=28, DIGIT=29, NAME=30, CHAR=31, NUMBER=32, DECIMAL=33, 
		VAR=34, DOM=35, DEF=36, REQ=37, TYPE=38, PRED=39, ACT=40, PARM=41, PRE=42, 
		EFF=43, FUNSYM=44, STRIPS=45, TYPING=46, WS=47;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'('", "')'", "'['", "']'", "':'", "'?'", "'.'", "'_'", "DASH", 
		"'+'", "MINUS", "'*'", "'/'", "'='", "'<'", "'<='", "'>'", "'>='", "'and'", 
		"'or'", "'not'", "'imply'", "'forall'", "'exists'", "'preference'", "BINARYCOMP", 
		"BINARYOP", "LETTER", "DIGIT", "NAME", "CHAR", "NUMBER", "DECIMAL", "VAR", 
		"'domain'", "'define'", "'requirements'", "'types'", "'predicates'", "'actions'", 
		"'parameters'", "'precondition'", "'effect'", "FUNSYM", "STRIPS", "TYPING", 
		"WS"
	};
	public const int
		RULE_domain = 0, RULE_reqDef = 1, RULE_reqKey = 2, RULE_typeDef = 3, RULE_predDef = 4, 
		RULE_actDef = 5, RULE_actSym = 6, RULE_actBodyDef = 7, RULE_listName = 8, 
		RULE_listVar = 9, RULE_preGD = 10, RULE_prefGD = 11, RULE_prefName = 12, 
		RULE_gd = 13, RULE_atomicForm = 14, RULE_literal = 15, RULE_term = 16, 
		RULE_funTerm = 17;
	public static readonly string[] ruleNames = {
		"domain", "reqDef", "reqKey", "typeDef", "predDef", "actDef", "actSym", 
		"actBodyDef", "listName", "listVar", "preGD", "prefGD", "prefName", "gd", 
		"atomicForm", "literal", "term", "funTerm"
	};

	public override string GrammarFileName { get { return "PlanningDomain.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningDomainParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public PredDefContext predDef() {
			return GetRuleContext<PredDefContext>(0);
		}
		public ITerminalNode DEF() { return GetToken(PlanningDomainParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public ReqDefContext reqDef() {
			return GetRuleContext<ReqDefContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public ITerminalNode DOM() { return GetToken(PlanningDomainParser.DOM, 0); }
		public TypeDefContext typeDef() {
			return GetRuleContext<TypeDefContext>(0);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterDomain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitDomain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(LB);
			State = 37; Match(DEF);
			State = 38; Match(LB);
			State = 39; Match(DOM);
			State = 40; Match(NAME);
			State = 41; Match(RB);
			State = 42; reqDef();
			State = 43; typeDef();
			State = 44; predDef();
			State = 45; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReqDefContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public IReadOnlyList<ReqKeyContext> reqKey() {
			return GetRuleContexts<ReqKeyContext>();
		}
		public ITerminalNode REQ() { return GetToken(PlanningDomainParser.REQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ReqKeyContext reqKey(int i) {
			return GetRuleContext<ReqKeyContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public ReqDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_reqDef; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterReqDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitReqDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReqDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReqDefContext reqDef() {
		ReqDefContext _localctx = new ReqDefContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_reqDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(LB);
			State = 48; Match(COLON);
			State = 49; Match(REQ);
			State = 51;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 50; reqKey();
				}
				}
				State = 53;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STRIPS || _la==TYPING );
			State = 55; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReqKeyContext : ParserRuleContext {
		public ITerminalNode STRIPS() { return GetToken(PlanningDomainParser.STRIPS, 0); }
		public ITerminalNode TYPING() { return GetToken(PlanningDomainParser.TYPING, 0); }
		public ReqKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_reqKey; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterReqKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitReqKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReqKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReqKeyContext reqKey() {
		ReqKeyContext _localctx = new ReqKeyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_reqKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_la = _input.La(1);
			if ( !(_la==STRIPS || _la==TYPING) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningDomainParser.TYPE, 0); }
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDef; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_typeDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(LB);
			State = 60; Match(COLON);
			State = 61; Match(TYPE);
			State = 62; listName();
			State = 63; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredDefContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningDomainParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningDomainParser.PRED, 0); }
		public PredDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predDef; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPredDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPredDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredDefContext predDef() {
		PredDefContext _localctx = new PredDefContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_predDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(LB);
			State = 66; Match(COLON);
			State = 67; Match(PRED);
			State = 68; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActDefContext : ParserRuleContext {
		public ITerminalNode PARM() { return GetToken(PlanningDomainParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ListVarContext listVar() {
			return GetRuleContext<ListVarContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningDomainParser.COLON, i);
		}
		public ActSymContext actSym() {
			return GetRuleContext<ActSymContext>(0);
		}
		public ITerminalNode ACT() { return GetToken(PlanningDomainParser.ACT, 0); }
		public ActBodyDefContext actBodyDef() {
			return GetRuleContext<ActBodyDefContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningDomainParser.COLON); }
		public ActDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actDef; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterActDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitActDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActDefContext actDef() {
		ActDefContext _localctx = new ActDefContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_actDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(LB);
			State = 71; Match(COLON);
			State = 72; Match(ACT);
			State = 73; actSym();
			State = 74; Match(COLON);
			State = 75; Match(PARM);
			State = 76; Match(LB);
			State = 77; listVar();
			State = 78; Match(RB);
			State = 79; actBodyDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActSymContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public ActSymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actSym; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterActSym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitActSym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActSym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActSymContext actSym() {
		ActSymContext _localctx = new ActSymContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_actSym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActBodyDefContext : ParserRuleContext {
		public ITerminalNode LSB(int i) {
			return GetToken(PlanningDomainParser.LSB, i);
		}
		public ITerminalNode RSB(int i) {
			return GetToken(PlanningDomainParser.RSB, i);
		}
		public IReadOnlyList<ITerminalNode> RSB() { return GetTokens(PlanningDomainParser.RSB); }
		public ITerminalNode PRE() { return GetToken(PlanningDomainParser.PRE, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningDomainParser.EFF, 0); }
		public PreGDContext preGD() {
			return GetRuleContext<PreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningDomainParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningDomainParser.COLON); }
		public IReadOnlyList<ITerminalNode> LSB() { return GetTokens(PlanningDomainParser.LSB); }
		public ActBodyDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actBodyDef; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterActBodyDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitActBodyDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActBodyDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActBodyDefContext actBodyDef() {
		ActBodyDefContext _localctx = new ActBodyDefContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_actBodyDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(LSB);
			State = 84; Match(COLON);
			State = 85; Match(PRE);
			State = 86; preGD();
			State = 87; Match(RSB);
			State = 88; Match(LSB);
			State = 89; Match(COLON);
			State = 90; Match(EFF);
			State = 91; Match(RSB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningDomainParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningDomainParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterListName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitListName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_listName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 93; Match(NAME);
				}
				}
				State = 96;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVarContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningDomainParser.VAR, i);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningDomainParser.VAR); }
		public ListVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVar; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterListVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitListVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListVarContext listVar() {
		ListVarContext _localctx = new ListVarContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_listVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 98; Match(VAR);
				}
				}
				State = 101;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==VAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public PreGDContext preGD(int i) {
			return GetRuleContext<PreGDContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ListVarContext listVar() {
			return GetRuleContext<ListVarContext>(0);
		}
		public IReadOnlyList<PreGDContext> preGD() {
			return GetRuleContexts<PreGDContext>();
		}
		public ITerminalNode FORALL() { return GetToken(PlanningDomainParser.FORALL, 0); }
		public PrefGDContext prefGD() {
			return GetRuleContext<PrefGDContext>(0);
		}
		public PreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_preGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreGDContext preGD() {
		PreGDContext _localctx = new PreGDContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_preGD);
		int _la;
		try {
			State = 119;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; prefGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104; Match(RB);
				State = 105; Match(AND);
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==RB || _la==NOT) {
					{
					{
					State = 106; preGD();
					}
					}
					State = 111;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 112; Match(LB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113; Match(RB);
				State = 114; Match(FORALL);
				State = 115; listVar();
				State = 116; preGD();
				State = 117; Match(LB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode PREF() { return GetToken(PlanningDomainParser.PREF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public PrefNameContext prefName() {
			return GetRuleContext<PrefNameContext>(0);
		}
		public PrefGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPrefGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPrefGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefGDContext prefGD() {
		PrefGDContext _localctx = new PrefGDContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_prefGD);
		try {
			State = 128;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; Match(RB);
				State = 122; Match(PREF);
				State = 123; prefName();
				State = 124; gd();
				State = 125; Match(LB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; gd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public PrefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterPrefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitPrefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefNameContext prefName() {
		PrefNameContext _localctx = new PrefNameContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_prefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningDomainParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningDomainParser.AND, 0); }
		public ListVarContext listVar() {
			return GetRuleContext<ListVarContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlanningDomainParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningDomainParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningDomainParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningDomainParser.LB); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningDomainParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningDomainParser.RB); }
		public ITerminalNode IMPLY() { return GetToken(PlanningDomainParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public AtomicFormContext atomicForm() {
			return GetRuleContext<AtomicFormContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterGd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitGd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_gd);
		int _la;
		try {
			State = 174;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; atomicForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; literal();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; Match(RB);
				State = 135; Match(AND);
				State = 139;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==RB || _la==NOT) {
					{
					{
					State = 136; gd();
					}
					}
					State = 141;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 142; Match(LB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 143; Match(RB);
				State = 144; Match(OR);
				State = 148;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==RB || _la==NOT) {
					{
					{
					State = 145; gd();
					}
					}
					State = 150;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 151; Match(LB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 152; Match(RB);
				State = 153; Match(IMPLY);
				State = 154; gd();
				State = 155; gd();
				State = 156; Match(LB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 158; Match(RB);
				State = 159; Match(EXISTS);
				State = 160; Match(RB);
				State = 161; listVar();
				State = 162; Match(LB);
				State = 163; gd();
				State = 164; Match(LB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 166; Match(RB);
				State = 167; Match(FORALL);
				State = 168; Match(RB);
				State = 169; listVar();
				State = 170; Match(LB);
				State = 171; gd();
				State = 172; Match(LB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningDomainParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningDomainParser.RB, 0); }
		public ITerminalNode EQ() { return GetToken(PlanningDomainParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode PRED() { return GetToken(PlanningDomainParser.PRED, 0); }
		public AtomicFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicForm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterAtomicForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitAtomicForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormContext atomicForm() {
		AtomicFormContext _localctx = new AtomicFormContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_atomicForm);
		int _la;
		try {
			State = 194;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; Match(RB);
				State = 177; Match(PRED);
				State = 181;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 178; term();
					}
					}
					State = 183;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 184; Match(LB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; Match(RB);
				State = 186; Match(EQ);
				State = 190;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 187; term();
					}
					}
					State = 192;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 193; Match(LB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(PlanningDomainParser.NOT, 0); }
		public AtomicFormContext atomicForm() {
			return GetRuleContext<AtomicFormContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_literal);
		try {
			State = 199;
			switch (_input.La(1)) {
			case RB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; atomicForm();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197; Match(NOT);
				State = 198; atomicForm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningDomainParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningDomainParser.NAME, 0); }
		public FunTermContext funTerm() {
			return GetRuleContext<FunTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_term);
		try {
			State = 204;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; Match(NAME);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; Match(VAR);
				}
				break;
			case FUNSYM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203; funTerm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode FUNSYM() { return GetToken(PlanningDomainParser.FUNSYM, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public FunTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_funTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.EnterFunTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningDomainListener typedListener = listener as IPlanningDomainListener;
			if (typedListener != null) typedListener.ExitFunTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningDomainVisitor<TResult> typedVisitor = visitor as IPlanningDomainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunTermContext funTerm() {
		FunTermContext _localctx = new FunTermContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_funTerm);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(FUNSYM);
			State = 210;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 207; term();
					}
					} 
				}
				State = 212;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x31\xD8\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x6"+
		"\x3\x36\n\x3\r\x3\xE\x3\x37\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\n\x6\n\x61\n\n\r\n\xE\n\x62\x3\v\x6\v\x66\n"+
		"\v\r\v\xE\vg\x3\f\x3\f\x3\f\x3\f\a\fn\n\f\f\f\xE\fq\v\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x5\fz\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r"+
		"\x83\n\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x8C\n\xF\f\xF"+
		"\xE\xF\x8F\v\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x95\n\xF\f\xF\xE\xF\x98\v"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x5\xF\xB1\n\xF\x3\x10\x3\x10\x3\x10\a\x10\xB6\n\x10\f\x10\xE\x10\xB9"+
		"\v\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\xBF\n\x10\f\x10\xE\x10\xC2\v"+
		"\x10\x3\x10\x5\x10\xC5\n\x10\x3\x11\x3\x11\x3\x11\x5\x11\xCA\n\x11\x3"+
		"\x12\x3\x12\x3\x12\x5\x12\xCF\n\x12\x3\x13\x3\x13\a\x13\xD3\n\x13\f\x13"+
		"\xE\x13\xD6\v\x13\x3\x13\x2\x2\x2\x14\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2\x2\x3\x3\x2/\x30\xDB\x2&\x3\x2\x2\x2\x4\x31\x3\x2\x2\x2\x6;\x3\x2"+
		"\x2\x2\b=\x3\x2\x2\x2\n\x43\x3\x2\x2\x2\fH\x3\x2\x2\x2\xES\x3\x2\x2\x2"+
		"\x10U\x3\x2\x2\x2\x12`\x3\x2\x2\x2\x14\x65\x3\x2\x2\x2\x16y\x3\x2\x2\x2"+
		"\x18\x82\x3\x2\x2\x2\x1A\x84\x3\x2\x2\x2\x1C\xB0\x3\x2\x2\x2\x1E\xC4\x3"+
		"\x2\x2\x2 \xC9\x3\x2\x2\x2\"\xCE\x3\x2\x2\x2$\xD0\x3\x2\x2\x2&\'\a\x3"+
		"\x2\x2\'(\a&\x2\x2()\a\x3\x2\x2)*\a%\x2\x2*+\a \x2\x2+,\a\x4\x2\x2,-\x5"+
		"\x4\x3\x2-.\x5\b\x5\x2./\x5\n\x6\x2/\x30\a\x4\x2\x2\x30\x3\x3\x2\x2\x2"+
		"\x31\x32\a\x3\x2\x2\x32\x33\a\a\x2\x2\x33\x35\a\'\x2\x2\x34\x36\x5\x6"+
		"\x4\x2\x35\x34\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37"+
		"\x38\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39:\a\x4\x2\x2:\x5\x3\x2\x2\x2;"+
		"<\t\x2\x2\x2<\a\x3\x2\x2\x2=>\a\x3\x2\x2>?\a\a\x2\x2?@\a(\x2\x2@\x41\x5"+
		"\x12\n\x2\x41\x42\a\x4\x2\x2\x42\t\x3\x2\x2\x2\x43\x44\a\x3\x2\x2\x44"+
		"\x45\a\a\x2\x2\x45\x46\a)\x2\x2\x46G\a\x4\x2\x2G\v\x3\x2\x2\x2HI\a\x3"+
		"\x2\x2IJ\a\a\x2\x2JK\a*\x2\x2KL\x5\xE\b\x2LM\a\a\x2\x2MN\a+\x2\x2NO\a"+
		"\x3\x2\x2OP\x5\x14\v\x2PQ\a\x4\x2\x2QR\x5\x10\t\x2R\r\x3\x2\x2\x2ST\a"+
		" \x2\x2T\xF\x3\x2\x2\x2UV\a\x5\x2\x2VW\a\a\x2\x2WX\a,\x2\x2XY\x5\x16\f"+
		"\x2YZ\a\x6\x2\x2Z[\a\x5\x2\x2[\\\a\a\x2\x2\\]\a-\x2\x2]^\a\x6\x2\x2^\x11"+
		"\x3\x2\x2\x2_\x61\a \x2\x2`_\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62`\x3\x2"+
		"\x2\x2\x62\x63\x3\x2\x2\x2\x63\x13\x3\x2\x2\x2\x64\x66\a$\x2\x2\x65\x64"+
		"\x3\x2\x2\x2\x66g\x3\x2\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2h\x15\x3\x2"+
		"\x2\x2iz\x5\x18\r\x2jk\a\x4\x2\x2ko\a\x15\x2\x2ln\x5\x16\f\x2ml\x3\x2"+
		"\x2\x2nq\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2\x2\x2pr\x3\x2\x2\x2qo\x3\x2"+
		"\x2\x2rz\a\x3\x2\x2st\a\x4\x2\x2tu\a\x19\x2\x2uv\x5\x14\v\x2vw\x5\x16"+
		"\f\x2wx\a\x3\x2\x2xz\x3\x2\x2\x2yi\x3\x2\x2\x2yj\x3\x2\x2\x2ys\x3\x2\x2"+
		"\x2z\x17\x3\x2\x2\x2{|\a\x4\x2\x2|}\a\x1B\x2\x2}~\x5\x1A\xE\x2~\x7F\x5"+
		"\x1C\xF\x2\x7F\x80\a\x3\x2\x2\x80\x83\x3\x2\x2\x2\x81\x83\x5\x1C\xF\x2"+
		"\x82{\x3\x2\x2\x2\x82\x81\x3\x2\x2\x2\x83\x19\x3\x2\x2\x2\x84\x85\a \x2"+
		"\x2\x85\x1B\x3\x2\x2\x2\x86\xB1\x5\x1E\x10\x2\x87\xB1\x5 \x11\x2\x88\x89"+
		"\a\x4\x2\x2\x89\x8D\a\x15\x2\x2\x8A\x8C\x5\x1C\xF\x2\x8B\x8A\x3\x2\x2"+
		"\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x90"+
		"\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\xB1\a\x3\x2\x2\x91\x92\a\x4\x2\x2"+
		"\x92\x96\a\x16\x2\x2\x93\x95\x5\x1C\xF\x2\x94\x93\x3\x2\x2\x2\x95\x98"+
		"\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x99\x3\x2\x2"+
		"\x2\x98\x96\x3\x2\x2\x2\x99\xB1\a\x3\x2\x2\x9A\x9B\a\x4\x2\x2\x9B\x9C"+
		"\a\x18\x2\x2\x9C\x9D\x5\x1C\xF\x2\x9D\x9E\x5\x1C\xF\x2\x9E\x9F\a\x3\x2"+
		"\x2\x9F\xB1\x3\x2\x2\x2\xA0\xA1\a\x4\x2\x2\xA1\xA2\a\x1A\x2\x2\xA2\xA3"+
		"\a\x4\x2\x2\xA3\xA4\x5\x14\v\x2\xA4\xA5\a\x3\x2\x2\xA5\xA6\x5\x1C\xF\x2"+
		"\xA6\xA7\a\x3\x2\x2\xA7\xB1\x3\x2\x2\x2\xA8\xA9\a\x4\x2\x2\xA9\xAA\a\x19"+
		"\x2\x2\xAA\xAB\a\x4\x2\x2\xAB\xAC\x5\x14\v\x2\xAC\xAD\a\x3\x2\x2\xAD\xAE"+
		"\x5\x1C\xF\x2\xAE\xAF\a\x3\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\x86\x3\x2\x2"+
		"\x2\xB0\x87\x3\x2\x2\x2\xB0\x88\x3\x2\x2\x2\xB0\x91\x3\x2\x2\x2\xB0\x9A"+
		"\x3\x2\x2\x2\xB0\xA0\x3\x2\x2\x2\xB0\xA8\x3\x2\x2\x2\xB1\x1D\x3\x2\x2"+
		"\x2\xB2\xB3\a\x4\x2\x2\xB3\xB7\a)\x2\x2\xB4\xB6\x5\"\x12\x2\xB5\xB4\x3"+
		"\x2\x2\x2\xB6\xB9\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2"+
		"\xB8\xBA\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xBA\xC5\a\x3\x2\x2\xBB\xBC\a"+
		"\x4\x2\x2\xBC\xC0\a\x10\x2\x2\xBD\xBF\x5\"\x12\x2\xBE\xBD\x3\x2\x2\x2"+
		"\xBF\xC2\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC3\x3"+
		"\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC5\a\x3\x2\x2\xC4\xB2\x3\x2\x2\x2\xC4"+
		"\xBB\x3\x2\x2\x2\xC5\x1F\x3\x2\x2\x2\xC6\xCA\x5\x1E\x10\x2\xC7\xC8\a\x17"+
		"\x2\x2\xC8\xCA\x5\x1E\x10\x2\xC9\xC6\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA"+
		"!\x3\x2\x2\x2\xCB\xCF\a \x2\x2\xCC\xCF\a$\x2\x2\xCD\xCF\x5$\x13\x2\xCE"+
		"\xCB\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCD\x3\x2\x2\x2\xCF#\x3\x2\x2"+
		"\x2\xD0\xD4\a.\x2\x2\xD1\xD3\x5\"\x12\x2\xD2\xD1\x3\x2\x2\x2\xD3\xD6\x3"+
		"\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5%\x3\x2\x2\x2\xD6"+
		"\xD4\x3\x2\x2\x2\x11\x37\x62goy\x82\x8D\x96\xB0\xB7\xC0\xC4\xC9\xCE\xD4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
