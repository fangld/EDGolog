//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\Planning.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOM=1, PROM=2, DEF=3, AGENTID=4, CONST=5, TYPE=6, PRED=7, ACT=8, EVT=9, 
		EVTS=10, PARM=11, PRE=12, RESP=13, OBS=14, MIN=15, MAX=16, NUMS=17, EFF=18, 
		OBJ=19, AGT=20, EITHER=21, INITKNOWLEDGE=22, INITBELIEF=23, OBJS=24, INIT=25, 
		GOAL=26, LB=27, RB=28, LSB=29, RSB=30, COLON=31, QM=32, POINT=33, UL=34, 
		MINUS=35, PLUS=36, MULT=37, DIV=38, EQ=39, NEQ=40, LT=41, LEQ=42, GT=43, 
		GEQ=44, AND=45, OR=46, NOT=47, IMPLY=48, FORALL=49, EXISTS=50, WHEN=51, 
		NAME=52, INTEGER=53, VAR=54, WS=55, AGENTS=56;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'agentid'", "'constants'", 
		"'types'", "'predicates'", "'action'", "'event'", "'events'", "'parameters'", 
		"'precondition'", "'response'", "'observation'", "'min'", "'max'", "'numbers'", 
		"'effect'", "'object'", "'agent'", "'either'", "'initknowledge'", "'initbelief'", 
		"'objects'", "'init'", "'goal'", "'('", "')'", "'['", "']'", "':'", "'?'", 
		"'.'", "'_'", "'-'", "'+'", "'*'", "'/'", "'='", "'!='", "'<'", "'<='", 
		"'>'", "'>='", "'and'", "'or'", "'not'", "'imply'", "'forall'", "'exists'", 
		"'when'", "NAME", "INTEGER", "VAR", "WS", "AGENTS"
	};
	public const int
		RULE_domain = 0, RULE_numericDefine = 1, RULE_numericSymbol = 2, RULE_typeDefine = 3, 
		RULE_predDefine = 4, RULE_atomFormSkeleton = 5, RULE_pred = 6, RULE_typeDeclaration = 7, 
		RULE_type = 8, RULE_eventDefine = 9, RULE_eventSymbol = 10, RULE_responseDefine = 11, 
		RULE_responseSymbol = 12, RULE_actionDefine = 13, RULE_actionSymbol = 14, 
		RULE_obsDefine = 15, RULE_obsSymbol = 16, RULE_eventModel = 17, RULE_plGdEvent = 18, 
		RULE_plDeg = 19, RULE_emptyOrPreGD = 20, RULE_emptyOrEffect = 21, RULE_listName = 22, 
		RULE_listVariable = 23, RULE_gd = 24, RULE_termAtomForm = 25, RULE_termLiteral = 26, 
		RULE_gdEvent = 27, RULE_termEventForm = 28, RULE_constTerm = 29, RULE_term = 30, 
		RULE_effect = 31, RULE_cEffect = 32, RULE_condEffect = 33, RULE_serverProblem = 34, 
		RULE_problemName = 35, RULE_domainName = 36, RULE_agentDefine = 37, RULE_objectDeclaration = 38, 
		RULE_numericSetting = 39, RULE_init = 40, RULE_constTermGd = 41, RULE_constTermAtomForm = 42, 
		RULE_constTermLiteral = 43, RULE_clientProblem = 44, RULE_initKnowledge = 45, 
		RULE_initBelief = 46, RULE_agentId = 47;
	public static readonly string[] ruleNames = {
		"domain", "numericDefine", "numericSymbol", "typeDefine", "predDefine", 
		"atomFormSkeleton", "pred", "typeDeclaration", "type", "eventDefine", 
		"eventSymbol", "responseDefine", "responseSymbol", "actionDefine", "actionSymbol", 
		"obsDefine", "obsSymbol", "eventModel", "plGdEvent", "plDeg", "emptyOrPreGD", 
		"emptyOrEffect", "listName", "listVariable", "gd", "termAtomForm", "termLiteral", 
		"gdEvent", "termEventForm", "constTerm", "term", "effect", "cEffect", 
		"condEffect", "serverProblem", "problemName", "domainName", "agentDefine", 
		"objectDeclaration", "numericSetting", "init", "constTermGd", "constTermAtomForm", 
		"constTermLiteral", "clientProblem", "initKnowledge", "initBelief", "agentId"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public IReadOnlyList<ActionDefineContext> actionDefine() {
			return GetRuleContexts<ActionDefineContext>();
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ObsDefineContext obsDefine(int i) {
			return GetRuleContext<ObsDefineContext>(i);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public EventDefineContext eventDefine(int i) {
			return GetRuleContext<EventDefineContext>(i);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ObsDefineContext> obsDefine() {
			return GetRuleContexts<ObsDefineContext>();
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredDefineContext predDefine() {
			return GetRuleContext<PredDefineContext>(0);
		}
		public IReadOnlyList<EventDefineContext> eventDefine() {
			return GetRuleContexts<EventDefineContext>();
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ActionDefineContext actionDefine(int i) {
			return GetRuleContext<ActionDefineContext>(i);
		}
		public NumericDefineContext numericDefine() {
			return GetRuleContext<NumericDefineContext>(0);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(LB);
			State = 97; Match(DEF);
			State = 98; Match(LB);
			State = 99; Match(DOM);
			State = 100; Match(NAME);
			State = 101; Match(RB);
			State = 103;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 102; numericDefine();
				}
				break;
			}
			State = 106;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 105; typeDefine();
				}
				break;
			}
			State = 109;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 108; predDefine();
				}
				break;
			}
			State = 114;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 111; eventDefine();
					}
					} 
				}
				State = 116;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			State = 120;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 117; actionDefine();
					}
					} 
				}
				State = 122;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 126;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 123; obsDefine();
				}
				}
				State = 128;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 129; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericDefineContext : ParserRuleContext {
		public ITerminalNode NUMS() { return GetToken(PlanningParser.NUMS, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<NumericSymbolContext> numericSymbol() {
			return GetRuleContexts<NumericSymbolContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public NumericSymbolContext numericSymbol(int i) {
			return GetRuleContext<NumericSymbolContext>(i);
		}
		public NumericDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericDefine; }
	}

	[RuleVersion(0)]
	public NumericDefineContext numericDefine() {
		NumericDefineContext _localctx = new NumericDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_numericDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(LB);
			State = 132; Match(COLON);
			State = 133; Match(NUMS);
			State = 135;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 134; numericSymbol();
				}
				}
				State = 137;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 139; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public NumericSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericSymbol; }
	}

	[RuleVersion(0)]
	public NumericSymbolContext numericSymbol() {
		NumericSymbolContext _localctx = new NumericSymbolContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_numericSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<TypeDeclarationContext> typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_typeDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(LB);
			State = 144; Match(COLON);
			State = 145; Match(TYPE);
			State = 147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 146; typeDeclaration();
				}
				}
				State = 149;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB || _la==NAME );
			State = 151; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public AtomFormSkeletonContext atomFormSkeleton(int i) {
			return GetRuleContext<AtomFormSkeletonContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<AtomFormSkeletonContext> atomFormSkeleton() {
			return GetRuleContexts<AtomFormSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningParser.PRED, 0); }
		public PredDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predDefine; }
	}

	[RuleVersion(0)]
	public PredDefineContext predDefine() {
		PredDefineContext _localctx = new PredDefineContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_predDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(LB);
			State = 154; Match(COLON);
			State = 155; Match(PRED);
			State = 157;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 156; atomFormSkeleton();
				}
				}
				State = 159;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 161; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomFormSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredContext pred() {
			return GetRuleContext<PredContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public AtomFormSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomFormSkeleton; }
	}

	[RuleVersion(0)]
	public AtomFormSkeletonContext atomFormSkeleton() {
		AtomFormSkeletonContext _localctx = new AtomFormSkeletonContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_atomFormSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(LB);
			State = 164; pred();
			State = 165; listVariable();
			State = 166; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pred; }
	}

	[RuleVersion(0)]
	public PredContext pred() {
		PredContext _localctx = new PredContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_pred);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public IReadOnlyList<ConstTermContext> constTerm() {
			return GetRuleContexts<ConstTermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ConstTermContext constTerm(int i) {
			return GetRuleContext<ConstTermContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDeclaration; }
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_typeDeclaration);
		try {
			State = 177;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; Match(NAME);
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; Match(LB);
				State = 172; Match(NAME);
				State = 173; constTerm();
				State = 174; constTerm();
				State = 175; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ITerminalNode AGT() { return GetToken(PlanningParser.AGT, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OBJ) | (1L << AGT) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefineContext : ParserRuleContext {
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningParser.EFF, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public EventSymbolContext eventSymbol() {
			return GetRuleContext<EventSymbolContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode EVT() { return GetToken(PlanningParser.EVT, 0); }
		public EventDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_eventDefine; }
	}

	[RuleVersion(0)]
	public EventDefineContext eventDefine() {
		EventDefineContext _localctx = new EventDefineContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_eventDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(LB);
			State = 182; Match(COLON);
			State = 183; Match(EVT);
			State = 184; eventSymbol();
			State = 191;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 185; Match(COLON);
				State = 186; Match(PARM);
				State = 187; Match(LB);
				State = 188; listVariable();
				State = 189; Match(RB);
				}
				break;
			}
			State = 196;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 193; Match(COLON);
				State = 194; Match(PRE);
				State = 195; emptyOrPreGD();
				}
				break;
			}
			State = 201;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 198; Match(COLON);
				State = 199; Match(EFF);
				State = 200; emptyOrEffect();
				}
			}

			State = 203; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public EventSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_eventSymbol; }
	}

	[RuleVersion(0)]
	public EventSymbolContext eventSymbol() {
		EventSymbolContext _localctx = new EventSymbolContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_eventSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResponseDefineContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ResponseSymbolContext responseSymbol() {
			return GetRuleContext<ResponseSymbolContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode EVTS() { return GetToken(PlanningParser.EVTS, 0); }
		public EventModelContext eventModel() {
			return GetRuleContext<EventModelContext>(0);
		}
		public ITerminalNode RESP() { return GetToken(PlanningParser.RESP, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ResponseDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_responseDefine; }
	}

	[RuleVersion(0)]
	public ResponseDefineContext responseDefine() {
		ResponseDefineContext _localctx = new ResponseDefineContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_responseDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(LB);
			State = 208; Match(COLON);
			State = 209; Match(RESP);
			State = 210; responseSymbol();
			State = 217;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 211; Match(COLON);
				State = 212; Match(PARM);
				State = 213; Match(LB);
				State = 214; listVariable();
				State = 215; Match(RB);
				}
				break;
			}
			State = 219; Match(COLON);
			State = 220; Match(EVTS);
			State = 221; eventModel();
			State = 222; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResponseSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ResponseSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_responseSymbol; }
	}

	[RuleVersion(0)]
	public ResponseSymbolContext responseSymbol() {
		ResponseSymbolContext _localctx = new ResponseSymbolContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_responseSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ResponseDefineContext> responseDefine() {
			return GetRuleContexts<ResponseDefineContext>();
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ResponseDefineContext responseDefine(int i) {
			return GetRuleContext<ResponseDefineContext>(i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_actionDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(LB);
			State = 227; Match(COLON);
			State = 228; Match(ACT);
			State = 229; actionSymbol();
			State = 236;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 230; Match(COLON);
				State = 231; Match(PARM);
				State = 232; Match(LB);
				State = 233; listVariable();
				State = 234; Match(RB);
				}
			}

			State = 239;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 238; responseDefine();
				}
				}
				State = 241;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 243; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObsDefineContext : ParserRuleContext {
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public ObsSymbolContext obsSymbol() {
			return GetRuleContext<ObsSymbolContext>(0);
		}
		public EventModelContext eventModel() {
			return GetRuleContext<EventModelContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode EVTS() { return GetToken(PlanningParser.EVTS, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode OBS() { return GetToken(PlanningParser.OBS, 0); }
		public ObsDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_obsDefine; }
	}

	[RuleVersion(0)]
	public ObsDefineContext obsDefine() {
		ObsDefineContext _localctx = new ObsDefineContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_obsDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(LB);
			State = 248; Match(COLON);
			State = 249; Match(OBS);
			State = 250; obsSymbol();
			State = 257;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 251; Match(COLON);
				State = 252; Match(PARM);
				State = 253; Match(LB);
				State = 254; listVariable();
				State = 255; Match(RB);
				}
				break;
			}
			State = 262;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 259; Match(COLON);
				State = 260; Match(PRE);
				State = 261; emptyOrPreGD();
				}
				break;
			}
			State = 264; Match(COLON);
			State = 265; Match(EVTS);
			State = 266; eventModel();
			State = 267; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObsSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ObsSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_obsSymbol; }
	}

	[RuleVersion(0)]
	public ObsSymbolContext obsSymbol() {
		ObsSymbolContext _localctx = new ObsSymbolContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_obsSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventModelContext : ParserRuleContext {
		public IReadOnlyList<PlGdEventContext> plGdEvent() {
			return GetRuleContexts<PlGdEventContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PlGdEventContext plGdEvent(int i) {
			return GetRuleContext<PlGdEventContext>(i);
		}
		public GdEventContext gdEvent() {
			return GetRuleContext<GdEventContext>(0);
		}
		public EventModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_eventModel; }
	}

	[RuleVersion(0)]
	public EventModelContext eventModel() {
		EventModelContext _localctx = new EventModelContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_eventModel);
		int _la;
		try {
			State = 280;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271; gdEvent();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; Match(LB);
				State = 274;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 273; plGdEvent();
					}
					}
					State = 276;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 278; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlGdEventContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public GdEventContext gdEvent() {
			return GetRuleContext<GdEventContext>(0);
		}
		public PlDegContext plDeg() {
			return GetRuleContext<PlDegContext>(0);
		}
		public PlGdEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_plGdEvent; }
	}

	[RuleVersion(0)]
	public PlGdEventContext plGdEvent() {
		PlGdEventContext _localctx = new PlGdEventContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_plGdEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(LB);
			State = 283; plDeg();
			State = 284; gdEvent();
			State = 285; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlDegContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public PlDegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_plDeg; }
	}

	[RuleVersion(0)]
	public PlDegContext plDeg() {
		PlDegContext _localctx = new PlDegContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_plDeg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrPreGD; }
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_emptyOrPreGD);
		try {
			State = 292;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290; Match(LB);
				State = 291; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrEffect; }
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_emptyOrEffect);
		try {
			State = 297;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; Match(LB);
				State = 296; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_listName);
		int _la;
		try {
			State = 314;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 299; Match(NAME);
					}
					}
					State = 304;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 305; Match(NAME);
					}
					}
					State = 308;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NAME );
				State = 310; Match(MINUS);
				State = 311; type();
				State = 312; listName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_listVariable);
		int _la;
		try {
			State = 331;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 316; Match(VAR);
					}
					}
					State = 321;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 322; Match(VAR);
					}
					}
					State = 325;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 327; Match(MINUS);
				State = 328; type();
				State = 329; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public TermAtomFormContext termAtomForm() {
			return GetRuleContext<TermAtomFormContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_gd);
		int _la;
		try {
			State = 379;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333; termAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; Match(LB);
				State = 335; Match(AND);
				State = 337;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 336; gd();
					}
					}
					State = 339;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 341; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 343; Match(LB);
				State = 344; Match(OR);
				State = 346;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 345; gd();
					}
					}
					State = 348;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 350; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 352; Match(LB);
				State = 353; Match(NOT);
				State = 354; gd();
				State = 355; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 357; Match(LB);
				State = 358; Match(IMPLY);
				State = 359; gd();
				State = 360; gd();
				State = 361; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 363; Match(LB);
				State = 364; Match(EXISTS);
				State = 365; Match(LB);
				State = 366; listVariable();
				State = 367; Match(RB);
				State = 368; gd();
				State = 369; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 371; Match(LB);
				State = 372; Match(FORALL);
				State = 373; Match(LB);
				State = 374; listVariable();
				State = 375; Match(RB);
				State = 376; gd();
				State = 377; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermAtomFormContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode GEQ() { return GetToken(PlanningParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(PlanningParser.NEQ, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredContext pred() {
			return GetRuleContext<PredContext>(0);
		}
		public ITerminalNode LT() { return GetToken(PlanningParser.LT, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LEQ() { return GetToken(PlanningParser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(PlanningParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public TermAtomFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_termAtomForm; }
	}

	[RuleVersion(0)]
	public TermAtomFormContext termAtomForm() {
		TermAtomFormContext _localctx = new TermAtomFormContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_termAtomForm);
		int _la;
		try {
			State = 427;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381; Match(LB);
				State = 382; pred();
				State = 386;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER) | (1L << VAR))) != 0)) {
					{
					{
					State = 383; term();
					}
					}
					State = 388;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 389; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391; Match(LB);
				State = 392; Match(EQ);
				State = 393; term();
				State = 394; term();
				State = 395; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 397; Match(LB);
				State = 398; Match(NEQ);
				State = 399; term();
				State = 400; term();
				State = 401; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403; Match(LB);
				State = 404; Match(LT);
				State = 405; term();
				State = 406; term();
				State = 407; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 409; Match(LB);
				State = 410; Match(LEQ);
				State = 411; term();
				State = 412; term();
				State = 413; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 415; Match(LB);
				State = 416; Match(GT);
				State = 417; term();
				State = 418; term();
				State = 419; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 421; Match(LB);
				State = 422; Match(GEQ);
				State = 423; term();
				State = 424; term();
				State = 425; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermLiteralContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public TermAtomFormContext termAtomForm() {
			return GetRuleContext<TermAtomFormContext>(0);
		}
		public TermLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_termLiteral; }
	}

	[RuleVersion(0)]
	public TermLiteralContext termLiteral() {
		TermLiteralContext _localctx = new TermLiteralContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_termLiteral);
		try {
			State = 435;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429; termAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 430; Match(LB);
				State = 431; Match(NOT);
				State = 432; termAtomForm();
				State = 433; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdEventContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public TermEventFormContext termEventForm() {
			return GetRuleContext<TermEventFormContext>(0);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public GdEventContext gdEvent(int i) {
			return GetRuleContext<GdEventContext>(i);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public IReadOnlyList<GdEventContext> gdEvent() {
			return GetRuleContexts<GdEventContext>();
		}
		public GdEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gdEvent; }
	}

	[RuleVersion(0)]
	public GdEventContext gdEvent() {
		GdEventContext _localctx = new GdEventContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_gdEvent);
		int _la;
		try {
			State = 483;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437; termEventForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438; Match(LB);
				State = 439; Match(NOT);
				State = 440; gdEvent();
				State = 441; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 443; Match(LB);
				State = 444; Match(AND);
				State = 446;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 445; gdEvent();
					}
					}
					State = 448;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 450; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 452; Match(LB);
				State = 453; Match(OR);
				State = 455;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 454; gdEvent();
					}
					}
					State = 457;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 459; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 461; Match(LB);
				State = 462; Match(IMPLY);
				State = 463; gdEvent();
				State = 464; gdEvent();
				State = 465; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 467; Match(LB);
				State = 468; Match(EXISTS);
				State = 469; Match(LB);
				State = 470; listVariable();
				State = 471; Match(RB);
				State = 472; gdEvent();
				State = 473; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 475; Match(LB);
				State = 476; Match(FORALL);
				State = 477; Match(LB);
				State = 478; listVariable();
				State = 479; Match(RB);
				State = 480; gdEvent();
				State = 481; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermEventFormContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode GEQ() { return GetToken(PlanningParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(PlanningParser.NEQ, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode LT() { return GetToken(PlanningParser.LT, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LEQ() { return GetToken(PlanningParser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(PlanningParser.GT, 0); }
		public EventSymbolContext eventSymbol() {
			return GetRuleContext<EventSymbolContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public TermEventFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_termEventForm; }
	}

	[RuleVersion(0)]
	public TermEventFormContext termEventForm() {
		TermEventFormContext _localctx = new TermEventFormContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_termEventForm);
		int _la;
		try {
			State = 531;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485; Match(LB);
				State = 486; eventSymbol();
				State = 490;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER) | (1L << VAR))) != 0)) {
					{
					{
					State = 487; term();
					}
					}
					State = 492;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 493; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495; Match(LB);
				State = 496; Match(EQ);
				State = 497; term();
				State = 498; term();
				State = 499; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 501; Match(LB);
				State = 502; Match(NEQ);
				State = 503; term();
				State = 504; term();
				State = 505; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 507; Match(LB);
				State = 508; Match(LT);
				State = 509; term();
				State = 510; term();
				State = 511; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 513; Match(LB);
				State = 514; Match(LEQ);
				State = 515; term();
				State = 516; term();
				State = 517; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 519; Match(LB);
				State = 520; Match(GT);
				State = 521; term();
				State = 522; term();
				State = 523; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 525; Match(LB);
				State = 526; Match(GEQ);
				State = 527; term();
				State = 528; term();
				State = 529; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermContext : ParserRuleContext {
		public IReadOnlyList<ConstTermContext> constTerm() {
			return GetRuleContexts<ConstTermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public ConstTermContext constTerm(int i) {
			return GetRuleContext<ConstTermContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ITerminalNode PLUS() { return GetToken(PlanningParser.PLUS, 0); }
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public ConstTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constTerm; }
	}

	[RuleVersion(0)]
	public ConstTermContext constTerm() {
		ConstTermContext _localctx = new ConstTermContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_constTerm);
		try {
			State = 552;
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533; Match(NAME);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 534; Match(INTEGER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 535; Match(LB);
				State = 536; Match(MINUS);
				State = 537; constTerm();
				State = 538; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 540; Match(LB);
				State = 541; Match(MINUS);
				State = 542; constTerm();
				State = 543; constTerm();
				State = 544; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 546; Match(LB);
				State = 547; Match(PLUS);
				State = 548; constTerm();
				State = 549; constTerm();
				State = 550; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ITerminalNode PLUS() { return GetToken(PlanningParser.PLUS, 0); }
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_term);
		try {
			State = 574;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554; Match(NAME);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 555; Match(VAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 556; Match(INTEGER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 557; Match(LB);
				State = 558; Match(MINUS);
				State = 559; term();
				State = 560; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 562; Match(LB);
				State = 563; Match(MINUS);
				State = 564; term();
				State = 565; term();
				State = 566; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 568; Match(LB);
				State = 569; Match(PLUS);
				State = 570; term();
				State = 571; term();
				State = 572; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_effect);
		int _la;
		try {
			State = 586;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576; Match(LB);
				State = 577; Match(AND);
				State = 579;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 578; cEffect();
					}
					}
					State = 581;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 583; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 585; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public TermLiteralContext termLiteral() {
			return GetRuleContext<TermLiteralContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_cEffect);
		try {
			State = 603;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 588; Match(LB);
				State = 589; Match(FORALL);
				State = 590; Match(LB);
				State = 591; listVariable();
				State = 592; Match(RB);
				State = 593; effect();
				State = 594; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 596; Match(LB);
				State = 597; Match(WHEN);
				State = 598; gd();
				State = 599; condEffect();
				State = 600; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 602; termLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public IReadOnlyList<TermLiteralContext> termLiteral() {
			return GetRuleContexts<TermLiteralContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public TermLiteralContext termLiteral(int i) {
			return GetRuleContext<TermLiteralContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_condEffect);
		int _la;
		try {
			State = 615;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 605; Match(LB);
				State = 606; Match(AND);
				State = 608;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 607; termLiteral();
					}
					}
					State = 610;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 612; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 614; termLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerProblemContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public NumericSettingContext numericSetting() {
			return GetRuleContext<NumericSettingContext>(0);
		}
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ServerProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_serverProblem; }
	}

	[RuleVersion(0)]
	public ServerProblemContext serverProblem() {
		ServerProblemContext _localctx = new ServerProblemContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_serverProblem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617; Match(LB);
			State = 618; Match(DEF);
			State = 619; Match(LB);
			State = 620; Match(PROM);
			State = 621; problemName();
			State = 622; Match(RB);
			State = 623; Match(LB);
			State = 624; Match(COLON);
			State = 625; Match(DOM);
			State = 626; domainName();
			State = 627; Match(RB);
			State = 629;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 628; numericSetting();
				}
				break;
			}
			State = 632;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 631; objectDeclaration();
				}
				break;
			}
			State = 634; init();
			State = 635; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problemName; }
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domainName; }
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode AGENTS() { return GetToken(PlanningParser.AGENTS, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public AgentDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentDefine; }
	}

	[RuleVersion(0)]
	public AgentDefineContext agentDefine() {
		AgentDefineContext _localctx = new AgentDefineContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_agentDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; Match(LB);
			State = 642; Match(COLON);
			State = 643; Match(AGENTS);
			State = 645;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 644; Match(NAME);
				}
				}
				State = 647;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 649; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; Match(LB);
			State = 652; Match(COLON);
			State = 653; Match(OBJS);
			State = 654; listName();
			State = 655; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericSettingContext : ParserRuleContext {
		public ITerminalNode INTEGER(int i) {
			return GetToken(PlanningParser.INTEGER, i);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode NUMS() { return GetToken(PlanningParser.NUMS, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public IReadOnlyList<NumericSymbolContext> numericSymbol() {
			return GetRuleContexts<NumericSymbolContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public IReadOnlyList<ITerminalNode> INTEGER() { return GetTokens(PlanningParser.INTEGER); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public NumericSymbolContext numericSymbol(int i) {
			return GetRuleContext<NumericSymbolContext>(i);
		}
		public NumericSettingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericSetting; }
	}

	[RuleVersion(0)]
	public NumericSettingContext numericSetting() {
		NumericSettingContext _localctx = new NumericSettingContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_numericSetting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; Match(LB);
			State = 658; Match(COLON);
			State = 659; Match(NUMS);
			State = 665;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 660; Match(LB);
				State = 661; numericSymbol();
				State = 662; Match(INTEGER);
				State = 663; Match(RB);
				}
				}
				State = 667;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 669; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public IReadOnlyList<ConstTermAtomFormContext> constTermAtomForm() {
			return GetRuleContexts<ConstTermAtomFormContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ConstTermAtomFormContext constTermAtomForm(int i) {
			return GetRuleContext<ConstTermAtomFormContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671; Match(LB);
			State = 672; Match(COLON);
			State = 673; Match(INIT);
			State = 677;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 674; constTermAtomForm();
				}
				}
				State = 679;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 680; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermGdContext : ParserRuleContext {
		public IReadOnlyList<ConstTermGdContext> constTermGd() {
			return GetRuleContexts<ConstTermGdContext>();
		}
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ConstTermGdContext constTermGd(int i) {
			return GetRuleContext<ConstTermGdContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ConstTermAtomFormContext constTermAtomForm() {
			return GetRuleContext<ConstTermAtomFormContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public ConstTermLiteralContext constTermLiteral() {
			return GetRuleContext<ConstTermLiteralContext>(0);
		}
		public ConstTermGdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constTermGd; }
	}

	[RuleVersion(0)]
	public ConstTermGdContext constTermGd() {
		ConstTermGdContext _localctx = new ConstTermGdContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_constTermGd);
		int _la;
		try {
			State = 729;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 682; constTermAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 683; constTermLiteral();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 684; Match(LB);
				State = 685; Match(AND);
				State = 687;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 686; constTermGd();
					}
					}
					State = 689;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 691; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 693; Match(LB);
				State = 694; Match(OR);
				State = 696;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 695; constTermGd();
					}
					}
					State = 698;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 700; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 702; Match(LB);
				State = 703; Match(NOT);
				State = 704; constTermGd();
				State = 705; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 707; Match(LB);
				State = 708; Match(IMPLY);
				State = 709; constTermGd();
				State = 710; constTermGd();
				State = 711; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 713; Match(LB);
				State = 714; Match(EXISTS);
				State = 715; Match(LB);
				State = 716; listVariable();
				State = 717; Match(RB);
				State = 718; gd();
				State = 719; Match(RB);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 721; Match(LB);
				State = 722; Match(FORALL);
				State = 723; Match(LB);
				State = 724; listVariable();
				State = 725; Match(RB);
				State = 726; gd();
				State = 727; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermAtomFormContext : ParserRuleContext {
		public IReadOnlyList<ConstTermContext> constTerm() {
			return GetRuleContexts<ConstTermContext>();
		}
		public ITerminalNode GEQ() { return GetToken(PlanningParser.GEQ, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredContext pred() {
			return GetRuleContext<PredContext>(0);
		}
		public ITerminalNode LT() { return GetToken(PlanningParser.LT, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ConstTermContext constTerm(int i) {
			return GetRuleContext<ConstTermContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(PlanningParser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(PlanningParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public ConstTermAtomFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constTermAtomForm; }
	}

	[RuleVersion(0)]
	public ConstTermAtomFormContext constTermAtomForm() {
		ConstTermAtomFormContext _localctx = new ConstTermAtomFormContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_constTermAtomForm);
		int _la;
		try {
			State = 771;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 731; Match(LB);
				State = 732; pred();
				State = 736;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER))) != 0)) {
					{
					{
					State = 733; constTerm();
					}
					}
					State = 738;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 739; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 741; Match(LB);
				State = 742; Match(EQ);
				State = 743; constTerm();
				State = 744; constTerm();
				State = 745; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 747; Match(LB);
				State = 748; Match(LT);
				State = 749; constTerm();
				State = 750; constTerm();
				State = 751; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 753; Match(LB);
				State = 754; Match(LEQ);
				State = 755; constTerm();
				State = 756; constTerm();
				State = 757; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 759; Match(LB);
				State = 760; Match(GT);
				State = 761; constTerm();
				State = 762; constTerm();
				State = 763; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 765; Match(LB);
				State = 766; Match(GEQ);
				State = 767; constTerm();
				State = 768; constTerm();
				State = 769; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermLiteralContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ConstTermAtomFormContext constTermAtomForm() {
			return GetRuleContext<ConstTermAtomFormContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ConstTermLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constTermLiteral; }
	}

	[RuleVersion(0)]
	public ConstTermLiteralContext constTermLiteral() {
		ConstTermLiteralContext _localctx = new ConstTermLiteralContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_constTermLiteral);
		try {
			State = 779;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 773; constTermAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 774; Match(LB);
				State = 775; Match(NOT);
				State = 776; constTermAtomForm();
				State = 777; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClientProblemContext : ParserRuleContext {
		public NumericSettingContext numericSetting() {
			return GetRuleContext<NumericSettingContext>(0);
		}
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitKnowledgeContext initKnowledge() {
			return GetRuleContext<InitKnowledgeContext>(0);
		}
		public ITerminalNode AGENTID() { return GetToken(PlanningParser.AGENTID, 0); }
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public AgentDefineContext agentDefine() {
			return GetRuleContext<AgentDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public InitBeliefContext initBelief() {
			return GetRuleContext<InitBeliefContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public AgentIdContext agentId() {
			return GetRuleContext<AgentIdContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ClientProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_clientProblem; }
	}

	[RuleVersion(0)]
	public ClientProblemContext clientProblem() {
		ClientProblemContext _localctx = new ClientProblemContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_clientProblem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781; Match(LB);
			State = 782; Match(DEF);
			State = 783; Match(LB);
			State = 784; Match(PROM);
			State = 785; problemName();
			State = 786; Match(RB);
			State = 787; Match(LB);
			State = 788; Match(COLON);
			State = 789; Match(DOM);
			State = 790; domainName();
			State = 791; Match(RB);
			State = 792; agentDefine();
			State = 793; Match(LB);
			State = 794; Match(COLON);
			State = 795; Match(AGENTID);
			State = 796; agentId();
			State = 797; Match(RB);
			State = 799;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 798; objectDeclaration();
				}
				break;
			}
			State = 802;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 801; numericSetting();
				}
				break;
			}
			State = 805;
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 804; initKnowledge();
				}
				break;
			}
			State = 808;
			_la = _input.La(1);
			if (_la==LB) {
				{
				State = 807; initBelief();
				}
			}

			State = 810; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitKnowledgeContext : ParserRuleContext {
		public ConstTermGdContext constTermGd() {
			return GetRuleContext<ConstTermGdContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode INITKNOWLEDGE() { return GetToken(PlanningParser.INITKNOWLEDGE, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitKnowledgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initKnowledge; }
	}

	[RuleVersion(0)]
	public InitKnowledgeContext initKnowledge() {
		InitKnowledgeContext _localctx = new InitKnowledgeContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_initKnowledge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812; Match(LB);
			State = 813; Match(COLON);
			State = 814; Match(INITKNOWLEDGE);
			State = 815; constTermGd();
			State = 816; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitBeliefContext : ParserRuleContext {
		public ConstTermGdContext constTermGd() {
			return GetRuleContext<ConstTermGdContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode INITBELIEF() { return GetToken(PlanningParser.INITBELIEF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitBeliefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initBelief; }
	}

	[RuleVersion(0)]
	public InitBeliefContext initBelief() {
		InitBeliefContext _localctx = new InitBeliefContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_initBelief);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818; Match(LB);
			State = 819; Match(COLON);
			State = 820; Match(INITBELIEF);
			State = 821; constTermGd();
			State = 822; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentIdContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public AgentIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentId; }
	}

	[RuleVersion(0)]
	public AgentIdContext agentId() {
		AgentIdContext _localctx = new AgentIdContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_agentId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3:\x33D\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2j\n\x2\x3\x2\x5\x2m\n\x2\x3\x2"+
		"\x5\x2p\n\x2\x3\x2\a\x2s\n\x2\f\x2\xE\x2v\v\x2\x3\x2\a\x2y\n\x2\f\x2\xE"+
		"\x2|\v\x2\x3\x2\a\x2\x7F\n\x2\f\x2\xE\x2\x82\v\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x6\x3\x8A\n\x3\r\x3\xE\x3\x8B\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\x96\n\x5\r\x5\xE\x5\x97\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x6\x6\xA0\n\x6\r\x6\xE\x6\xA1\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xB4"+
		"\n\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v"+
		"\xC2\n\v\x3\v\x3\v\x3\v\x5\v\xC7\n\v\x3\v\x3\v\x3\v\x5\v\xCC\n\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r"+
		"\xDC\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xEF\n\xF\x3\xF\x6\xF\xF2\n"+
		"\xF\r\xF\xE\xF\xF3\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x104\n\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\x109\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x13\x6\x13\x115\n\x13\r\x13\xE\x13\x116\x3\x13"+
		"\x3\x13\x5\x13\x11B\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x16\x3\x16\x3\x16\x5\x16\x127\n\x16\x3\x17\x3\x17\x3\x17\x5\x17"+
		"\x12C\n\x17\x3\x18\a\x18\x12F\n\x18\f\x18\xE\x18\x132\v\x18\x3\x18\x6"+
		"\x18\x135\n\x18\r\x18\xE\x18\x136\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x13D"+
		"\n\x18\x3\x19\a\x19\x140\n\x19\f\x19\xE\x19\x143\v\x19\x3\x19\x6\x19\x146"+
		"\n\x19\r\x19\xE\x19\x147\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x14E\n\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x6\x1A\x154\n\x1A\r\x1A\xE\x1A\x155\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x6\x1A\x15D\n\x1A\r\x1A\xE\x1A\x15E\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x17E\n"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\a\x1B\x183\n\x1B\f\x1B\xE\x1B\x186\v\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x1AE\n\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x1B6\n\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x6\x1D\x1C1\n\x1D"+
		"\r\x1D\xE\x1D\x1C2\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x6\x1D\x1CA\n\x1D"+
		"\r\x1D\xE\x1D\x1CB\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x1E6\n\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\a\x1E\x1EB\n\x1E\f\x1E\xE\x1E\x1EE\v\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x216\n\x1E\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x22B\n\x1F"+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3"+
		" \x3 \x3 \x5 \x241\n \x3!\x3!\x3!\x6!\x246\n!\r!\xE!\x247\x3!\x3!\x3!"+
		"\x5!\x24D\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x3\"\x5\"\x25E\n\"\x3#\x3#\x3#\x6#\x263\n#\r#\xE#\x264\x3"+
		"#\x3#\x3#\x5#\x26A\n#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$"+
		"\x5$\x278\n$\x3$\x5$\x27B\n$\x3$\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3"+
		"\'\x3\'\x6\'\x288\n\'\r\'\xE\'\x289\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3("+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x6)\x29C\n)\r)\xE)\x29D\x3)\x3)\x3*\x3"+
		"*\x3*\x3*\a*\x2A6\n*\f*\xE*\x2A9\v*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x6+\x2B2"+
		"\n+\r+\xE+\x2B3\x3+\x3+\x3+\x3+\x3+\x6+\x2BB\n+\r+\xE+\x2BC\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+"+
		"\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x2DC\n+\x3,\x3,\x3,\a,\x2E1\n"+
		",\f,\xE,\x2E4\v,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,"+
		"\x3,\x5,\x306\n,\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x30E\n-\x3.\x3.\x3.\x3.\x3"+
		".\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x322\n.\x3."+
		"\x5.\x325\n.\x3.\x5.\x328\n.\x3.\x5.\x32B\n.\x3.\x3.\x3/\x3/\x3/\x3/\x3"+
		"/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x2"+
		"\x2\x2\x32\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H"+
		"\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x2\x3\x4\x2\x15\x16"+
		"\x36\x36\x36F\x2\x62\x3\x2\x2\x2\x4\x85\x3\x2\x2\x2\x6\x8F\x3\x2\x2\x2"+
		"\b\x91\x3\x2\x2\x2\n\x9B\x3\x2\x2\x2\f\xA5\x3\x2\x2\x2\xE\xAA\x3\x2\x2"+
		"\x2\x10\xB3\x3\x2\x2\x2\x12\xB5\x3\x2\x2\x2\x14\xB7\x3\x2\x2\x2\x16\xCF"+
		"\x3\x2\x2\x2\x18\xD1\x3\x2\x2\x2\x1A\xE2\x3\x2\x2\x2\x1C\xE4\x3\x2\x2"+
		"\x2\x1E\xF7\x3\x2\x2\x2 \xF9\x3\x2\x2\x2\"\x10F\x3\x2\x2\x2$\x11A\x3\x2"+
		"\x2\x2&\x11C\x3\x2\x2\x2(\x121\x3\x2\x2\x2*\x126\x3\x2\x2\x2,\x12B\x3"+
		"\x2\x2\x2.\x13C\x3\x2\x2\x2\x30\x14D\x3\x2\x2\x2\x32\x17D\x3\x2\x2\x2"+
		"\x34\x1AD\x3\x2\x2\x2\x36\x1B5\x3\x2\x2\x2\x38\x1E5\x3\x2\x2\x2:\x215"+
		"\x3\x2\x2\x2<\x22A\x3\x2\x2\x2>\x240\x3\x2\x2\x2@\x24C\x3\x2\x2\x2\x42"+
		"\x25D\x3\x2\x2\x2\x44\x269\x3\x2\x2\x2\x46\x26B\x3\x2\x2\x2H\x27F\x3\x2"+
		"\x2\x2J\x281\x3\x2\x2\x2L\x283\x3\x2\x2\x2N\x28D\x3\x2\x2\x2P\x293\x3"+
		"\x2\x2\x2R\x2A1\x3\x2\x2\x2T\x2DB\x3\x2\x2\x2V\x305\x3\x2\x2\x2X\x30D"+
		"\x3\x2\x2\x2Z\x30F\x3\x2\x2\x2\\\x32E\x3\x2\x2\x2^\x334\x3\x2\x2\x2`\x33A"+
		"\x3\x2\x2\x2\x62\x63\a\x1D\x2\x2\x63\x64\a\x5\x2\x2\x64\x65\a\x1D\x2\x2"+
		"\x65\x66\a\x3\x2\x2\x66g\a\x36\x2\x2gi\a\x1E\x2\x2hj\x5\x4\x3\x2ih\x3"+
		"\x2\x2\x2ij\x3\x2\x2\x2jl\x3\x2\x2\x2km\x5\b\x5\x2lk\x3\x2\x2\x2lm\x3"+
		"\x2\x2\x2mo\x3\x2\x2\x2np\x5\n\x6\x2on\x3\x2\x2\x2op\x3\x2\x2\x2pt\x3"+
		"\x2\x2\x2qs\x5\x14\v\x2rq\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3"+
		"\x2\x2\x2uz\x3\x2\x2\x2vt\x3\x2\x2\x2wy\x5\x1C\xF\x2xw\x3\x2\x2\x2y|\x3"+
		"\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{\x80\x3\x2\x2\x2|z\x3\x2\x2\x2}"+
		"\x7F\x5 \x11\x2~}\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80"+
		"\x81\x3\x2\x2\x2\x81\x83\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x83\x84\a\x1E"+
		"\x2\x2\x84\x3\x3\x2\x2\x2\x85\x86\a\x1D\x2\x2\x86\x87\a!\x2\x2\x87\x89"+
		"\a\x13\x2\x2\x88\x8A\x5\x6\x4\x2\x89\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2"+
		"\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8E"+
		"\a\x1E\x2\x2\x8E\x5\x3\x2\x2\x2\x8F\x90\a\x36\x2\x2\x90\a\x3\x2\x2\x2"+
		"\x91\x92\a\x1D\x2\x2\x92\x93\a!\x2\x2\x93\x95\a\b\x2\x2\x94\x96\x5\x10"+
		"\t\x2\x95\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97"+
		"\x98\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9A\a\x1E\x2\x2\x9A\t\x3\x2\x2"+
		"\x2\x9B\x9C\a\x1D\x2\x2\x9C\x9D\a!\x2\x2\x9D\x9F\a\t\x2\x2\x9E\xA0\x5"+
		"\f\a\x2\x9F\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1"+
		"\xA2\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA4\a\x1E\x2\x2\xA4\v\x3\x2\x2"+
		"\x2\xA5\xA6\a\x1D\x2\x2\xA6\xA7\x5\xE\b\x2\xA7\xA8\x5\x30\x19\x2\xA8\xA9"+
		"\a\x1E\x2\x2\xA9\r\x3\x2\x2\x2\xAA\xAB\a\x36\x2\x2\xAB\xF\x3\x2\x2\x2"+
		"\xAC\xB4\a\x36\x2\x2\xAD\xAE\a\x1D\x2\x2\xAE\xAF\a\x36\x2\x2\xAF\xB0\x5"+
		"<\x1F\x2\xB0\xB1\x5<\x1F\x2\xB1\xB2\a\x1E\x2\x2\xB2\xB4\x3\x2\x2\x2\xB3"+
		"\xAC\x3\x2\x2\x2\xB3\xAD\x3\x2\x2\x2\xB4\x11\x3\x2\x2\x2\xB5\xB6\t\x2"+
		"\x2\x2\xB6\x13\x3\x2\x2\x2\xB7\xB8\a\x1D\x2\x2\xB8\xB9\a!\x2\x2\xB9\xBA"+
		"\a\v\x2\x2\xBA\xC1\x5\x16\f\x2\xBB\xBC\a!\x2\x2\xBC\xBD\a\r\x2\x2\xBD"+
		"\xBE\a\x1D\x2\x2\xBE\xBF\x5\x30\x19\x2\xBF\xC0\a\x1E\x2\x2\xC0\xC2\x3"+
		"\x2\x2\x2\xC1\xBB\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC6\x3\x2\x2\x2"+
		"\xC3\xC4\a!\x2\x2\xC4\xC5\a\xE\x2\x2\xC5\xC7\x5*\x16\x2\xC6\xC3\x3\x2"+
		"\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xCB\x3\x2\x2\x2\xC8\xC9\a!\x2\x2\xC9\xCA"+
		"\a\x14\x2\x2\xCA\xCC\x5,\x17\x2\xCB\xC8\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2"+
		"\xCC\xCD\x3\x2\x2\x2\xCD\xCE\a\x1E\x2\x2\xCE\x15\x3\x2\x2\x2\xCF\xD0\a"+
		"\x36\x2\x2\xD0\x17\x3\x2\x2\x2\xD1\xD2\a\x1D\x2\x2\xD2\xD3\a!\x2\x2\xD3"+
		"\xD4\a\xF\x2\x2\xD4\xDB\x5\x1A\xE\x2\xD5\xD6\a!\x2\x2\xD6\xD7\a\r\x2\x2"+
		"\xD7\xD8\a\x1D\x2\x2\xD8\xD9\x5\x30\x19\x2\xD9\xDA\a\x1E\x2\x2\xDA\xDC"+
		"\x3\x2\x2\x2\xDB\xD5\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDD\x3\x2\x2"+
		"\x2\xDD\xDE\a!\x2\x2\xDE\xDF\a\f\x2\x2\xDF\xE0\x5$\x13\x2\xE0\xE1\a\x1E"+
		"\x2\x2\xE1\x19\x3\x2\x2\x2\xE2\xE3\a\x36\x2\x2\xE3\x1B\x3\x2\x2\x2\xE4"+
		"\xE5\a\x1D\x2\x2\xE5\xE6\a!\x2\x2\xE6\xE7\a\n\x2\x2\xE7\xEE\x5\x1E\x10"+
		"\x2\xE8\xE9\a!\x2\x2\xE9\xEA\a\r\x2\x2\xEA\xEB\a\x1D\x2\x2\xEB\xEC\x5"+
		"\x30\x19\x2\xEC\xED\a\x1E\x2\x2\xED\xEF\x3\x2\x2\x2\xEE\xE8\x3\x2\x2\x2"+
		"\xEE\xEF\x3\x2\x2\x2\xEF\xF1\x3\x2\x2\x2\xF0\xF2\x5\x18\r\x2\xF1\xF0\x3"+
		"\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2"+
		"\xF4\xF5\x3\x2\x2\x2\xF5\xF6\a\x1E\x2\x2\xF6\x1D\x3\x2\x2\x2\xF7\xF8\a"+
		"\x36\x2\x2\xF8\x1F\x3\x2\x2\x2\xF9\xFA\a\x1D\x2\x2\xFA\xFB\a!\x2\x2\xFB"+
		"\xFC\a\x10\x2\x2\xFC\x103\x5\"\x12\x2\xFD\xFE\a!\x2\x2\xFE\xFF\a\r\x2"+
		"\x2\xFF\x100\a\x1D\x2\x2\x100\x101\x5\x30\x19\x2\x101\x102\a\x1E\x2\x2"+
		"\x102\x104\x3\x2\x2\x2\x103\xFD\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104"+
		"\x108\x3\x2\x2\x2\x105\x106\a!\x2\x2\x106\x107\a\xE\x2\x2\x107\x109\x5"+
		"*\x16\x2\x108\x105\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10A\x3\x2\x2"+
		"\x2\x10A\x10B\a!\x2\x2\x10B\x10C\a\f\x2\x2\x10C\x10D\x5$\x13\x2\x10D\x10E"+
		"\a\x1E\x2\x2\x10E!\x3\x2\x2\x2\x10F\x110\a\x36\x2\x2\x110#\x3\x2\x2\x2"+
		"\x111\x11B\x5\x38\x1D\x2\x112\x114\a\x1D\x2\x2\x113\x115\x5&\x14\x2\x114"+
		"\x113\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x116\x117"+
		"\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x119\a\x1E\x2\x2\x119\x11B\x3"+
		"\x2\x2\x2\x11A\x111\x3\x2\x2\x2\x11A\x112\x3\x2\x2\x2\x11B%\x3\x2\x2\x2"+
		"\x11C\x11D\a\x1D\x2\x2\x11D\x11E\x5(\x15\x2\x11E\x11F\x5\x38\x1D\x2\x11F"+
		"\x120\a\x1E\x2\x2\x120\'\x3\x2\x2\x2\x121\x122\a\x37\x2\x2\x122)\x3\x2"+
		"\x2\x2\x123\x127\x5\x32\x1A\x2\x124\x125\a\x1D\x2\x2\x125\x127\a\x1E\x2"+
		"\x2\x126\x123\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x127+\x3\x2\x2\x2\x128"+
		"\x12C\x5@!\x2\x129\x12A\a\x1D\x2\x2\x12A\x12C\a\x1E\x2\x2\x12B\x128\x3"+
		"\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12C-\x3\x2\x2\x2\x12D\x12F\a\x36\x2\x2"+
		"\x12E\x12D\x3\x2\x2\x2\x12F\x132\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x130"+
		"\x131\x3\x2\x2\x2\x131\x13D\x3\x2\x2\x2\x132\x130\x3\x2\x2\x2\x133\x135"+
		"\a\x36\x2\x2\x134\x133\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x134\x3"+
		"\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x139\a%\x2"+
		"\x2\x139\x13A\x5\x12\n\x2\x13A\x13B\x5.\x18\x2\x13B\x13D\x3\x2\x2\x2\x13C"+
		"\x130\x3\x2\x2\x2\x13C\x134\x3\x2\x2\x2\x13D/\x3\x2\x2\x2\x13E\x140\a"+
		"\x38\x2\x2\x13F\x13E\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F\x3\x2"+
		"\x2\x2\x141\x142\x3\x2\x2\x2\x142\x14E\x3\x2\x2\x2\x143\x141\x3\x2\x2"+
		"\x2\x144\x146\a\x38\x2\x2\x145\x144\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2"+
		"\x147\x145\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149"+
		"\x14A\a%\x2\x2\x14A\x14B\x5\x12\n\x2\x14B\x14C\x5\x30\x19\x2\x14C\x14E"+
		"\x3\x2\x2\x2\x14D\x141\x3\x2\x2\x2\x14D\x145\x3\x2\x2\x2\x14E\x31\x3\x2"+
		"\x2\x2\x14F\x17E\x5\x34\x1B\x2\x150\x151\a\x1D\x2\x2\x151\x153\a/\x2\x2"+
		"\x152\x154\x5\x32\x1A\x2\x153\x152\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155"+
		"\x153\x3\x2\x2\x2\x155\x156\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x158"+
		"\a\x1E\x2\x2\x158\x17E\x3\x2\x2\x2\x159\x15A\a\x1D\x2\x2\x15A\x15C\a\x30"+
		"\x2\x2\x15B\x15D\x5\x32\x1A\x2\x15C\x15B\x3\x2\x2\x2\x15D\x15E\x3\x2\x2"+
		"\x2\x15E\x15C\x3\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2"+
		"\x160\x161\a\x1E\x2\x2\x161\x17E\x3\x2\x2\x2\x162\x163\a\x1D\x2\x2\x163"+
		"\x164\a\x31\x2\x2\x164\x165\x5\x32\x1A\x2\x165\x166\a\x1E\x2\x2\x166\x17E"+
		"\x3\x2\x2\x2\x167\x168\a\x1D\x2\x2\x168\x169\a\x32\x2\x2\x169\x16A\x5"+
		"\x32\x1A\x2\x16A\x16B\x5\x32\x1A\x2\x16B\x16C\a\x1E\x2\x2\x16C\x17E\x3"+
		"\x2\x2\x2\x16D\x16E\a\x1D\x2\x2\x16E\x16F\a\x34\x2\x2\x16F\x170\a\x1D"+
		"\x2\x2\x170\x171\x5\x30\x19\x2\x171\x172\a\x1E\x2\x2\x172\x173\x5\x32"+
		"\x1A\x2\x173\x174\a\x1E\x2\x2\x174\x17E\x3\x2\x2\x2\x175\x176\a\x1D\x2"+
		"\x2\x176\x177\a\x33\x2\x2\x177\x178\a\x1D\x2\x2\x178\x179\x5\x30\x19\x2"+
		"\x179\x17A\a\x1E\x2\x2\x17A\x17B\x5\x32\x1A\x2\x17B\x17C\a\x1E\x2\x2\x17C"+
		"\x17E\x3\x2\x2\x2\x17D\x14F\x3\x2\x2\x2\x17D\x150\x3\x2\x2\x2\x17D\x159"+
		"\x3\x2\x2\x2\x17D\x162\x3\x2\x2\x2\x17D\x167\x3\x2\x2\x2\x17D\x16D\x3"+
		"\x2\x2\x2\x17D\x175\x3\x2\x2\x2\x17E\x33\x3\x2\x2\x2\x17F\x180\a\x1D\x2"+
		"\x2\x180\x184\x5\xE\b\x2\x181\x183\x5> \x2\x182\x181\x3\x2\x2\x2\x183"+
		"\x186\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185\x187"+
		"\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x187\x188\a\x1E\x2\x2\x188\x1AE\x3"+
		"\x2\x2\x2\x189\x18A\a\x1D\x2\x2\x18A\x18B\a)\x2\x2\x18B\x18C\x5> \x2\x18C"+
		"\x18D\x5> \x2\x18D\x18E\a\x1E\x2\x2\x18E\x1AE\x3\x2\x2\x2\x18F\x190\a"+
		"\x1D\x2\x2\x190\x191\a*\x2\x2\x191\x192\x5> \x2\x192\x193\x5> \x2\x193"+
		"\x194\a\x1E\x2\x2\x194\x1AE\x3\x2\x2\x2\x195\x196\a\x1D\x2\x2\x196\x197"+
		"\a+\x2\x2\x197\x198\x5> \x2\x198\x199\x5> \x2\x199\x19A\a\x1E\x2\x2\x19A"+
		"\x1AE\x3\x2\x2\x2\x19B\x19C\a\x1D\x2\x2\x19C\x19D\a,\x2\x2\x19D\x19E\x5"+
		"> \x2\x19E\x19F\x5> \x2\x19F\x1A0\a\x1E\x2\x2\x1A0\x1AE\x3\x2\x2\x2\x1A1"+
		"\x1A2\a\x1D\x2\x2\x1A2\x1A3\a-\x2\x2\x1A3\x1A4\x5> \x2\x1A4\x1A5\x5> "+
		"\x2\x1A5\x1A6\a\x1E\x2\x2\x1A6\x1AE\x3\x2\x2\x2\x1A7\x1A8\a\x1D\x2\x2"+
		"\x1A8\x1A9\a.\x2\x2\x1A9\x1AA\x5> \x2\x1AA\x1AB\x5> \x2\x1AB\x1AC\a\x1E"+
		"\x2\x2\x1AC\x1AE\x3\x2\x2\x2\x1AD\x17F\x3\x2\x2\x2\x1AD\x189\x3\x2\x2"+
		"\x2\x1AD\x18F\x3\x2\x2\x2\x1AD\x195\x3\x2\x2\x2\x1AD\x19B\x3\x2\x2\x2"+
		"\x1AD\x1A1\x3\x2\x2\x2\x1AD\x1A7\x3\x2\x2\x2\x1AE\x35\x3\x2\x2\x2\x1AF"+
		"\x1B6\x5\x34\x1B\x2\x1B0\x1B1\a\x1D\x2\x2\x1B1\x1B2\a\x31\x2\x2\x1B2\x1B3"+
		"\x5\x34\x1B\x2\x1B3\x1B4\a\x1E\x2\x2\x1B4\x1B6\x3\x2\x2\x2\x1B5\x1AF\x3"+
		"\x2\x2\x2\x1B5\x1B0\x3\x2\x2\x2\x1B6\x37\x3\x2\x2\x2\x1B7\x1E6\x5:\x1E"+
		"\x2\x1B8\x1B9\a\x1D\x2\x2\x1B9\x1BA\a\x31\x2\x2\x1BA\x1BB\x5\x38\x1D\x2"+
		"\x1BB\x1BC\a\x1E\x2\x2\x1BC\x1E6\x3\x2\x2\x2\x1BD\x1BE\a\x1D\x2\x2\x1BE"+
		"\x1C0\a/\x2\x2\x1BF\x1C1\x5\x38\x1D\x2\x1C0\x1BF\x3\x2\x2\x2\x1C1\x1C2"+
		"\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C4\x3"+
		"\x2\x2\x2\x1C4\x1C5\a\x1E\x2\x2\x1C5\x1E6\x3\x2\x2\x2\x1C6\x1C7\a\x1D"+
		"\x2\x2\x1C7\x1C9\a\x30\x2\x2\x1C8\x1CA\x5\x38\x1D\x2\x1C9\x1C8\x3\x2\x2"+
		"\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1C9\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2"+
		"\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CE\a\x1E\x2\x2\x1CE\x1E6\x3\x2\x2\x2\x1CF"+
		"\x1D0\a\x1D\x2\x2\x1D0\x1D1\a\x32\x2\x2\x1D1\x1D2\x5\x38\x1D\x2\x1D2\x1D3"+
		"\x5\x38\x1D\x2\x1D3\x1D4\a\x1E\x2\x2\x1D4\x1E6\x3\x2\x2\x2\x1D5\x1D6\a"+
		"\x1D\x2\x2\x1D6\x1D7\a\x34\x2\x2\x1D7\x1D8\a\x1D\x2\x2\x1D8\x1D9\x5\x30"+
		"\x19\x2\x1D9\x1DA\a\x1E\x2\x2\x1DA\x1DB\x5\x38\x1D\x2\x1DB\x1DC\a\x1E"+
		"\x2\x2\x1DC\x1E6\x3\x2\x2\x2\x1DD\x1DE\a\x1D\x2\x2\x1DE\x1DF\a\x33\x2"+
		"\x2\x1DF\x1E0\a\x1D\x2\x2\x1E0\x1E1\x5\x30\x19\x2\x1E1\x1E2\a\x1E\x2\x2"+
		"\x1E2\x1E3\x5\x38\x1D\x2\x1E3\x1E4\a\x1E\x2\x2\x1E4\x1E6\x3\x2\x2\x2\x1E5"+
		"\x1B7\x3\x2\x2\x2\x1E5\x1B8\x3\x2\x2\x2\x1E5\x1BD\x3\x2\x2\x2\x1E5\x1C6"+
		"\x3\x2\x2\x2\x1E5\x1CF\x3\x2\x2\x2\x1E5\x1D5\x3\x2\x2\x2\x1E5\x1DD\x3"+
		"\x2\x2\x2\x1E6\x39\x3\x2\x2\x2\x1E7\x1E8\a\x1D\x2\x2\x1E8\x1EC\x5\x16"+
		"\f\x2\x1E9\x1EB\x5> \x2\x1EA\x1E9\x3\x2\x2\x2\x1EB\x1EE\x3\x2\x2\x2\x1EC"+
		"\x1EA\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1EF\x3\x2\x2\x2\x1EE\x1EC"+
		"\x3\x2\x2\x2\x1EF\x1F0\a\x1E\x2\x2\x1F0\x216\x3\x2\x2\x2\x1F1\x1F2\a\x1D"+
		"\x2\x2\x1F2\x1F3\a)\x2\x2\x1F3\x1F4\x5> \x2\x1F4\x1F5\x5> \x2\x1F5\x1F6"+
		"\a\x1E\x2\x2\x1F6\x216\x3\x2\x2\x2\x1F7\x1F8\a\x1D\x2\x2\x1F8\x1F9\a*"+
		"\x2\x2\x1F9\x1FA\x5> \x2\x1FA\x1FB\x5> \x2\x1FB\x1FC\a\x1E\x2\x2\x1FC"+
		"\x216\x3\x2\x2\x2\x1FD\x1FE\a\x1D\x2\x2\x1FE\x1FF\a+\x2\x2\x1FF\x200\x5"+
		"> \x2\x200\x201\x5> \x2\x201\x202\a\x1E\x2\x2\x202\x216\x3\x2\x2\x2\x203"+
		"\x204\a\x1D\x2\x2\x204\x205\a,\x2\x2\x205\x206\x5> \x2\x206\x207\x5> "+
		"\x2\x207\x208\a\x1E\x2\x2\x208\x216\x3\x2\x2\x2\x209\x20A\a\x1D\x2\x2"+
		"\x20A\x20B\a-\x2\x2\x20B\x20C\x5> \x2\x20C\x20D\x5> \x2\x20D\x20E\a\x1E"+
		"\x2\x2\x20E\x216\x3\x2\x2\x2\x20F\x210\a\x1D\x2\x2\x210\x211\a.\x2\x2"+
		"\x211\x212\x5> \x2\x212\x213\x5> \x2\x213\x214\a\x1E\x2\x2\x214\x216\x3"+
		"\x2\x2\x2\x215\x1E7\x3\x2\x2\x2\x215\x1F1\x3\x2\x2\x2\x215\x1F7\x3\x2"+
		"\x2\x2\x215\x1FD\x3\x2\x2\x2\x215\x203\x3\x2\x2\x2\x215\x209\x3\x2\x2"+
		"\x2\x215\x20F\x3\x2\x2\x2\x216;\x3\x2\x2\x2\x217\x22B\a\x36\x2\x2\x218"+
		"\x22B\a\x37\x2\x2\x219\x21A\a\x1D\x2\x2\x21A\x21B\a%\x2\x2\x21B\x21C\x5"+
		"<\x1F\x2\x21C\x21D\a\x1E\x2\x2\x21D\x22B\x3\x2\x2\x2\x21E\x21F\a\x1D\x2"+
		"\x2\x21F\x220\a%\x2\x2\x220\x221\x5<\x1F\x2\x221\x222\x5<\x1F\x2\x222"+
		"\x223\a\x1E\x2\x2\x223\x22B\x3\x2\x2\x2\x224\x225\a\x1D\x2\x2\x225\x226"+
		"\a&\x2\x2\x226\x227\x5<\x1F\x2\x227\x228\x5<\x1F\x2\x228\x229\a\x1E\x2"+
		"\x2\x229\x22B\x3\x2\x2\x2\x22A\x217\x3\x2\x2\x2\x22A\x218\x3\x2\x2\x2"+
		"\x22A\x219\x3\x2\x2\x2\x22A\x21E\x3\x2\x2\x2\x22A\x224\x3\x2\x2\x2\x22B"+
		"=\x3\x2\x2\x2\x22C\x241\a\x36\x2\x2\x22D\x241\a\x38\x2\x2\x22E\x241\a"+
		"\x37\x2\x2\x22F\x230\a\x1D\x2\x2\x230\x231\a%\x2\x2\x231\x232\x5> \x2"+
		"\x232\x233\a\x1E\x2\x2\x233\x241\x3\x2\x2\x2\x234\x235\a\x1D\x2\x2\x235"+
		"\x236\a%\x2\x2\x236\x237\x5> \x2\x237\x238\x5> \x2\x238\x239\a\x1E\x2"+
		"\x2\x239\x241\x3\x2\x2\x2\x23A\x23B\a\x1D\x2\x2\x23B\x23C\a&\x2\x2\x23C"+
		"\x23D\x5> \x2\x23D\x23E\x5> \x2\x23E\x23F\a\x1E\x2\x2\x23F\x241\x3\x2"+
		"\x2\x2\x240\x22C\x3\x2\x2\x2\x240\x22D\x3\x2\x2\x2\x240\x22E\x3\x2\x2"+
		"\x2\x240\x22F\x3\x2\x2\x2\x240\x234\x3\x2\x2\x2\x240\x23A\x3\x2\x2\x2"+
		"\x241?\x3\x2\x2\x2\x242\x243\a\x1D\x2\x2\x243\x245\a/\x2\x2\x244\x246"+
		"\x5\x42\"\x2\x245\x244\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x245\x3"+
		"\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24A\a\x1E"+
		"\x2\x2\x24A\x24D\x3\x2\x2\x2\x24B\x24D\x5\x42\"\x2\x24C\x242\x3\x2\x2"+
		"\x2\x24C\x24B\x3\x2\x2\x2\x24D\x41\x3\x2\x2\x2\x24E\x24F\a\x1D\x2\x2\x24F"+
		"\x250\a\x33\x2\x2\x250\x251\a\x1D\x2\x2\x251\x252\x5\x30\x19\x2\x252\x253"+
		"\a\x1E\x2\x2\x253\x254\x5@!\x2\x254\x255\a\x1E\x2\x2\x255\x25E\x3\x2\x2"+
		"\x2\x256\x257\a\x1D\x2\x2\x257\x258\a\x35\x2\x2\x258\x259\x5\x32\x1A\x2"+
		"\x259\x25A\x5\x44#\x2\x25A\x25B\a\x1E\x2\x2\x25B\x25E\x3\x2\x2\x2\x25C"+
		"\x25E\x5\x36\x1C\x2\x25D\x24E\x3\x2\x2\x2\x25D\x256\x3\x2\x2\x2\x25D\x25C"+
		"\x3\x2\x2\x2\x25E\x43\x3\x2\x2\x2\x25F\x260\a\x1D\x2\x2\x260\x262\a/\x2"+
		"\x2\x261\x263\x5\x36\x1C\x2\x262\x261\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2"+
		"\x264\x262\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266"+
		"\x267\a\x1E\x2\x2\x267\x26A\x3\x2\x2\x2\x268\x26A\x5\x36\x1C\x2\x269\x25F"+
		"\x3\x2\x2\x2\x269\x268\x3\x2\x2\x2\x26A\x45\x3\x2\x2\x2\x26B\x26C\a\x1D"+
		"\x2\x2\x26C\x26D\a\x5\x2\x2\x26D\x26E\a\x1D\x2\x2\x26E\x26F\a\x4\x2\x2"+
		"\x26F\x270\x5H%\x2\x270\x271\a\x1E\x2\x2\x271\x272\a\x1D\x2\x2\x272\x273"+
		"\a!\x2\x2\x273\x274\a\x3\x2\x2\x274\x275\x5J&\x2\x275\x277\a\x1E\x2\x2"+
		"\x276\x278\x5P)\x2\x277\x276\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278\x27A"+
		"\x3\x2\x2\x2\x279\x27B\x5N(\x2\x27A\x279\x3\x2\x2\x2\x27A\x27B\x3\x2\x2"+
		"\x2\x27B\x27C\x3\x2\x2\x2\x27C\x27D\x5R*\x2\x27D\x27E\a\x1E\x2\x2\x27E"+
		"G\x3\x2\x2\x2\x27F\x280\a\x36\x2\x2\x280I\x3\x2\x2\x2\x281\x282\a\x36"+
		"\x2\x2\x282K\x3\x2\x2\x2\x283\x284\a\x1D\x2\x2\x284\x285\a!\x2\x2\x285"+
		"\x287\a:\x2\x2\x286\x288\a\x36\x2\x2\x287\x286\x3\x2\x2\x2\x288\x289\x3"+
		"\x2\x2\x2\x289\x287\x3\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x28B\x3\x2"+
		"\x2\x2\x28B\x28C\a\x1E\x2\x2\x28CM\x3\x2\x2\x2\x28D\x28E\a\x1D\x2\x2\x28E"+
		"\x28F\a!\x2\x2\x28F\x290\a\x1A\x2\x2\x290\x291\x5.\x18\x2\x291\x292\a"+
		"\x1E\x2\x2\x292O\x3\x2\x2\x2\x293\x294\a\x1D\x2\x2\x294\x295\a!\x2\x2"+
		"\x295\x29B\a\x13\x2\x2\x296\x297\a\x1D\x2\x2\x297\x298\x5\x6\x4\x2\x298"+
		"\x299\a\x37\x2\x2\x299\x29A\a\x1E\x2\x2\x29A\x29C\x3\x2\x2\x2\x29B\x296"+
		"\x3\x2\x2\x2\x29C\x29D\x3\x2\x2\x2\x29D\x29B\x3\x2\x2\x2\x29D\x29E\x3"+
		"\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A0\a\x1E\x2\x2\x2A0Q\x3\x2\x2\x2"+
		"\x2A1\x2A2\a\x1D\x2\x2\x2A2\x2A3\a!\x2\x2\x2A3\x2A7\a\x1B\x2\x2\x2A4\x2A6"+
		"\x5V,\x2\x2A5\x2A4\x3\x2\x2\x2\x2A6\x2A9\x3\x2\x2\x2\x2A7\x2A5\x3\x2\x2"+
		"\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2AA\x3\x2\x2\x2\x2A9\x2A7\x3\x2\x2\x2"+
		"\x2AA\x2AB\a\x1E\x2\x2\x2ABS\x3\x2\x2\x2\x2AC\x2DC\x5V,\x2\x2AD\x2DC\x5"+
		"X-\x2\x2AE\x2AF\a\x1D\x2\x2\x2AF\x2B1\a/\x2\x2\x2B0\x2B2\x5T+\x2\x2B1"+
		"\x2B0\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2B1\x3\x2\x2\x2\x2B3\x2B4"+
		"\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B6\a\x1E\x2\x2\x2B6\x2DC\x3"+
		"\x2\x2\x2\x2B7\x2B8\a\x1D\x2\x2\x2B8\x2BA\a\x30\x2\x2\x2B9\x2BB\x5T+\x2"+
		"\x2BA\x2B9\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC\x2BA\x3\x2\x2\x2\x2BC"+
		"\x2BD\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2BF\a\x1E\x2\x2\x2BF\x2DC"+
		"\x3\x2\x2\x2\x2C0\x2C1\a\x1D\x2\x2\x2C1\x2C2\a\x31\x2\x2\x2C2\x2C3\x5"+
		"T+\x2\x2C3\x2C4\a\x1E\x2\x2\x2C4\x2DC\x3\x2\x2\x2\x2C5\x2C6\a\x1D\x2\x2"+
		"\x2C6\x2C7\a\x32\x2\x2\x2C7\x2C8\x5T+\x2\x2C8\x2C9\x5T+\x2\x2C9\x2CA\a"+
		"\x1E\x2\x2\x2CA\x2DC\x3\x2\x2\x2\x2CB\x2CC\a\x1D\x2\x2\x2CC\x2CD\a\x34"+
		"\x2\x2\x2CD\x2CE\a\x1D\x2\x2\x2CE\x2CF\x5\x30\x19\x2\x2CF\x2D0\a\x1E\x2"+
		"\x2\x2D0\x2D1\x5\x32\x1A\x2\x2D1\x2D2\a\x1E\x2\x2\x2D2\x2DC\x3\x2\x2\x2"+
		"\x2D3\x2D4\a\x1D\x2\x2\x2D4\x2D5\a\x33\x2\x2\x2D5\x2D6\a\x1D\x2\x2\x2D6"+
		"\x2D7\x5\x30\x19\x2\x2D7\x2D8\a\x1E\x2\x2\x2D8\x2D9\x5\x32\x1A\x2\x2D9"+
		"\x2DA\a\x1E\x2\x2\x2DA\x2DC\x3\x2\x2\x2\x2DB\x2AC\x3\x2\x2\x2\x2DB\x2AD"+
		"\x3\x2\x2\x2\x2DB\x2AE\x3\x2\x2\x2\x2DB\x2B7\x3\x2\x2\x2\x2DB\x2C0\x3"+
		"\x2\x2\x2\x2DB\x2C5\x3\x2\x2\x2\x2DB\x2CB\x3\x2\x2\x2\x2DB\x2D3\x3\x2"+
		"\x2\x2\x2DCU\x3\x2\x2\x2\x2DD\x2DE\a\x1D\x2\x2\x2DE\x2E2\x5\xE\b\x2\x2DF"+
		"\x2E1\x5<\x1F\x2\x2E0\x2DF\x3\x2\x2\x2\x2E1\x2E4\x3\x2\x2\x2\x2E2\x2E0"+
		"\x3\x2\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3\x2E5\x3\x2\x2\x2\x2E4\x2E2\x3"+
		"\x2\x2\x2\x2E5\x2E6\a\x1E\x2\x2\x2E6\x306\x3\x2\x2\x2\x2E7\x2E8\a\x1D"+
		"\x2\x2\x2E8\x2E9\a)\x2\x2\x2E9\x2EA\x5<\x1F\x2\x2EA\x2EB\x5<\x1F\x2\x2EB"+
		"\x2EC\a\x1E\x2\x2\x2EC\x306\x3\x2\x2\x2\x2ED\x2EE\a\x1D\x2\x2\x2EE\x2EF"+
		"\a+\x2\x2\x2EF\x2F0\x5<\x1F\x2\x2F0\x2F1\x5<\x1F\x2\x2F1\x2F2\a\x1E\x2"+
		"\x2\x2F2\x306\x3\x2\x2\x2\x2F3\x2F4\a\x1D\x2\x2\x2F4\x2F5\a,\x2\x2\x2F5"+
		"\x2F6\x5<\x1F\x2\x2F6\x2F7\x5<\x1F\x2\x2F7\x2F8\a\x1E\x2\x2\x2F8\x306"+
		"\x3\x2\x2\x2\x2F9\x2FA\a\x1D\x2\x2\x2FA\x2FB\a-\x2\x2\x2FB\x2FC\x5<\x1F"+
		"\x2\x2FC\x2FD\x5<\x1F\x2\x2FD\x2FE\a\x1E\x2\x2\x2FE\x306\x3\x2\x2\x2\x2FF"+
		"\x300\a\x1D\x2\x2\x300\x301\a.\x2\x2\x301\x302\x5<\x1F\x2\x302\x303\x5"+
		"<\x1F\x2\x303\x304\a\x1E\x2\x2\x304\x306\x3\x2\x2\x2\x305\x2DD\x3\x2\x2"+
		"\x2\x305\x2E7\x3\x2\x2\x2\x305\x2ED\x3\x2\x2\x2\x305\x2F3\x3\x2\x2\x2"+
		"\x305\x2F9\x3\x2\x2\x2\x305\x2FF\x3\x2\x2\x2\x306W\x3\x2\x2\x2\x307\x30E"+
		"\x5V,\x2\x308\x309\a\x1D\x2\x2\x309\x30A\a\x31\x2\x2\x30A\x30B\x5V,\x2"+
		"\x30B\x30C\a\x1E\x2\x2\x30C\x30E\x3\x2\x2\x2\x30D\x307\x3\x2\x2\x2\x30D"+
		"\x308\x3\x2\x2\x2\x30EY\x3\x2\x2\x2\x30F\x310\a\x1D\x2\x2\x310\x311\a"+
		"\x5\x2\x2\x311\x312\a\x1D\x2\x2\x312\x313\a\x4\x2\x2\x313\x314\x5H%\x2"+
		"\x314\x315\a\x1E\x2\x2\x315\x316\a\x1D\x2\x2\x316\x317\a!\x2\x2\x317\x318"+
		"\a\x3\x2\x2\x318\x319\x5J&\x2\x319\x31A\a\x1E\x2\x2\x31A\x31B\x5L\'\x2"+
		"\x31B\x31C\a\x1D\x2\x2\x31C\x31D\a!\x2\x2\x31D\x31E\a\x6\x2\x2\x31E\x31F"+
		"\x5`\x31\x2\x31F\x321\a\x1E\x2\x2\x320\x322\x5N(\x2\x321\x320\x3\x2\x2"+
		"\x2\x321\x322\x3\x2\x2\x2\x322\x324\x3\x2\x2\x2\x323\x325\x5P)\x2\x324"+
		"\x323\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325\x327\x3\x2\x2\x2\x326\x328"+
		"\x5\\/\x2\x327\x326\x3\x2\x2\x2\x327\x328\x3\x2\x2\x2\x328\x32A\x3\x2"+
		"\x2\x2\x329\x32B\x5^\x30\x2\x32A\x329\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2"+
		"\x32B\x32C\x3\x2\x2\x2\x32C\x32D\a\x1E\x2\x2\x32D[\x3\x2\x2\x2\x32E\x32F"+
		"\a\x1D\x2\x2\x32F\x330\a!\x2\x2\x330\x331\a\x18\x2\x2\x331\x332\x5T+\x2"+
		"\x332\x333\a\x1E\x2\x2\x333]\x3\x2\x2\x2\x334\x335\a\x1D\x2\x2\x335\x336"+
		"\a!\x2\x2\x336\x337\a\x19\x2\x2\x337\x338\x5T+\x2\x338\x339\a\x1E\x2\x2"+
		"\x339_\x3\x2\x2\x2\x33A\x33B\a\x36\x2\x2\x33B\x61\x3\x2\x2\x2?ilotz\x80"+
		"\x8B\x97\xA1\xB3\xC1\xC6\xCB\xDB\xEE\xF3\x103\x108\x116\x11A\x126\x12B"+
		"\x130\x136\x13C\x141\x147\x14D\x155\x15E\x17D\x184\x1AD\x1B5\x1C2\x1CB"+
		"\x1E5\x1EC\x215\x22A\x240\x247\x24C\x25D\x264\x269\x277\x27A\x289\x29D"+
		"\x2A7\x2B3\x2BC\x2DB\x2E2\x305\x30D\x321\x324\x327\x32A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
