//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\Planning.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOM=1, PROM=2, DEF=3, AGENTID=4, TYPE=5, PRED=6, ACT=7, PARM=8, PRE=9, 
		EFF=10, OBJ=11, AGT=12, EITHER=13, INITKNOWLEDGE=14, INITBELIEF=15, OBJS=16, 
		INIT=17, AGENTS=18, GOAL=19, LB=20, RB=21, LSB=22, RSB=23, COLON=24, QM=25, 
		POINT=26, UL=27, DASH=28, AND=29, OR=30, NOT=31, IMPLY=32, FORALL=33, 
		EXISTS=34, WHEN=35, LETTER=36, DIGIT=37, NAME=38, CHAR=39, INTEGER=40, 
		NUMBER=41, DECIMAL=42, VAR=43, FUNSYM=44, WS=45, PLD=46;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'agentid'", "'types'", 
		"'predicates'", "'action'", "'parameters'", "'precondition'", "'effect'", 
		"'object'", "'agent'", "'either'", "'initknowledge'", "'initbelief'", 
		"'objects'", "'init'", "'agents'", "'goal'", "'('", "')'", "'['", "']'", 
		"':'", "'?'", "'.'", "'_'", "'-'", "'and'", "'or'", "'not'", "'imply'", 
		"'forall'", "'exists'", "'when'", "LETTER", "DIGIT", "NAME", "CHAR", "INTEGER", 
		"NUMBER", "DECIMAL", "VAR", "FUNSYM", "WS", "PLD"
	};
	public const int
		RULE_domain = 0, RULE_typeDefine = 1, RULE_predicatesDefine = 2, RULE_atomicFormulaSkeleton = 3, 
		RULE_predicate = 4, RULE_primitiveType = 5, RULE_type = 6, RULE_actionDefine = 7, 
		RULE_actionSymbol = 8, RULE_eventSetDefine = 9, RULE_eventDefine = 10, 
		RULE_emptyOrPreGD = 11, RULE_emptyOrEffect = 12, RULE_listName = 13, RULE_listVariable = 14, 
		RULE_gd = 15, RULE_atomicFormulaTerm = 16, RULE_literalTerm = 17, RULE_term = 18, 
		RULE_effect = 19, RULE_cEffect = 20, RULE_condEffect = 21, RULE_serverProblem = 22, 
		RULE_problemName = 23, RULE_domainName = 24, RULE_agentDefine = 25, RULE_objectDeclaration = 26, 
		RULE_init = 27, RULE_gdName = 28, RULE_atomicFormulaName = 29, RULE_literalName = 30, 
		RULE_clientProblem = 31, RULE_initKnowledge = 32, RULE_initBelief = 33, 
		RULE_agentId = 34;
	public static readonly string[] ruleNames = {
		"domain", "typeDefine", "predicatesDefine", "atomicFormulaSkeleton", "predicate", 
		"primitiveType", "type", "actionDefine", "actionSymbol", "eventSetDefine", 
		"eventDefine", "emptyOrPreGD", "emptyOrEffect", "listName", "listVariable", 
		"gd", "atomicFormulaTerm", "literalTerm", "term", "effect", "cEffect", 
		"condEffect", "serverProblem", "problemName", "domainName", "agentDefine", 
		"objectDeclaration", "init", "gdName", "atomicFormulaName", "literalName", 
		"clientProblem", "initKnowledge", "initBelief", "agentId"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public IReadOnlyList<ActionDefineContext> actionDefine() {
			return GetRuleContexts<ActionDefineContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicatesDefineContext predicatesDefine() {
			return GetRuleContext<PredicatesDefineContext>(0);
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ActionDefineContext actionDefine(int i) {
			return GetRuleContext<ActionDefineContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(LB);
			State = 71; Match(DEF);
			State = 72; Match(LB);
			State = 73; Match(DOM);
			State = 74; Match(NAME);
			State = 75; Match(RB);
			State = 77;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 76; typeDefine();
				}
				break;
			}
			State = 80;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 79; predicatesDefine();
				}
				break;
			}
			State = 85;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 82; actionDefine();
				}
				}
				State = 87;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 88; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(LB);
			State = 91; Match(COLON);
			State = 92; Match(TYPE);
			State = 93; listName();
			State = 94; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public IReadOnlyList<AtomicFormulaSkeletonContext> atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningParser.PRED, 0); }
		public PredicatesDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicatesDefine; }
	}

	[RuleVersion(0)]
	public PredicatesDefineContext predicatesDefine() {
		PredicatesDefineContext _localctx = new PredicatesDefineContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_predicatesDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(LB);
			State = 97; Match(COLON);
			State = 98; Match(PRED);
			State = 100;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 99; atomicFormulaSkeleton();
				}
				}
				State = 102;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 104; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaSkeleton; }
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(LB);
			State = 107; predicate();
			State = 108; listVariable();
			State = 109; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ITerminalNode AGT() { return GetToken(PlanningParser.AGT, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OBJ) | (1L << AGT) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ITerminalNode EITHER() { return GetToken(PlanningParser.EITHER, 0); }
		public IReadOnlyList<PrimitiveTypeContext> primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			State = 125;
			switch (_input.La(1)) {
			case OBJ:
			case AGT:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; primitiveType();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(LB);
				State = 117; Match(EITHER);
				State = 119;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 118; primitiveType();
					}
					}
					State = 121;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OBJ) | (1L << AGT) | (1L << NAME))) != 0) );
				State = 123; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public EventSetDefineContext eventSetDefine(int i) {
			return GetRuleContext<EventSetDefineContext>(i);
		}
		public IReadOnlyList<EventSetDefineContext> eventSetDefine() {
			return GetRuleContexts<EventSetDefineContext>();
		}
		public ITerminalNode ACT() { return GetToken(PlanningParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_actionDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(LB);
			State = 128; Match(COLON);
			State = 129; Match(ACT);
			State = 130; actionSymbol();
			State = 131; Match(COLON);
			State = 132; Match(PARM);
			State = 133; Match(LB);
			State = 134; listVariable();
			State = 135; Match(RB);
			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 136; eventSetDefine();
				}
				}
				State = 139;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 141; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventSetDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public EventDefineContext eventDefine(int i) {
			return GetRuleContext<EventDefineContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<EventDefineContext> eventDefine() {
			return GetRuleContexts<EventDefineContext>();
		}
		public EventSetDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_eventSetDefine; }
	}

	[RuleVersion(0)]
	public EventSetDefineContext eventSetDefine() {
		EventSetDefineContext _localctx = new EventSetDefineContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_eventSetDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(LB);
			State = 147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 146; eventDefine();
				}
				}
				State = 149;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 151; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefineContext : ParserRuleContext {
		public ITerminalNode PLD() { return GetToken(PlanningParser.PLD, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningParser.EFF, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public EventDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_eventDefine; }
	}

	[RuleVersion(0)]
	public EventDefineContext eventDefine() {
		EventDefineContext _localctx = new EventDefineContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_eventDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(LB);
			State = 157;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 154; Match(COLON);
				State = 155; Match(PLD);
				State = 156; Match(INTEGER);
				}
				break;
			}
			State = 162;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 159; Match(COLON);
				State = 160; Match(PRE);
				State = 161; emptyOrPreGD();
				}
				break;
			}
			State = 167;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 164; Match(COLON);
				State = 165; Match(EFF);
				State = 166; emptyOrEffect();
				}
			}

			State = 169; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrPreGD; }
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_emptyOrPreGD);
		try {
			State = 174;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; Match(LB);
				State = 173; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrEffect; }
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_emptyOrEffect);
		try {
			State = 179;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; Match(LB);
				State = 178; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_listName);
		int _la;
		try {
			State = 196;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 181; Match(NAME);
					}
					}
					State = 186;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 187; Match(NAME);
					}
					}
					State = 190;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NAME );
				State = 192; Match(DASH);
				State = 193; type();
				State = 194; listName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_listVariable);
		int _la;
		try {
			State = 213;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 198; Match(VAR);
					}
					}
					State = 203;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 204; Match(VAR);
					}
					}
					State = 207;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 209; Match(DASH);
				State = 210; type();
				State = 211; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public LiteralTermContext literalTerm() {
			return GetRuleContext<LiteralTermContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_gd);
		int _la;
		try {
			State = 246;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216; literalTerm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 217; Match(LB);
				State = 218; Match(AND);
				State = 220;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 219; gd();
					}
					}
					State = 222;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 224; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 226; Match(LB);
				State = 227; Match(OR);
				State = 229;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 228; gd();
					}
					}
					State = 231;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 233; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 235; Match(LB);
				State = 236; Match(NOT);
				State = 237; gd();
				State = 238; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 240; Match(LB);
				State = 241; Match(IMPLY);
				State = 242; gd();
				State = 243; gd();
				State = 244; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaTerm; }
	}

	[RuleVersion(0)]
	public AtomicFormulaTermContext atomicFormulaTerm() {
		AtomicFormulaTermContext _localctx = new AtomicFormulaTermContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_atomicFormulaTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(LB);
			State = 249; predicate();
			State = 253;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME || _la==VAR) {
				{
				{
				State = 250; term();
				}
				}
				State = 255;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 256; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTermContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public LiteralTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalTerm; }
	}

	[RuleVersion(0)]
	public LiteralTermContext literalTerm() {
		LiteralTermContext _localctx = new LiteralTermContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_literalTerm);
		try {
			State = 264;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; Match(LB);
				State = 260; Match(NOT);
				State = 261; atomicFormulaTerm();
				State = 262; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_la = _input.La(1);
			if ( !(_la==NAME || _la==VAR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_effect);
		int _la;
		try {
			State = 278;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; Match(LB);
				State = 269; Match(AND);
				State = 271;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 270; cEffect();
					}
					}
					State = 273;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 275; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public LiteralTermContext literalTerm() {
			return GetRuleContext<LiteralTermContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_cEffect);
		try {
			State = 287;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; Match(LB);
				State = 281; Match(WHEN);
				State = 282; gd();
				State = 283; condEffect();
				State = 284; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286; literalTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public IReadOnlyList<LiteralTermContext> literalTerm() {
			return GetRuleContexts<LiteralTermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public LiteralTermContext literalTerm(int i) {
			return GetRuleContext<LiteralTermContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_condEffect);
		int _la;
		try {
			State = 299;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289; Match(LB);
				State = 290; Match(AND);
				State = 292;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 291; literalTerm();
					}
					}
					State = 294;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 296; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298; literalTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerProblemContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public AgentDefineContext agentDefine() {
			return GetRuleContext<AgentDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ServerProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_serverProblem; }
	}

	[RuleVersion(0)]
	public ServerProblemContext serverProblem() {
		ServerProblemContext _localctx = new ServerProblemContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_serverProblem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(LB);
			State = 302; Match(DEF);
			State = 303; Match(LB);
			State = 304; Match(PROM);
			State = 305; problemName();
			State = 306; Match(RB);
			State = 307; Match(LB);
			State = 308; Match(COLON);
			State = 309; Match(DOM);
			State = 310; domainName();
			State = 311; Match(RB);
			State = 312; agentDefine();
			State = 314;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 313; objectDeclaration();
				}
				break;
			}
			State = 316; init();
			State = 317; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problemName; }
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domainName; }
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode AGENTS() { return GetToken(PlanningParser.AGENTS, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public AgentDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentDefine; }
	}

	[RuleVersion(0)]
	public AgentDefineContext agentDefine() {
		AgentDefineContext _localctx = new AgentDefineContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_agentDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(LB);
			State = 324; Match(COLON);
			State = 325; Match(AGENTS);
			State = 327;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 326; Match(NAME);
				}
				}
				State = 329;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 331; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(LB);
			State = 334; Match(COLON);
			State = 335; Match(OBJS);
			State = 336; listName();
			State = 337; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<AtomicFormulaNameContext> atomicFormulaName() {
			return GetRuleContexts<AtomicFormulaNameContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public AtomicFormulaNameContext atomicFormulaName(int i) {
			return GetRuleContext<AtomicFormulaNameContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(LB);
			State = 340; Match(COLON);
			State = 341; Match(INIT);
			State = 345;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 342; atomicFormulaName();
				}
				}
				State = 347;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 348; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<GdNameContext> gdName() {
			return GetRuleContexts<GdNameContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public LiteralNameContext literalName() {
			return GetRuleContext<LiteralNameContext>(0);
		}
		public GdNameContext gdName(int i) {
			return GetRuleContext<GdNameContext>(i);
		}
		public GdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gdName; }
	}

	[RuleVersion(0)]
	public GdNameContext gdName() {
		GdNameContext _localctx = new GdNameContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_gdName);
		int _la;
		try {
			State = 381;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351; literalName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 352; Match(LB);
				State = 353; Match(AND);
				State = 355;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 354; gdName();
					}
					}
					State = 357;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 359; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 361; Match(LB);
				State = 362; Match(OR);
				State = 364;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 363; gdName();
					}
					}
					State = 366;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 368; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 370; Match(LB);
				State = 371; Match(NOT);
				State = 372; gdName();
				State = 373; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 375; Match(LB);
				State = 376; Match(IMPLY);
				State = 377; gdName();
				State = 378; gdName();
				State = 379; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public AtomicFormulaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaName; }
	}

	[RuleVersion(0)]
	public AtomicFormulaNameContext atomicFormulaName() {
		AtomicFormulaNameContext _localctx = new AtomicFormulaNameContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_atomicFormulaName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(LB);
			State = 384; predicate();
			State = 388;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME) {
				{
				{
				State = 385; Match(NAME);
				}
				}
				State = 390;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 391; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public LiteralNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalName; }
	}

	[RuleVersion(0)]
	public LiteralNameContext literalName() {
		LiteralNameContext _localctx = new LiteralNameContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_literalName);
		try {
			State = 399;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394; Match(LB);
				State = 395; Match(NOT);
				State = 396; atomicFormulaName();
				State = 397; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClientProblemContext : ParserRuleContext {
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitKnowledgeContext initKnowledge() {
			return GetRuleContext<InitKnowledgeContext>(0);
		}
		public ITerminalNode AGENTID() { return GetToken(PlanningParser.AGENTID, 0); }
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public AgentDefineContext agentDefine() {
			return GetRuleContext<AgentDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public InitBeliefContext initBelief() {
			return GetRuleContext<InitBeliefContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public AgentIdContext agentId() {
			return GetRuleContext<AgentIdContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ClientProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_clientProblem; }
	}

	[RuleVersion(0)]
	public ClientProblemContext clientProblem() {
		ClientProblemContext _localctx = new ClientProblemContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_clientProblem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(LB);
			State = 402; Match(DEF);
			State = 403; Match(LB);
			State = 404; Match(PROM);
			State = 405; problemName();
			State = 406; Match(RB);
			State = 407; Match(LB);
			State = 408; Match(COLON);
			State = 409; Match(DOM);
			State = 410; domainName();
			State = 411; Match(RB);
			State = 412; agentDefine();
			State = 413; Match(LB);
			State = 414; Match(COLON);
			State = 415; Match(AGENTID);
			State = 416; agentId();
			State = 417; Match(RB);
			State = 419;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 418; objectDeclaration();
				}
				break;
			}
			State = 422;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 421; initKnowledge();
				}
				break;
			}
			State = 425;
			_la = _input.La(1);
			if (_la==LB) {
				{
				State = 424; initBelief();
				}
			}

			State = 427; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitKnowledgeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public GdNameContext gdName() {
			return GetRuleContext<GdNameContext>(0);
		}
		public ITerminalNode INITKNOWLEDGE() { return GetToken(PlanningParser.INITKNOWLEDGE, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitKnowledgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initKnowledge; }
	}

	[RuleVersion(0)]
	public InitKnowledgeContext initKnowledge() {
		InitKnowledgeContext _localctx = new InitKnowledgeContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_initKnowledge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(LB);
			State = 430; Match(COLON);
			State = 431; Match(INITKNOWLEDGE);
			State = 432; gdName();
			State = 433; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitBeliefContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode INITBELIEF() { return GetToken(PlanningParser.INITBELIEF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public GdNameContext gdName() {
			return GetRuleContext<GdNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitBeliefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initBelief; }
	}

	[RuleVersion(0)]
	public InitBeliefContext initBelief() {
		InitBeliefContext _localctx = new InitBeliefContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_initBelief);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(LB);
			State = 436; Match(COLON);
			State = 437; Match(INITBELIEF);
			State = 438; gdName();
			State = 439; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentIdContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public AgentIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentId; }
	}

	[RuleVersion(0)]
	public AgentIdContext agentId() {
		AgentIdContext _localctx = new AgentIdContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_agentId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x30\x1BE\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5"+
		"\x2P\n\x2\x3\x2\x5\x2S\n\x2\x3\x2\a\x2V\n\x2\f\x2\xE\x2Y\v\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x6\x4"+
		"g\n\x4\r\x4\xE\x4h\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x6\bz\n\b\r\b\xE\b{\x3\b\x3\b\x5\b\x80"+
		"\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x6\t\x8C\n\t\r"+
		"\t\xE\t\x8D\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x6\v\x96\n\v\r\v\xE\v\x97\x3"+
		"\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\f\xA0\n\f\x3\f\x3\f\x3\f\x5\f\xA5\n\f\x3"+
		"\f\x3\f\x3\f\x5\f\xAA\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r\xB1\n\r\x3\xE"+
		"\x3\xE\x3\xE\x5\xE\xB6\n\xE\x3\xF\a\xF\xB9\n\xF\f\xF\xE\xF\xBC\v\xF\x3"+
		"\xF\x6\xF\xBF\n\xF\r\xF\xE\xF\xC0\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xC7\n"+
		"\xF\x3\x10\a\x10\xCA\n\x10\f\x10\xE\x10\xCD\v\x10\x3\x10\x6\x10\xD0\n"+
		"\x10\r\x10\xE\x10\xD1\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xD8\n\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x6\x11\xDF\n\x11\r\x11\xE\x11\xE0\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x6\x11\xE8\n\x11\r\x11\xE\x11\xE9\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\xF9\n\x11\x3\x12\x3\x12\x3\x12\a\x12\xFE\n\x12"+
		"\f\x12\xE\x12\x101\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x5\x13\x10B\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x6\x15"+
		"\x112\n\x15\r\x15\xE\x15\x113\x3\x15\x3\x15\x3\x15\x5\x15\x119\n\x15\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x122\n\x16\x3\x17"+
		"\x3\x17\x3\x17\x6\x17\x127\n\x17\r\x17\xE\x17\x128\x3\x17\x3\x17\x3\x17"+
		"\x5\x17\x12E\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x13D\n\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x6\x1B"+
		"\x14A\n\x1B\r\x1B\xE\x1B\x14B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x15A\n\x1D\f\x1D\xE\x1D"+
		"\x15D\v\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x6\x1E\x166"+
		"\n\x1E\r\x1E\xE\x1E\x167\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x6\x1E\x16F"+
		"\n\x1E\r\x1E\xE\x1E\x170\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x180\n\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\a\x1F\x185\n\x1F\f\x1F\xE\x1F\x188\v\x1F\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x5 \x192\n \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x1A6\n!\x3!\x5!\x1A9\n!\x3!"+
		"\x5!\x1AC\n!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3$\x3$\x3$\x2\x2\x2%\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2\x2\x4\x4\x2\r\xE((\x4\x2((--\x1CA\x2H\x3\x2\x2\x2\x4"+
		"\\\x3\x2\x2\x2\x6\x62\x3\x2\x2\x2\bl\x3\x2\x2\x2\nq\x3\x2\x2\x2\fs\x3"+
		"\x2\x2\x2\xE\x7F\x3\x2\x2\x2\x10\x81\x3\x2\x2\x2\x12\x91\x3\x2\x2\x2\x14"+
		"\x93\x3\x2\x2\x2\x16\x9B\x3\x2\x2\x2\x18\xB0\x3\x2\x2\x2\x1A\xB5\x3\x2"+
		"\x2\x2\x1C\xC6\x3\x2\x2\x2\x1E\xD7\x3\x2\x2\x2 \xF8\x3\x2\x2\x2\"\xFA"+
		"\x3\x2\x2\x2$\x10A\x3\x2\x2\x2&\x10C\x3\x2\x2\x2(\x118\x3\x2\x2\x2*\x121"+
		"\x3\x2\x2\x2,\x12D\x3\x2\x2\x2.\x12F\x3\x2\x2\x2\x30\x141\x3\x2\x2\x2"+
		"\x32\x143\x3\x2\x2\x2\x34\x145\x3\x2\x2\x2\x36\x14F\x3\x2\x2\x2\x38\x155"+
		"\x3\x2\x2\x2:\x17F\x3\x2\x2\x2<\x181\x3\x2\x2\x2>\x191\x3\x2\x2\x2@\x193"+
		"\x3\x2\x2\x2\x42\x1AF\x3\x2\x2\x2\x44\x1B5\x3\x2\x2\x2\x46\x1BB\x3\x2"+
		"\x2\x2HI\a\x16\x2\x2IJ\a\x5\x2\x2JK\a\x16\x2\x2KL\a\x3\x2\x2LM\a(\x2\x2"+
		"MO\a\x17\x2\x2NP\x5\x4\x3\x2ON\x3\x2\x2\x2OP\x3\x2\x2\x2PR\x3\x2\x2\x2"+
		"QS\x5\x6\x4\x2RQ\x3\x2\x2\x2RS\x3\x2\x2\x2SW\x3\x2\x2\x2TV\x5\x10\t\x2"+
		"UT\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2XZ\x3\x2\x2\x2"+
		"YW\x3\x2\x2\x2Z[\a\x17\x2\x2[\x3\x3\x2\x2\x2\\]\a\x16\x2\x2]^\a\x1A\x2"+
		"\x2^_\a\a\x2\x2_`\x5\x1C\xF\x2`\x61\a\x17\x2\x2\x61\x5\x3\x2\x2\x2\x62"+
		"\x63\a\x16\x2\x2\x63\x64\a\x1A\x2\x2\x64\x66\a\b\x2\x2\x65g\x5\b\x5\x2"+
		"\x66\x65\x3\x2\x2\x2gh\x3\x2\x2\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2ij\x3"+
		"\x2\x2\x2jk\a\x17\x2\x2k\a\x3\x2\x2\x2lm\a\x16\x2\x2mn\x5\n\x6\x2no\x5"+
		"\x1E\x10\x2op\a\x17\x2\x2p\t\x3\x2\x2\x2qr\a(\x2\x2r\v\x3\x2\x2\x2st\t"+
		"\x2\x2\x2t\r\x3\x2\x2\x2u\x80\x5\f\a\x2vw\a\x16\x2\x2wy\a\xF\x2\x2xz\x5"+
		"\f\a\x2yx\x3\x2\x2\x2z{\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|}\x3\x2"+
		"\x2\x2}~\a\x17\x2\x2~\x80\x3\x2\x2\x2\x7Fu\x3\x2\x2\x2\x7Fv\x3\x2\x2\x2"+
		"\x80\xF\x3\x2\x2\x2\x81\x82\a\x16\x2\x2\x82\x83\a\x1A\x2\x2\x83\x84\a"+
		"\t\x2\x2\x84\x85\x5\x12\n\x2\x85\x86\a\x1A\x2\x2\x86\x87\a\n\x2\x2\x87"+
		"\x88\a\x16\x2\x2\x88\x89\x5\x1E\x10\x2\x89\x8B\a\x17\x2\x2\x8A\x8C\x5"+
		"\x14\v\x2\x8B\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2"+
		"\x8D\x8E\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x90\a\x17\x2\x2\x90\x11\x3"+
		"\x2\x2\x2\x91\x92\a(\x2\x2\x92\x13\x3\x2\x2\x2\x93\x95\a\x16\x2\x2\x94"+
		"\x96\x5\x16\f\x2\x95\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x95\x3\x2"+
		"\x2\x2\x97\x98\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9A\a\x17\x2\x2\x9A"+
		"\x15\x3\x2\x2\x2\x9B\x9F\a\x16\x2\x2\x9C\x9D\a\x1A\x2\x2\x9D\x9E\a\x30"+
		"\x2\x2\x9E\xA0\a*\x2\x2\x9F\x9C\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA4"+
		"\x3\x2\x2\x2\xA1\xA2\a\x1A\x2\x2\xA2\xA3\a\v\x2\x2\xA3\xA5\x5\x18\r\x2"+
		"\xA4\xA1\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA9\x3\x2\x2\x2\xA6\xA7\a"+
		"\x1A\x2\x2\xA7\xA8\a\f\x2\x2\xA8\xAA\x5\x1A\xE\x2\xA9\xA6\x3\x2\x2\x2"+
		"\xA9\xAA\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\a\x17\x2\x2\xAC\x17\x3"+
		"\x2\x2\x2\xAD\xB1\x5 \x11\x2\xAE\xAF\a\x16\x2\x2\xAF\xB1\a\x17\x2\x2\xB0"+
		"\xAD\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB1\x19\x3\x2\x2\x2\xB2\xB6\x5(\x15"+
		"\x2\xB3\xB4\a\x16\x2\x2\xB4\xB6\a\x17\x2\x2\xB5\xB2\x3\x2\x2\x2\xB5\xB3"+
		"\x3\x2\x2\x2\xB6\x1B\x3\x2\x2\x2\xB7\xB9\a(\x2\x2\xB8\xB7\x3\x2\x2\x2"+
		"\xB9\xBC\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xC7\x3"+
		"\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBD\xBF\a(\x2\x2\xBE\xBD\x3\x2\x2\x2\xBF"+
		"\xC0\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\x3\x2"+
		"\x2\x2\xC2\xC3\a\x1E\x2\x2\xC3\xC4\x5\xE\b\x2\xC4\xC5\x5\x1C\xF\x2\xC5"+
		"\xC7\x3\x2\x2\x2\xC6\xBA\x3\x2\x2\x2\xC6\xBE\x3\x2\x2\x2\xC7\x1D\x3\x2"+
		"\x2\x2\xC8\xCA\a-\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA\xCD\x3\x2\x2\x2\xCB\xC9"+
		"\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xD8\x3\x2\x2\x2\xCD\xCB\x3\x2\x2"+
		"\x2\xCE\xD0\a-\x2\x2\xCF\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xCF\x3"+
		"\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4\a\x1E\x2\x2"+
		"\xD4\xD5\x5\xE\b\x2\xD5\xD6\x5\x1E\x10\x2\xD6\xD8\x3\x2\x2\x2\xD7\xCB"+
		"\x3\x2\x2\x2\xD7\xCF\x3\x2\x2\x2\xD8\x1F\x3\x2\x2\x2\xD9\xF9\x5\"\x12"+
		"\x2\xDA\xF9\x5$\x13\x2\xDB\xDC\a\x16\x2\x2\xDC\xDE\a\x1F\x2\x2\xDD\xDF"+
		"\x5 \x11\x2\xDE\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2"+
		"\xE0\xE1\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE3\a\x17\x2\x2\xE3\xF9\x3"+
		"\x2\x2\x2\xE4\xE5\a\x16\x2\x2\xE5\xE7\a \x2\x2\xE6\xE8\x5 \x11\x2\xE7"+
		"\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA\x3\x2"+
		"\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEC\a\x17\x2\x2\xEC\xF9\x3\x2\x2\x2\xED"+
		"\xEE\a\x16\x2\x2\xEE\xEF\a!\x2\x2\xEF\xF0\x5 \x11\x2\xF0\xF1\a\x17\x2"+
		"\x2\xF1\xF9\x3\x2\x2\x2\xF2\xF3\a\x16\x2\x2\xF3\xF4\a\"\x2\x2\xF4\xF5"+
		"\x5 \x11\x2\xF5\xF6\x5 \x11\x2\xF6\xF7\a\x17\x2\x2\xF7\xF9\x3\x2\x2\x2"+
		"\xF8\xD9\x3\x2\x2\x2\xF8\xDA\x3\x2\x2\x2\xF8\xDB\x3\x2\x2\x2\xF8\xE4\x3"+
		"\x2\x2\x2\xF8\xED\x3\x2\x2\x2\xF8\xF2\x3\x2\x2\x2\xF9!\x3\x2\x2\x2\xFA"+
		"\xFB\a\x16\x2\x2\xFB\xFF\x5\n\x6\x2\xFC\xFE\x5&\x14\x2\xFD\xFC\x3\x2\x2"+
		"\x2\xFE\x101\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100"+
		"\x102\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x102\x103\a\x17\x2\x2\x103#\x3"+
		"\x2\x2\x2\x104\x10B\x5\"\x12\x2\x105\x106\a\x16\x2\x2\x106\x107\a!\x2"+
		"\x2\x107\x108\x5\"\x12\x2\x108\x109\a\x17\x2\x2\x109\x10B\x3\x2\x2\x2"+
		"\x10A\x104\x3\x2\x2\x2\x10A\x105\x3\x2\x2\x2\x10B%\x3\x2\x2\x2\x10C\x10D"+
		"\t\x3\x2\x2\x10D\'\x3\x2\x2\x2\x10E\x10F\a\x16\x2\x2\x10F\x111\a\x1F\x2"+
		"\x2\x110\x112\x5*\x16\x2\x111\x110\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113"+
		"\x111\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x116"+
		"\a\x17\x2\x2\x116\x119\x3\x2\x2\x2\x117\x119\x5*\x16\x2\x118\x10E\x3\x2"+
		"\x2\x2\x118\x117\x3\x2\x2\x2\x119)\x3\x2\x2\x2\x11A\x11B\a\x16\x2\x2\x11B"+
		"\x11C\a%\x2\x2\x11C\x11D\x5 \x11\x2\x11D\x11E\x5,\x17\x2\x11E\x11F\a\x17"+
		"\x2\x2\x11F\x122\x3\x2\x2\x2\x120\x122\x5$\x13\x2\x121\x11A\x3\x2\x2\x2"+
		"\x121\x120\x3\x2\x2\x2\x122+\x3\x2\x2\x2\x123\x124\a\x16\x2\x2\x124\x126"+
		"\a\x1F\x2\x2\x125\x127\x5$\x13\x2\x126\x125\x3\x2\x2\x2\x127\x128\x3\x2"+
		"\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12A\x3\x2\x2"+
		"\x2\x12A\x12B\a\x17\x2\x2\x12B\x12E\x3\x2\x2\x2\x12C\x12E\x5$\x13\x2\x12D"+
		"\x123\x3\x2\x2\x2\x12D\x12C\x3\x2\x2\x2\x12E-\x3\x2\x2\x2\x12F\x130\a"+
		"\x16\x2\x2\x130\x131\a\x5\x2\x2\x131\x132\a\x16\x2\x2\x132\x133\a\x4\x2"+
		"\x2\x133\x134\x5\x30\x19\x2\x134\x135\a\x17\x2\x2\x135\x136\a\x16\x2\x2"+
		"\x136\x137\a\x1A\x2\x2\x137\x138\a\x3\x2\x2\x138\x139\x5\x32\x1A\x2\x139"+
		"\x13A\a\x17\x2\x2\x13A\x13C\x5\x34\x1B\x2\x13B\x13D\x5\x36\x1C\x2\x13C"+
		"\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F"+
		"\x5\x38\x1D\x2\x13F\x140\a\x17\x2\x2\x140/\x3\x2\x2\x2\x141\x142\a(\x2"+
		"\x2\x142\x31\x3\x2\x2\x2\x143\x144\a(\x2\x2\x144\x33\x3\x2\x2\x2\x145"+
		"\x146\a\x16\x2\x2\x146\x147\a\x1A\x2\x2\x147\x149\a\x14\x2\x2\x148\x14A"+
		"\a(\x2\x2\x149\x148\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x149\x3\x2"+
		"\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14E\a\x17\x2"+
		"\x2\x14E\x35\x3\x2\x2\x2\x14F\x150\a\x16\x2\x2\x150\x151\a\x1A\x2\x2\x151"+
		"\x152\a\x12\x2\x2\x152\x153\x5\x1C\xF\x2\x153\x154\a\x17\x2\x2\x154\x37"+
		"\x3\x2\x2\x2\x155\x156\a\x16\x2\x2\x156\x157\a\x1A\x2\x2\x157\x15B\a\x13"+
		"\x2\x2\x158\x15A\x5<\x1F\x2\x159\x158\x3\x2\x2\x2\x15A\x15D\x3\x2\x2\x2"+
		"\x15B\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15E\x3\x2\x2\x2\x15D"+
		"\x15B\x3\x2\x2\x2\x15E\x15F\a\x17\x2\x2\x15F\x39\x3\x2\x2\x2\x160\x180"+
		"\x5<\x1F\x2\x161\x180\x5> \x2\x162\x163\a\x16\x2\x2\x163\x165\a\x1F\x2"+
		"\x2\x164\x166\x5:\x1E\x2\x165\x164\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167"+
		"\x165\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16A"+
		"\a\x17\x2\x2\x16A\x180\x3\x2\x2\x2\x16B\x16C\a\x16\x2\x2\x16C\x16E\a "+
		"\x2\x2\x16D\x16F\x5:\x1E\x2\x16E\x16D\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2"+
		"\x170\x16E\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172"+
		"\x173\a\x17\x2\x2\x173\x180\x3\x2\x2\x2\x174\x175\a\x16\x2\x2\x175\x176"+
		"\a!\x2\x2\x176\x177\x5:\x1E\x2\x177\x178\a\x17\x2\x2\x178\x180\x3\x2\x2"+
		"\x2\x179\x17A\a\x16\x2\x2\x17A\x17B\a\"\x2\x2\x17B\x17C\x5:\x1E\x2\x17C"+
		"\x17D\x5:\x1E\x2\x17D\x17E\a\x17\x2\x2\x17E\x180\x3\x2\x2\x2\x17F\x160"+
		"\x3\x2\x2\x2\x17F\x161\x3\x2\x2\x2\x17F\x162\x3\x2\x2\x2\x17F\x16B\x3"+
		"\x2\x2\x2\x17F\x174\x3\x2\x2\x2\x17F\x179\x3\x2\x2\x2\x180;\x3\x2\x2\x2"+
		"\x181\x182\a\x16\x2\x2\x182\x186\x5\n\x6\x2\x183\x185\a(\x2\x2\x184\x183"+
		"\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x186\x187\x3"+
		"\x2\x2\x2\x187\x189\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x189\x18A\a\x17"+
		"\x2\x2\x18A=\x3\x2\x2\x2\x18B\x192\x5<\x1F\x2\x18C\x18D\a\x16\x2\x2\x18D"+
		"\x18E\a!\x2\x2\x18E\x18F\x5<\x1F\x2\x18F\x190\a\x17\x2\x2\x190\x192\x3"+
		"\x2\x2\x2\x191\x18B\x3\x2\x2\x2\x191\x18C\x3\x2\x2\x2\x192?\x3\x2\x2\x2"+
		"\x193\x194\a\x16\x2\x2\x194\x195\a\x5\x2\x2\x195\x196\a\x16\x2\x2\x196"+
		"\x197\a\x4\x2\x2\x197\x198\x5\x30\x19\x2\x198\x199\a\x17\x2\x2\x199\x19A"+
		"\a\x16\x2\x2\x19A\x19B\a\x1A\x2\x2\x19B\x19C\a\x3\x2\x2\x19C\x19D\x5\x32"+
		"\x1A\x2\x19D\x19E\a\x17\x2\x2\x19E\x19F\x5\x34\x1B\x2\x19F\x1A0\a\x16"+
		"\x2\x2\x1A0\x1A1\a\x1A\x2\x2\x1A1\x1A2\a\x6\x2\x2\x1A2\x1A3\x5\x46$\x2"+
		"\x1A3\x1A5\a\x17\x2\x2\x1A4\x1A6\x5\x36\x1C\x2\x1A5\x1A4\x3\x2\x2\x2\x1A5"+
		"\x1A6\x3\x2\x2\x2\x1A6\x1A8\x3\x2\x2\x2\x1A7\x1A9\x5\x42\"\x2\x1A8\x1A7"+
		"\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AB\x3\x2\x2\x2\x1AA\x1AC\x5"+
		"\x44#\x2\x1AB\x1AA\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2"+
		"\x2\x1AD\x1AE\a\x17\x2\x2\x1AE\x41\x3\x2\x2\x2\x1AF\x1B0\a\x16\x2\x2\x1B0"+
		"\x1B1\a\x1A\x2\x2\x1B1\x1B2\a\x10\x2\x2\x1B2\x1B3\x5:\x1E\x2\x1B3\x1B4"+
		"\a\x17\x2\x2\x1B4\x43\x3\x2\x2\x2\x1B5\x1B6\a\x16\x2\x2\x1B6\x1B7\a\x1A"+
		"\x2\x2\x1B7\x1B8\a\x11\x2\x2\x1B8\x1B9\x5:\x1E\x2\x1B9\x1BA\a\x17\x2\x2"+
		"\x1BA\x45\x3\x2\x2\x2\x1BB\x1BC\a(\x2\x2\x1BCG\x3\x2\x2\x2*ORWh{\x7F\x8D"+
		"\x97\x9F\xA4\xA9\xB0\xB5\xBA\xC0\xC6\xCB\xD1\xD7\xE0\xE9\xF8\xFF\x10A"+
		"\x113\x118\x121\x128\x12D\x13C\x14B\x15B\x167\x170\x17F\x186\x191\x1A5"+
		"\x1A8\x1AB";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
