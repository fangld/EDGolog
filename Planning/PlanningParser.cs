//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\Planning.g4 by ANTLR 4.2.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOM=1, PROM=2, DEF=3, TYPE=4, PRED=5, ACT=6, PARM=7, PRE=8, EFF=9, OBJ=10, 
		EITHER=11, OBJS=12, INIT=13, AGENTS=14, GOAL=15, AT=16, LB=17, RB=18, 
		LSB=19, RSB=20, COLON=21, QM=22, COMMA=23, UL=24, DASH=25, AND=26, OR=27, 
		NOT=28, IMPLY=29, FORALL=30, EXISTS=31, WHEN=32, PREF=33, LETTER=34, DIGIT=35, 
		NAME=36, CHAR=37, NUMBER=38, DECIMAL=39, VAR=40, FUNSYM=41, WS=42;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'types'", "'predicates'", 
		"'action'", "'parameters'", "'precondition'", "'effect'", "'object'", 
		"'either'", "'objects'", "'init'", "'agents'", "'goal'", "'at'", "'('", 
		"')'", "'['", "']'", "':'", "'?'", "'.'", "'_'", "'-'", "'and'", "'or'", 
		"'not'", "'imply'", "'forall'", "'exists'", "'when'", "'preference'", 
		"LETTER", "DIGIT", "NAME", "CHAR", "NUMBER", "DECIMAL", "VAR", "FUNSYM", 
		"WS"
	};
	public const int
		RULE_domain = 0, RULE_typeDefine = 1, RULE_predicatesDefine = 2, RULE_atomicFormulaSkeleton = 3, 
		RULE_predicate = 4, RULE_primitiveType = 5, RULE_type = 6, RULE_structureDefine = 7, 
		RULE_actionDefine = 8, RULE_actionSymbol = 9, RULE_actionDefBody = 10, 
		RULE_emptyOrPreGD = 11, RULE_emptyOrEffect = 12, RULE_listName = 13, RULE_listVariable = 14, 
		RULE_gd = 15, RULE_atomicFormulaTerm = 16, RULE_literalTerm = 17, RULE_term = 18, 
		RULE_effect = 19, RULE_cEffect = 20, RULE_condEffect = 21, RULE_problem = 22, 
		RULE_problemName = 23, RULE_domainName = 24, RULE_agentDefine = 25, RULE_objectDeclaration = 26, 
		RULE_init = 27, RULE_gdName = 28, RULE_atomicFormulaName = 29, RULE_literalName = 30;
	public static readonly string[] ruleNames = {
		"domain", "typeDefine", "predicatesDefine", "atomicFormulaSkeleton", "predicate", 
		"primitiveType", "type", "structureDefine", "actionDefine", "actionSymbol", 
		"actionDefBody", "emptyOrPreGD", "emptyOrEffect", "listName", "listVariable", 
		"gd", "atomicFormulaTerm", "literalTerm", "term", "effect", "cEffect", 
		"condEffect", "problem", "problemName", "domainName", "agentDefine", "objectDeclaration", 
		"init", "gdName", "atomicFormulaName", "literalName"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<StructureDefineContext> structureDefine() {
			return GetRuleContexts<StructureDefineContext>();
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicatesDefineContext predicatesDefine() {
			return GetRuleContext<PredicatesDefineContext>(0);
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public StructureDefineContext structureDefine(int i) {
			return GetRuleContext<StructureDefineContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterDomain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitDomain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(LB);
			State = 63; Match(DEF);
			State = 64; Match(LB);
			State = 65; Match(DOM);
			State = 66; Match(NAME);
			State = 67; Match(RB);
			State = 69;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 68; typeDefine();
				}
				break;
			}
			State = 72;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 71; predicatesDefine();
				}
				break;
			}
			State = 77;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 74; structureDefine();
				}
				}
				State = 79;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 80; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTypeDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTypeDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(LB);
			State = 83; Match(COLON);
			State = 84; Match(TYPE);
			State = 85; listName();
			State = 86; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public IReadOnlyList<AtomicFormulaSkeletonContext> atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningParser.PRED, 0); }
		public PredicatesDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicatesDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicatesDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicatesDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatesDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatesDefineContext predicatesDefine() {
		PredicatesDefineContext _localctx = new PredicatesDefineContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_predicatesDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(LB);
			State = 89; Match(COLON);
			State = 90; Match(PRED);
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 91; atomicFormulaSkeleton();
				}
				}
				State = 94;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 96; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaSkeleton; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaSkeleton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaSkeleton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaSkeleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(LB);
			State = 99; predicate();
			State = 100; listVariable();
			State = 101; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = _input.La(1);
			if ( !(_la==OBJ || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ITerminalNode EITHER() { return GetToken(PlanningParser.EITHER, 0); }
		public IReadOnlyList<PrimitiveTypeContext> primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			State = 117;
			switch (_input.La(1)) {
			case OBJ:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; primitiveType();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; Match(LB);
				State = 109; Match(EITHER);
				State = 111;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 110; primitiveType();
					}
					}
					State = 113;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OBJ || _la==NAME );
				State = 115; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDefineContext : ParserRuleContext {
		public ActionDefineContext actionDefine() {
			return GetRuleContext<ActionDefineContext>(0);
		}
		public StructureDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_structureDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterStructureDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitStructureDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDefineContext structureDefine() {
		StructureDefineContext _localctx = new StructureDefineContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_structureDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; actionDefine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ActionDefBodyContext actionDefBody() {
			return GetRuleContext<ActionDefBodyContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_actionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(LB);
			State = 122; Match(COLON);
			State = 123; Match(ACT);
			State = 124; actionSymbol();
			State = 125; Match(COLON);
			State = 126; Match(PARM);
			State = 127; Match(LB);
			State = 128; listVariable();
			State = 129; Match(RB);
			State = 130; actionDefBody();
			State = 131; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefBodyContext : ParserRuleContext {
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningParser.EFF, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefBody; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefBodyContext actionDefBody() {
		ActionDefBodyContext _localctx = new ActionDefBodyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_actionDefBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 135; Match(COLON);
				State = 136; Match(PRE);
				State = 137; emptyOrPreGD();
				}
				break;
			}
			State = 143;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 140; Match(COLON);
				State = 141; Match(EFF);
				State = 142; emptyOrEffect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrPreGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_emptyOrPreGD);
		try {
			State = 148;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; Match(LB);
				State = 147; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_emptyOrEffect);
		try {
			State = 153;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; Match(LB);
				State = 152; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_listName);
		int _la;
		try {
			State = 170;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 155; Match(NAME);
					}
					}
					State = 160;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 161; Match(NAME);
					}
					}
					State = 164;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NAME );
				State = 166; Match(DASH);
				State = 167; type();
				State = 168; listName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_listVariable);
		int _la;
		try {
			State = 187;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 172; Match(VAR);
					}
					}
					State = 177;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 178; Match(VAR);
					}
					}
					State = 181;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 183; Match(DASH);
				State = 184; type();
				State = 185; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public LiteralTermContext literalTerm() {
			return GetRuleContext<LiteralTermContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterGd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitGd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_gd);
		int _la;
		try {
			State = 220;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; literalTerm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; Match(LB);
				State = 192; Match(AND);
				State = 194;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 193; gd();
					}
					}
					State = 196;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 198; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 200; Match(LB);
				State = 201; Match(OR);
				State = 203;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 202; gd();
					}
					}
					State = 205;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 207; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 209; Match(LB);
				State = 210; Match(NOT);
				State = 211; gd();
				State = 212; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 214; Match(LB);
				State = 215; Match(IMPLY);
				State = 216; gd();
				State = 217; gd();
				State = 218; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaTermContext atomicFormulaTerm() {
		AtomicFormulaTermContext _localctx = new AtomicFormulaTermContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_atomicFormulaTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(LB);
			State = 223; predicate();
			State = 227;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME || _la==VAR) {
				{
				{
				State = 224; term();
				}
				}
				State = 229;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 230; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTermContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public LiteralTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterLiteralTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitLiteralTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTermContext literalTerm() {
		LiteralTermContext _localctx = new LiteralTermContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_literalTerm);
		try {
			State = 238;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; Match(LB);
				State = 234; Match(NOT);
				State = 235; atomicFormulaTerm();
				State = 236; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_la = _input.La(1);
			if ( !(_la==NAME || _la==VAR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_effect);
		int _la;
		try {
			State = 252;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; Match(LB);
				State = 243; Match(AND);
				State = 245;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 244; cEffect();
					}
					}
					State = 247;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 249; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public LiteralTermContext literalTerm() {
			return GetRuleContext<LiteralTermContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_cEffect);
		try {
			State = 261;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; Match(LB);
				State = 255; Match(WHEN);
				State = 256; gd();
				State = 257; condEffect();
				State = 258; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260; literalTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public IReadOnlyList<LiteralTermContext> literalTerm() {
			return GetRuleContexts<LiteralTermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public LiteralTermContext literalTerm(int i) {
			return GetRuleContext<LiteralTermContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCondEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCondEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_condEffect);
		int _la;
		try {
			State = 273;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; Match(LB);
				State = 264; Match(AND);
				State = 266;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 265; literalTerm();
					}
					}
					State = 268;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 270; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; literalTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public AgentDefineContext agentDefine() {
			return GetRuleContext<AgentDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problem; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterProblem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitProblem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemContext problem() {
		ProblemContext _localctx = new ProblemContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_problem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(LB);
			State = 276; Match(DEF);
			State = 277; Match(LB);
			State = 278; Match(PROM);
			State = 279; problemName();
			State = 280; Match(RB);
			State = 281; Match(LB);
			State = 282; Match(COLON);
			State = 283; Match(DOM);
			State = 284; domainName();
			State = 285; Match(RB);
			State = 286; agentDefine();
			State = 288;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 287; objectDeclaration();
				}
				break;
			}
			State = 290; init();
			State = 291; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problemName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterProblemName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitProblemName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domainName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterDomainName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitDomainName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode AGENTS() { return GetToken(PlanningParser.AGENTS, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public AgentDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAgentDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAgentDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentDefineContext agentDefine() {
		AgentDefineContext _localctx = new AgentDefineContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_agentDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(LB);
			State = 298; Match(COLON);
			State = 299; Match(AGENTS);
			State = 301;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 300; Match(NAME);
				}
				}
				State = 303;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 305; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(LB);
			State = 308; Match(COLON);
			State = 309; Match(OBJS);
			State = 310; listName();
			State = 311; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public GdNameContext gdName() {
			return GetRuleContext<GdNameContext>(0);
		}
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(LB);
			State = 314; Match(COLON);
			State = 315; Match(INIT);
			State = 316; gdName();
			State = 317; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdNameContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<GdNameContext> gdName() {
			return GetRuleContexts<GdNameContext>();
		}
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public GdNameContext gdName(int i) {
			return GetRuleContext<GdNameContext>(i);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public LiteralNameContext literalName() {
			return GetRuleContext<LiteralNameContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gdName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterGdName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitGdName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdNameContext gdName() {
		GdNameContext _localctx = new GdNameContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_gdName);
		int _la;
		try {
			State = 361;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320; literalName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321; Match(LB);
				State = 322; Match(AND);
				State = 324;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 323; gdName();
					}
					}
					State = 326;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 328; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 330; Match(LB);
				State = 331; Match(OR);
				State = 333;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 332; gdName();
					}
					}
					State = 335;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 337; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 339; Match(LB);
				State = 340; Match(IMPLY);
				State = 341; gdName();
				State = 342; gdName();
				State = 343; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 345; Match(LB);
				State = 346; Match(EXISTS);
				State = 347; Match(LB);
				State = 348; listVariable();
				State = 349; Match(RB);
				State = 350; gd();
				State = 351; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 353; Match(LB);
				State = 354; Match(FORALL);
				State = 355; Match(LB);
				State = 356; listVariable();
				State = 357; Match(RB);
				State = 358; gd();
				State = 359; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public AtomicFormulaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaNameContext atomicFormulaName() {
		AtomicFormulaNameContext _localctx = new AtomicFormulaNameContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_atomicFormulaName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; Match(LB);
			State = 364; predicate();
			State = 368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME) {
				{
				{
				State = 365; Match(NAME);
				}
				}
				State = 370;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 371; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public LiteralNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterLiteralName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitLiteralName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNameContext literalName() {
		LiteralNameContext _localctx = new LiteralNameContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_literalName);
		try {
			State = 379;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374; Match(LB);
				State = 375; Match(NOT);
				State = 376; atomicFormulaName();
				State = 377; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3,\x180\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2H\n\x2\x3\x2\x5\x2K\n\x2\x3"+
		"\x2\a\x2N\n\x2\f\x2\xE\x2Q\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x6\x4_\n\x4\r\x4\xE\x4`\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3"+
		"\b\x6\br\n\b\r\b\xE\bs\x3\b\x3\b\x5\bx\n\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x5"+
		"\f\x8D\n\f\x3\f\x3\f\x3\f\x5\f\x92\n\f\x3\r\x3\r\x3\r\x5\r\x97\n\r\x3"+
		"\xE\x3\xE\x3\xE\x5\xE\x9C\n\xE\x3\xF\a\xF\x9F\n\xF\f\xF\xE\xF\xA2\v\xF"+
		"\x3\xF\x6\xF\xA5\n\xF\r\xF\xE\xF\xA6\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xAD"+
		"\n\xF\x3\x10\a\x10\xB0\n\x10\f\x10\xE\x10\xB3\v\x10\x3\x10\x6\x10\xB6"+
		"\n\x10\r\x10\xE\x10\xB7\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xBE\n\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x6\x11\xC5\n\x11\r\x11\xE\x11\xC6\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x6\x11\xCE\n\x11\r\x11\xE\x11\xCF\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\xDF\n\x11\x3\x12\x3\x12\x3\x12\a\x12\xE4\n\x12"+
		"\f\x12\xE\x12\xE7\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x5\x13\xF1\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x6\x15\xF8"+
		"\n\x15\r\x15\xE\x15\xF9\x3\x15\x3\x15\x3\x15\x5\x15\xFF\n\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x108\n\x16\x3\x17\x3\x17"+
		"\x3\x17\x6\x17\x10D\n\x17\r\x17\xE\x17\x10E\x3\x17\x3\x17\x3\x17\x5\x17"+
		"\x114\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x123\n\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x6\x1B\x130\n"+
		"\x1B\r\x1B\xE\x1B\x131\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x6\x1E\x147\n\x1E\r\x1E\xE\x1E\x148\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x6\x1E\x150\n\x1E\r\x1E\xE\x1E\x151\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x5\x1E\x16C\n\x1E\x3\x1F\x3\x1F\x3\x1F\a\x1F\x171\n\x1F\f\x1F"+
		"\xE\x1F\x174\v\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x5 \x17E\n \x3"+
		" \x2\x2\x2!\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2\x2\x4\x4\x2\f\f&&\x4\x2&&"+
		"**\x18A\x2@\x3\x2\x2\x2\x4T\x3\x2\x2\x2\x6Z\x3\x2\x2\x2\b\x64\x3\x2\x2"+
		"\x2\ni\x3\x2\x2\x2\fk\x3\x2\x2\x2\xEw\x3\x2\x2\x2\x10y\x3\x2\x2\x2\x12"+
		"{\x3\x2\x2\x2\x14\x87\x3\x2\x2\x2\x16\x8C\x3\x2\x2\x2\x18\x96\x3\x2\x2"+
		"\x2\x1A\x9B\x3\x2\x2\x2\x1C\xAC\x3\x2\x2\x2\x1E\xBD\x3\x2\x2\x2 \xDE\x3"+
		"\x2\x2\x2\"\xE0\x3\x2\x2\x2$\xF0\x3\x2\x2\x2&\xF2\x3\x2\x2\x2(\xFE\x3"+
		"\x2\x2\x2*\x107\x3\x2\x2\x2,\x113\x3\x2\x2\x2.\x115\x3\x2\x2\x2\x30\x127"+
		"\x3\x2\x2\x2\x32\x129\x3\x2\x2\x2\x34\x12B\x3\x2\x2\x2\x36\x135\x3\x2"+
		"\x2\x2\x38\x13B\x3\x2\x2\x2:\x16B\x3\x2\x2\x2<\x16D\x3\x2\x2\x2>\x17D"+
		"\x3\x2\x2\x2@\x41\a\x13\x2\x2\x41\x42\a\x5\x2\x2\x42\x43\a\x13\x2\x2\x43"+
		"\x44\a\x3\x2\x2\x44\x45\a&\x2\x2\x45G\a\x14\x2\x2\x46H\x5\x4\x3\x2G\x46"+
		"\x3\x2\x2\x2GH\x3\x2\x2\x2HJ\x3\x2\x2\x2IK\x5\x6\x4\x2JI\x3\x2\x2\x2J"+
		"K\x3\x2\x2\x2KO\x3\x2\x2\x2LN\x5\x10\t\x2ML\x3\x2\x2\x2NQ\x3\x2\x2\x2"+
		"OM\x3\x2\x2\x2OP\x3\x2\x2\x2PR\x3\x2\x2\x2QO\x3\x2\x2\x2RS\a\x14\x2\x2"+
		"S\x3\x3\x2\x2\x2TU\a\x13\x2\x2UV\a\x17\x2\x2VW\a\x6\x2\x2WX\x5\x1C\xF"+
		"\x2XY\a\x14\x2\x2Y\x5\x3\x2\x2\x2Z[\a\x13\x2\x2[\\\a\x17\x2\x2\\^\a\a"+
		"\x2\x2]_\x5\b\x5\x2^]\x3\x2\x2\x2_`\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3"+
		"\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x63\a\x14\x2\x2\x63\a\x3\x2\x2\x2\x64"+
		"\x65\a\x13\x2\x2\x65\x66\x5\n\x6\x2\x66g\x5\x1E\x10\x2gh\a\x14\x2\x2h"+
		"\t\x3\x2\x2\x2ij\a&\x2\x2j\v\x3\x2\x2\x2kl\t\x2\x2\x2l\r\x3\x2\x2\x2m"+
		"x\x5\f\a\x2no\a\x13\x2\x2oq\a\r\x2\x2pr\x5\f\a\x2qp\x3\x2\x2\x2rs\x3\x2"+
		"\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2tu\x3\x2\x2\x2uv\a\x14\x2\x2vx\x3\x2"+
		"\x2\x2wm\x3\x2\x2\x2wn\x3\x2\x2\x2x\xF\x3\x2\x2\x2yz\x5\x12\n\x2z\x11"+
		"\x3\x2\x2\x2{|\a\x13\x2\x2|}\a\x17\x2\x2}~\a\b\x2\x2~\x7F\x5\x14\v\x2"+
		"\x7F\x80\a\x17\x2\x2\x80\x81\a\t\x2\x2\x81\x82\a\x13\x2\x2\x82\x83\x5"+
		"\x1E\x10\x2\x83\x84\a\x14\x2\x2\x84\x85\x5\x16\f\x2\x85\x86\a\x14\x2\x2"+
		"\x86\x13\x3\x2\x2\x2\x87\x88\a&\x2\x2\x88\x15\x3\x2\x2\x2\x89\x8A\a\x17"+
		"\x2\x2\x8A\x8B\a\n\x2\x2\x8B\x8D\x5\x18\r\x2\x8C\x89\x3\x2\x2\x2\x8C\x8D"+
		"\x3\x2\x2\x2\x8D\x91\x3\x2\x2\x2\x8E\x8F\a\x17\x2\x2\x8F\x90\a\v\x2\x2"+
		"\x90\x92\x5\x1A\xE\x2\x91\x8E\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x17"+
		"\x3\x2\x2\x2\x93\x97\x5 \x11\x2\x94\x95\a\x13\x2\x2\x95\x97\a\x14\x2\x2"+
		"\x96\x93\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x97\x19\x3\x2\x2\x2\x98\x9C\x5"+
		"(\x15\x2\x99\x9A\a\x13\x2\x2\x9A\x9C\a\x14\x2\x2\x9B\x98\x3\x2\x2\x2\x9B"+
		"\x99\x3\x2\x2\x2\x9C\x1B\x3\x2\x2\x2\x9D\x9F\a&\x2\x2\x9E\x9D\x3\x2\x2"+
		"\x2\x9F\xA2\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xAD"+
		"\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA5\a&\x2\x2\xA4\xA3\x3\x2\x2\x2"+
		"\xA5\xA6\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\x3"+
		"\x2\x2\x2\xA8\xA9\a\x1B\x2\x2\xA9\xAA\x5\xE\b\x2\xAA\xAB\x5\x1C\xF\x2"+
		"\xAB\xAD\x3\x2\x2\x2\xAC\xA0\x3\x2\x2\x2\xAC\xA4\x3\x2\x2\x2\xAD\x1D\x3"+
		"\x2\x2\x2\xAE\xB0\a*\x2\x2\xAF\xAE\x3\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1"+
		"\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xBE\x3\x2\x2\x2\xB3\xB1\x3\x2"+
		"\x2\x2\xB4\xB6\a*\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB5"+
		"\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\a\x1B\x2"+
		"\x2\xBA\xBB\x5\xE\b\x2\xBB\xBC\x5\x1E\x10\x2\xBC\xBE\x3\x2\x2\x2\xBD\xB1"+
		"\x3\x2\x2\x2\xBD\xB5\x3\x2\x2\x2\xBE\x1F\x3\x2\x2\x2\xBF\xDF\x5\"\x12"+
		"\x2\xC0\xDF\x5$\x13\x2\xC1\xC2\a\x13\x2\x2\xC2\xC4\a\x1C\x2\x2\xC3\xC5"+
		"\x5 \x11\x2\xC4\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2"+
		"\xC6\xC7\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\a\x14\x2\x2\xC9\xDF\x3"+
		"\x2\x2\x2\xCA\xCB\a\x13\x2\x2\xCB\xCD\a\x1D\x2\x2\xCC\xCE\x5 \x11\x2\xCD"+
		"\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xCF\xD0\x3\x2"+
		"\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\a\x14\x2\x2\xD2\xDF\x3\x2\x2\x2\xD3"+
		"\xD4\a\x13\x2\x2\xD4\xD5\a\x1E\x2\x2\xD5\xD6\x5 \x11\x2\xD6\xD7\a\x14"+
		"\x2\x2\xD7\xDF\x3\x2\x2\x2\xD8\xD9\a\x13\x2\x2\xD9\xDA\a\x1F\x2\x2\xDA"+
		"\xDB\x5 \x11\x2\xDB\xDC\x5 \x11\x2\xDC\xDD\a\x14\x2\x2\xDD\xDF\x3\x2\x2"+
		"\x2\xDE\xBF\x3\x2\x2\x2\xDE\xC0\x3\x2\x2\x2\xDE\xC1\x3\x2\x2\x2\xDE\xCA"+
		"\x3\x2\x2\x2\xDE\xD3\x3\x2\x2\x2\xDE\xD8\x3\x2\x2\x2\xDF!\x3\x2\x2\x2"+
		"\xE0\xE1\a\x13\x2\x2\xE1\xE5\x5\n\x6\x2\xE2\xE4\x5&\x14\x2\xE3\xE2\x3"+
		"\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2"+
		"\xE6\xE8\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xE9\a\x14\x2\x2\xE9#\x3\x2"+
		"\x2\x2\xEA\xF1\x5\"\x12\x2\xEB\xEC\a\x13\x2\x2\xEC\xED\a\x1E\x2\x2\xED"+
		"\xEE\x5\"\x12\x2\xEE\xEF\a\x14\x2\x2\xEF\xF1\x3\x2\x2\x2\xF0\xEA\x3\x2"+
		"\x2\x2\xF0\xEB\x3\x2\x2\x2\xF1%\x3\x2\x2\x2\xF2\xF3\t\x3\x2\x2\xF3\'\x3"+
		"\x2\x2\x2\xF4\xF5\a\x13\x2\x2\xF5\xF7\a\x1C\x2\x2\xF6\xF8\x5*\x16\x2\xF7"+
		"\xF6\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2"+
		"\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\xFC\a\x14\x2\x2\xFC\xFF\x3\x2\x2\x2\xFD"+
		"\xFF\x5*\x16\x2\xFE\xF4\x3\x2\x2\x2\xFE\xFD\x3\x2\x2\x2\xFF)\x3\x2\x2"+
		"\x2\x100\x101\a\x13\x2\x2\x101\x102\a\"\x2\x2\x102\x103\x5 \x11\x2\x103"+
		"\x104\x5,\x17\x2\x104\x105\a\x14\x2\x2\x105\x108\x3\x2\x2\x2\x106\x108"+
		"\x5$\x13\x2\x107\x100\x3\x2\x2\x2\x107\x106\x3\x2\x2\x2\x108+\x3\x2\x2"+
		"\x2\x109\x10A\a\x13\x2\x2\x10A\x10C\a\x1C\x2\x2\x10B\x10D\x5$\x13\x2\x10C"+
		"\x10B\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10F"+
		"\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x111\a\x14\x2\x2\x111\x114\x3"+
		"\x2\x2\x2\x112\x114\x5$\x13\x2\x113\x109\x3\x2\x2\x2\x113\x112\x3\x2\x2"+
		"\x2\x114-\x3\x2\x2\x2\x115\x116\a\x13\x2\x2\x116\x117\a\x5\x2\x2\x117"+
		"\x118\a\x13\x2\x2\x118\x119\a\x4\x2\x2\x119\x11A\x5\x30\x19\x2\x11A\x11B"+
		"\a\x14\x2\x2\x11B\x11C\a\x13\x2\x2\x11C\x11D\a\x17\x2\x2\x11D\x11E\a\x3"+
		"\x2\x2\x11E\x11F\x5\x32\x1A\x2\x11F\x120\a\x14\x2\x2\x120\x122\x5\x34"+
		"\x1B\x2\x121\x123\x5\x36\x1C\x2\x122\x121\x3\x2\x2\x2\x122\x123\x3\x2"+
		"\x2\x2\x123\x124\x3\x2\x2\x2\x124\x125\x5\x38\x1D\x2\x125\x126\a\x14\x2"+
		"\x2\x126/\x3\x2\x2\x2\x127\x128\a&\x2\x2\x128\x31\x3\x2\x2\x2\x129\x12A"+
		"\a&\x2\x2\x12A\x33\x3\x2\x2\x2\x12B\x12C\a\x13\x2\x2\x12C\x12D\a\x17\x2"+
		"\x2\x12D\x12F\a\x10\x2\x2\x12E\x130\a&\x2\x2\x12F\x12E\x3\x2\x2\x2\x130"+
		"\x131\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133"+
		"\x3\x2\x2\x2\x133\x134\a\x14\x2\x2\x134\x35\x3\x2\x2\x2\x135\x136\a\x13"+
		"\x2\x2\x136\x137\a\x17\x2\x2\x137\x138\a\xE\x2\x2\x138\x139\x5\x1C\xF"+
		"\x2\x139\x13A\a\x14\x2\x2\x13A\x37\x3\x2\x2\x2\x13B\x13C\a\x13\x2\x2\x13C"+
		"\x13D\a\x17\x2\x2\x13D\x13E\a\xF\x2\x2\x13E\x13F\x5:\x1E\x2\x13F\x140"+
		"\a\x14\x2\x2\x140\x39\x3\x2\x2\x2\x141\x16C\x5<\x1F\x2\x142\x16C\x5> "+
		"\x2\x143\x144\a\x13\x2\x2\x144\x146\a\x1C\x2\x2\x145\x147\x5:\x1E\x2\x146"+
		"\x145\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x148\x149"+
		"\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14B\a\x14\x2\x2\x14B\x16C\x3"+
		"\x2\x2\x2\x14C\x14D\a\x13\x2\x2\x14D\x14F\a\x1D\x2\x2\x14E\x150\x5:\x1E"+
		"\x2\x14F\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2"+
		"\x151\x152\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\a\x14\x2\x2\x154"+
		"\x16C\x3\x2\x2\x2\x155\x156\a\x13\x2\x2\x156\x157\a\x1F\x2\x2\x157\x158"+
		"\x5:\x1E\x2\x158\x159\x5:\x1E\x2\x159\x15A\a\x14\x2\x2\x15A\x16C\x3\x2"+
		"\x2\x2\x15B\x15C\a\x13\x2\x2\x15C\x15D\a!\x2\x2\x15D\x15E\a\x13\x2\x2"+
		"\x15E\x15F\x5\x1E\x10\x2\x15F\x160\a\x14\x2\x2\x160\x161\x5 \x11\x2\x161"+
		"\x162\a\x14\x2\x2\x162\x16C\x3\x2\x2\x2\x163\x164\a\x13\x2\x2\x164\x165"+
		"\a \x2\x2\x165\x166\a\x13\x2\x2\x166\x167\x5\x1E\x10\x2\x167\x168\a\x14"+
		"\x2\x2\x168\x169\x5 \x11\x2\x169\x16A\a\x14\x2\x2\x16A\x16C\x3\x2\x2\x2"+
		"\x16B\x141\x3\x2\x2\x2\x16B\x142\x3\x2\x2\x2\x16B\x143\x3\x2\x2\x2\x16B"+
		"\x14C\x3\x2\x2\x2\x16B\x155\x3\x2\x2\x2\x16B\x15B\x3\x2\x2\x2\x16B\x163"+
		"\x3\x2\x2\x2\x16C;\x3\x2\x2\x2\x16D\x16E\a\x13\x2\x2\x16E\x172\x5\n\x6"+
		"\x2\x16F\x171\a&\x2\x2\x170\x16F\x3\x2\x2\x2\x171\x174\x3\x2\x2\x2\x172"+
		"\x170\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x175\x3\x2\x2\x2\x174\x172"+
		"\x3\x2\x2\x2\x175\x176\a\x14\x2\x2\x176=\x3\x2\x2\x2\x177\x17E\x5<\x1F"+
		"\x2\x178\x179\a\x13\x2\x2\x179\x17A\a\x1E\x2\x2\x17A\x17B\x5<\x1F\x2\x17B"+
		"\x17C\a\x14\x2\x2\x17C\x17E\x3\x2\x2\x2\x17D\x177\x3\x2\x2\x2\x17D\x178"+
		"\x3\x2\x2\x2\x17E?\x3\x2\x2\x2#GJO`sw\x8C\x91\x96\x9B\xA0\xA6\xAC\xB1"+
		"\xB7\xBD\xC6\xCF\xDE\xE5\xF0\xF9\xFE\x107\x10E\x113\x122\x131\x148\x151"+
		"\x16B\x172\x17D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
