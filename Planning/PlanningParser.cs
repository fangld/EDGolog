//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\Planning.g4 by ANTLR 4.2.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOM=1, PROM=2, DEF=3, REQ=4, TYPE=5, PRED=6, ACT=7, PARM=8, PRE=9, EFF=10, 
		OBJ=11, EITHER=12, OBJS=13, INIT=14, GOAL=15, AT=16, STRIPS=17, TYPING=18, 
		LB=19, RB=20, LSB=21, RSB=22, COLON=23, QM=24, COMMA=25, UL=26, DASH=27, 
		PLUS=28, MINUS=29, MULT=30, DIV=31, EQ=32, LT=33, LEQ=34, GT=35, GEQ=36, 
		AND=37, OR=38, NOT=39, IMPLY=40, FORALL=41, EXISTS=42, WHEN=43, PREF=44, 
		BINCOMP=45, BINOP=46, LETTER=47, DIGIT=48, NAME=49, CHAR=50, NUMBER=51, 
		DECIMAL=52, VAR=53, FUNSYM=54, WS=55;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'requirements'", "'types'", 
		"'predicates'", "'action'", "'parameters'", "'precondition'", "'effect'", 
		"'object'", "'either'", "'objects'", "'init'", "'goal'", "'at'", "'strips'", 
		"'typing'", "'('", "')'", "'['", "']'", "':'", "'?'", "'.'", "'_'", "DASH", 
		"'+'", "MINUS", "'*'", "'/'", "'='", "'<'", "'<='", "'>'", "'>='", "'and'", 
		"'or'", "'not'", "'imply'", "'forall'", "'exists'", "'when'", "'preference'", 
		"BINCOMP", "BINOP", "LETTER", "DIGIT", "NAME", "CHAR", "NUMBER", "DECIMAL", 
		"VAR", "FUNSYM", "WS"
	};
	public const int
		RULE_domain = 0, RULE_requireDefine = 1, RULE_requireKey = 2, RULE_strips = 3, 
		RULE_typing = 4, RULE_typeDefine = 5, RULE_predicatesDefine = 6, RULE_atomicFormulaSkeleton = 7, 
		RULE_predicate = 8, RULE_primitiveType = 9, RULE_type = 10, RULE_structureDefine = 11, 
		RULE_actionDefine = 12, RULE_actionSymbol = 13, RULE_actionDefBody = 14, 
		RULE_emptyOrPreGD = 15, RULE_emptyOrEffect = 16, RULE_listName = 17, RULE_listVariable = 18, 
		RULE_preGD = 19, RULE_prefGD = 20, RULE_prefName = 21, RULE_gd = 22, RULE_atomicFormulaTerm = 23, 
		RULE_literalTerm = 24, RULE_term = 25, RULE_effect = 26, RULE_cEffect = 27, 
		RULE_pEffect = 28, RULE_condEffect = 29, RULE_functionTerm = 30, RULE_problem = 31, 
		RULE_objectDeclaration = 32, RULE_init = 33, RULE_initEl = 34, RULE_basicFunctionTerm = 35, 
		RULE_functionSymbol = 36, RULE_atomicFormulaName = 37, RULE_literalName = 38, 
		RULE_goal = 39;
	public static readonly string[] ruleNames = {
		"domain", "requireDefine", "requireKey", "strips", "typing", "typeDefine", 
		"predicatesDefine", "atomicFormulaSkeleton", "predicate", "primitiveType", 
		"type", "structureDefine", "actionDefine", "actionSymbol", "actionDefBody", 
		"emptyOrPreGD", "emptyOrEffect", "listName", "listVariable", "preGD", 
		"prefGD", "prefName", "gd", "atomicFormulaTerm", "literalTerm", "term", 
		"effect", "cEffect", "pEffect", "condEffect", "functionTerm", "problem", 
		"objectDeclaration", "init", "initEl", "basicFunctionTerm", "functionSymbol", 
		"atomicFormulaName", "literalName", "goal"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<StructureDefineContext> structureDefine() {
			return GetRuleContexts<StructureDefineContext>();
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicatesDefineContext predicatesDefine() {
			return GetRuleContext<PredicatesDefineContext>(0);
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public StructureDefineContext structureDefine(int i) {
			return GetRuleContext<StructureDefineContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterDomain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitDomain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(LB);
			State = 81; Match(DEF);
			State = 82; Match(LB);
			State = 83; Match(DOM);
			State = 84; Match(NAME);
			State = 85; Match(RB);
			State = 87;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 86; requireDefine();
				}
				break;
			}
			State = 90;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 89; typeDefine();
				}
				break;
			}
			State = 93;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 92; predicatesDefine();
				}
				break;
			}
			State = 98;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 95; structureDefine();
				}
				}
				State = 100;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 101; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireDefineContext : ParserRuleContext {
		public RequireKeyContext requireKey(int i) {
			return GetRuleContext<RequireKeyContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode REQ() { return GetToken(PlanningParser.REQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<RequireKeyContext> requireKey() {
			return GetRuleContexts<RequireKeyContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public RequireDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterRequireDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitRequireDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireDefineContext requireDefine() {
		RequireDefineContext _localctx = new RequireDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_requireDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(LB);
			State = 104; Match(COLON);
			State = 105; Match(REQ);
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 106; requireKey();
				}
				}
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==COLON );
			State = 111; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireKeyContext : ParserRuleContext {
		public StripsContext strips() {
			return GetRuleContext<StripsContext>(0);
		}
		public TypingContext typing() {
			return GetRuleContext<TypingContext>(0);
		}
		public RequireKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireKey; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterRequireKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitRequireKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireKeyContext requireKey() {
		RequireKeyContext _localctx = new RequireKeyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_requireKey);
		try {
			State = 115;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113; strips();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; typing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StripsContext : ParserRuleContext {
		public ITerminalNode STRIPS() { return GetToken(PlanningParser.STRIPS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public StripsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_strips; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterStrips(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitStrips(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrips(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StripsContext strips() {
		StripsContext _localctx = new StripsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_strips);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(COLON);
			State = 118; Match(STRIPS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypingContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPING() { return GetToken(PlanningParser.TYPING, 0); }
		public TypingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typing; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTyping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTyping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypingContext typing() {
		TypingContext _localctx = new TypingContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_typing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(COLON);
			State = 121; Match(TYPING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTypeDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTypeDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(LB);
			State = 124; Match(COLON);
			State = 125; Match(TYPE);
			State = 126; listName();
			State = 127; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public IReadOnlyList<AtomicFormulaSkeletonContext> atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningParser.PRED, 0); }
		public PredicatesDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicatesDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicatesDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicatesDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatesDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatesDefineContext predicatesDefine() {
		PredicatesDefineContext _localctx = new PredicatesDefineContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_predicatesDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(LB);
			State = 130; Match(COLON);
			State = 131; Match(PRED);
			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 132; atomicFormulaSkeleton();
				}
				}
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 137; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaSkeleton; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaSkeleton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaSkeleton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaSkeleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(LB);
			State = 140; predicate();
			State = 141; listVariable();
			State = 142; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_la = _input.La(1);
			if ( !(_la==OBJ || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ITerminalNode EITHER() { return GetToken(PlanningParser.EITHER, 0); }
		public IReadOnlyList<PrimitiveTypeContext> primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			State = 158;
			switch (_input.La(1)) {
			case OBJ:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148; primitiveType();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(LB);
				State = 150; Match(EITHER);
				State = 152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 151; primitiveType();
					}
					}
					State = 154;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OBJ || _la==NAME );
				State = 156; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDefineContext : ParserRuleContext {
		public ActionDefineContext actionDefine() {
			return GetRuleContext<ActionDefineContext>(0);
		}
		public StructureDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_structureDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterStructureDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitStructureDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDefineContext structureDefine() {
		StructureDefineContext _localctx = new StructureDefineContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_structureDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; actionDefine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ActionDefBodyContext actionDefBody() {
			return GetRuleContext<ActionDefBodyContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_actionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(LB);
			State = 163; Match(COLON);
			State = 164; Match(ACT);
			State = 165; actionSymbol();
			State = 166; Match(COLON);
			State = 167; Match(PARM);
			State = 168; Match(LB);
			State = 169; listVariable();
			State = 170; Match(RB);
			State = 171; actionDefBody();
			State = 172; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefBodyContext : ParserRuleContext {
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningParser.EFF, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefBody; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefBodyContext actionDefBody() {
		ActionDefBodyContext _localctx = new ActionDefBodyContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_actionDefBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 176; Match(COLON);
				State = 177; Match(PRE);
				State = 178; emptyOrPreGD();
				}
				break;
			}
			State = 184;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 181; Match(COLON);
				State = 182; Match(EFF);
				State = 183; emptyOrEffect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PreGDContext preGD() {
			return GetRuleContext<PreGDContext>(0);
		}
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrPreGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_emptyOrPreGD);
		try {
			State = 189;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; preGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; Match(LB);
				State = 188; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_emptyOrEffect);
		try {
			State = 194;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192; Match(LB);
				State = 193; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_listName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 196; Match(NAME);
				}
				}
				State = 199;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_listVariable);
		int _la;
		try {
			State = 216;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 201; Match(VAR);
					}
					}
					State = 206;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 207; Match(VAR);
					}
					}
					State = 210;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 212; Match(DASH);
				State = 213; type();
				State = 214; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PreGDContext preGD(int i) {
			return GetRuleContext<PreGDContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<PreGDContext> preGD() {
			return GetRuleContexts<PreGDContext>();
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public PrefGDContext prefGD() {
			return GetRuleContext<PrefGDContext>(0);
		}
		public PreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_preGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreGDContext preGD() {
		PreGDContext _localctx = new PreGDContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_preGD);
		int _la;
		try {
			State = 234;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; prefGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; Match(LB);
				State = 220; Match(AND);
				State = 224;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 221; preGD();
					}
					}
					State = 226;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 227; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228; Match(LB);
				State = 229; Match(FORALL);
				State = 230; listVariable();
				State = 231; preGD();
				State = 232; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode PREF() { return GetToken(PlanningParser.PREF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrefNameContext prefName() {
			return GetRuleContext<PrefNameContext>(0);
		}
		public PrefGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrefGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrefGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefGDContext prefGD() {
		PrefGDContext _localctx = new PrefGDContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_prefGD);
		try {
			State = 243;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237; Match(LB);
				State = 238; Match(PREF);
				State = 239; prefName();
				State = 240; gd();
				State = 241; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefNameContext prefName() {
		PrefNameContext _localctx = new PrefNameContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_prefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public LiteralTermContext literalTerm() {
			return GetRuleContext<LiteralTermContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterGd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitGd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_gd);
		int _la;
		try {
			State = 289;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; literalTerm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249; Match(LB);
				State = 250; Match(AND);
				State = 254;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 251; gd();
					}
					}
					State = 256;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 257; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 258; Match(LB);
				State = 259; Match(OR);
				State = 263;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 260; gd();
					}
					}
					State = 265;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 266; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 267; Match(LB);
				State = 268; Match(IMPLY);
				State = 269; gd();
				State = 270; gd();
				State = 271; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 273; Match(LB);
				State = 274; Match(EXISTS);
				State = 275; Match(LB);
				State = 276; listVariable();
				State = 277; Match(RB);
				State = 278; gd();
				State = 279; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 281; Match(LB);
				State = 282; Match(FORALL);
				State = 283; Match(LB);
				State = 284; listVariable();
				State = 285; Match(RB);
				State = 286; gd();
				State = 287; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaTermContext atomicFormulaTerm() {
		AtomicFormulaTermContext _localctx = new AtomicFormulaTermContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_atomicFormulaTerm);
		int _la;
		try {
			State = 310;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291; Match(LB);
				State = 292; predicate();
				State = 296;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 293; term();
					}
					}
					State = 298;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 299; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; Match(LB);
				State = 302; Match(EQ);
				State = 306;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 303; term();
					}
					}
					State = 308;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 309; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTermContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public LiteralTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterLiteralTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitLiteralTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTermContext literalTerm() {
		LiteralTermContext _localctx = new LiteralTermContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_literalTerm);
		try {
			State = 318;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; Match(LB);
				State = 314; Match(NOT);
				State = 315; atomicFormulaTerm();
				State = 316; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public FunctionTermContext functionTerm() {
			return GetRuleContext<FunctionTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_term);
		try {
			State = 323;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320; Match(NAME);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321; Match(VAR);
				}
				break;
			case FUNSYM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322; functionTerm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_effect);
		int _la;
		try {
			State = 335;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; Match(LB);
				State = 326; Match(AND);
				State = 330;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 327; cEffect();
					}
					}
					State = 332;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 333; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PEffectContext pEffect() {
			return GetRuleContext<PEffectContext>(0);
		}
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_cEffect);
		try {
			State = 350;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337; Match(LB);
				State = 338; Match(FORALL);
				State = 339; listVariable();
				State = 340; effect();
				State = 341; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; Match(LB);
				State = 344; Match(WHEN);
				State = 345; gd();
				State = 346; condEffect();
				State = 347; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 349; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public PEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PEffectContext pEffect() {
		PEffectContext _localctx = new PEffectContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_pEffect);
		try {
			State = 358;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352; Match(LB);
				State = 353; Match(NOT);
				State = 354; atomicFormulaTerm();
				State = 355; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357; atomicFormulaTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<PEffectContext> pEffect() {
			return GetRuleContexts<PEffectContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public PEffectContext pEffect(int i) {
			return GetRuleContext<PEffectContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCondEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCondEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_condEffect);
		int _la;
		try {
			State = 370;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360; Match(LB);
				State = 361; Match(AND);
				State = 365;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 362; pEffect();
					}
					}
					State = 367;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 368; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode FUNSYM() { return GetToken(PlanningParser.FUNSYM, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public FunctionTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterFunctionTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitFunctionTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTermContext functionTerm() {
		FunctionTermContext _localctx = new FunctionTermContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_functionTerm);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(FUNSYM);
			State = 376;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 373; term();
					}
					} 
				}
				State = 378;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public GoalContext goal() {
			return GetRuleContext<GoalContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problem; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterProblem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitProblem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemContext problem() {
		ProblemContext _localctx = new ProblemContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_problem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(LB);
			State = 380; Match(DEF);
			State = 381; Match(LB);
			State = 382; Match(PROM);
			State = 383; Match(NAME);
			State = 384; Match(RB);
			State = 385; Match(LB);
			State = 386; Match(COLON);
			State = 387; Match(DOM);
			State = 388; Match(NAME);
			State = 389; Match(RB);
			State = 391;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 390; requireDefine();
				}
				break;
			}
			State = 394;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 393; objectDeclaration();
				}
				break;
			}
			State = 396; init();
			State = 397; goal();
			State = 398; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(LB);
			State = 401; Match(COLON);
			State = 402; Match(OBJS);
			State = 403; listName();
			State = 404; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public InitElContext initEl(int i) {
			return GetRuleContext<InitElContext>(i);
		}
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public IReadOnlyList<InitElContext> initEl() {
			return GetRuleContexts<InitElContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(LB);
			State = 407; Match(COLON);
			State = 408; Match(INIT);
			State = 412;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 409; initEl();
				}
				}
				State = 414;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 415; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitElContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public BasicFunctionTermContext basicFunctionTerm() {
			return GetRuleContext<BasicFunctionTermContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public LiteralNameContext literalName() {
			return GetRuleContext<LiteralNameContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(PlanningParser.NUMBER, 0); }
		public ITerminalNode AT() { return GetToken(PlanningParser.AT, 0); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public InitElContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initEl; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterInitEl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitInitEl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitEl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitElContext initEl() {
		InitElContext _localctx = new InitElContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_initEl);
		try {
			State = 436;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417; literalName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418; Match(LB);
				State = 419; Match(AT);
				State = 420; Match(NUMBER);
				State = 421; literalName();
				State = 422; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 424; Match(LB);
				State = 425; Match(EQ);
				State = 426; basicFunctionTerm();
				State = 427; Match(NUMBER);
				State = 428; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 430; Match(LB);
				State = 431; Match(EQ);
				State = 432; basicFunctionTerm();
				State = 433; Match(NAME);
				State = 434; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicFunctionTermContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public FunctionSymbolContext functionSymbol() {
			return GetRuleContext<FunctionSymbolContext>(0);
		}
		public BasicFunctionTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_basicFunctionTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterBasicFunctionTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitBasicFunctionTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicFunctionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicFunctionTermContext basicFunctionTerm() {
		BasicFunctionTermContext _localctx = new BasicFunctionTermContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_basicFunctionTerm);
		int _la;
		try {
			State = 449;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; functionSymbol();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; Match(LB);
				State = 440; functionSymbol();
				State = 444;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 441; Match(NAME);
					}
					}
					State = 446;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 447; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public FunctionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionSymbol; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterFunctionSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitFunctionSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSymbolContext functionSymbol() {
		FunctionSymbolContext _localctx = new FunctionSymbolContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_functionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public AtomicFormulaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaNameContext atomicFormulaName() {
		AtomicFormulaNameContext _localctx = new AtomicFormulaNameContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_atomicFormulaName);
		int _la;
		try {
			State = 472;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453; Match(LB);
				State = 454; predicate();
				State = 458;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 455; Match(NAME);
					}
					}
					State = 460;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 461; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463; Match(LB);
				State = 464; Match(EQ);
				State = 468;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 465; Match(NAME);
					}
					}
					State = 470;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 471; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public LiteralNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterLiteralName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitLiteralName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNameContext literalName() {
		LiteralNameContext _localctx = new LiteralNameContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_literalName);
		try {
			State = 480;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475; Match(LB);
				State = 476; Match(NOT);
				State = 477; atomicFormulaName();
				State = 478; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoalContext : ParserRuleContext {
		public ITerminalNode GOAL() { return GetToken(PlanningParser.GOAL, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PreGDContext preGD() {
			return GetRuleContext<PreGDContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public GoalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_goal; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterGoal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitGoal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoalContext goal() {
		GoalContext _localctx = new GoalContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_goal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(LB);
			State = 483; Match(COLON);
			State = 484; Match(GOAL);
			State = 485; preGD();
			State = 486; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x39\x1EB\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2Z\n\x2\x3\x2\x5\x2]\n\x2\x3"+
		"\x2\x5\x2`\n\x2\x3\x2\a\x2\x63\n\x2\f\x2\xE\x2\x66\v\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x6\x3n\n\x3\r\x3\xE\x3o\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x5\x4v\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\b\x3\b\x3\b\x3\b\x6\b\x88\n\b\r\b\xE\b\x89\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x6\f\x9B\n\f"+
		"\r\f\xE\f\x9C\x3\f\x3\f\x5\f\xA1\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x10\x5\x10\xB6\n\x10\x3\x10\x3\x10\x3\x10\x5\x10\xBB\n\x10\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\xC0\n\x11\x3\x12\x3\x12\x3\x12\x5\x12\xC5\n"+
		"\x12\x3\x13\x6\x13\xC8\n\x13\r\x13\xE\x13\xC9\x3\x14\a\x14\xCD\n\x14\f"+
		"\x14\xE\x14\xD0\v\x14\x3\x14\x6\x14\xD3\n\x14\r\x14\xE\x14\xD4\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x5\x14\xDB\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\a\x15"+
		"\xE1\n\x15\f\x15\xE\x15\xE4\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x5\x15\xED\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\xF6\n\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\a\x18\xFF\n\x18\f\x18\xE\x18\x102\v\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\a\x18\x108\n\x18\f\x18\xE\x18\x10B\v\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18"+
		"\x124\n\x18\x3\x19\x3\x19\x3\x19\a\x19\x129\n\x19\f\x19\xE\x19\x12C\v"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x133\n\x19\f\x19\xE\x19"+
		"\x136\v\x19\x3\x19\x5\x19\x139\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x5\x1A\x141\n\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x146\n\x1B\x3\x1C"+
		"\x3\x1C\x3\x1C\a\x1C\x14B\n\x1C\f\x1C\xE\x1C\x14E\v\x1C\x3\x1C\x3\x1C"+
		"\x5\x1C\x152\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x161\n\x1D\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x169\n\x1E\x3\x1F\x3\x1F\x3\x1F\a"+
		"\x1F\x16E\n\x1F\f\x1F\xE\x1F\x171\v\x1F\x3\x1F\x3\x1F\x5\x1F\x175\n\x1F"+
		"\x3 \x3 \a \x179\n \f \xE \x17C\v \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x5!\x18A\n!\x3!\x5!\x18D\n!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\a#\x19D\n#\f#\xE#\x1A0\v#\x3#\x3#\x3"+
		"$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$"+
		"\x3$\x5$\x1B7\n$\x3%\x3%\x3%\x3%\a%\x1BD\n%\f%\xE%\x1C0\v%\x3%\x3%\x5"+
		"%\x1C4\n%\x3&\x3&\x3\'\x3\'\x3\'\a\'\x1CB\n\'\f\'\xE\'\x1CE\v\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\a\'\x1D5\n\'\f\'\xE\'\x1D8\v\'\x3\'\x5\'\x1DB\n\'\x3"+
		"(\x3(\x3(\x3(\x3(\x3(\x5(\x1E3\n(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x2\x2\x2"+
		"*\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2"+
		"N\x2P\x2\x2\x3\x4\x2\r\r\x33\x33\x1F9\x2R\x3\x2\x2\x2\x4i\x3\x2\x2\x2"+
		"\x6u\x3\x2\x2\x2\bw\x3\x2\x2\x2\nz\x3\x2\x2\x2\f}\x3\x2\x2\x2\xE\x83\x3"+
		"\x2\x2\x2\x10\x8D\x3\x2\x2\x2\x12\x92\x3\x2\x2\x2\x14\x94\x3\x2\x2\x2"+
		"\x16\xA0\x3\x2\x2\x2\x18\xA2\x3\x2\x2\x2\x1A\xA4\x3\x2\x2\x2\x1C\xB0\x3"+
		"\x2\x2\x2\x1E\xB5\x3\x2\x2\x2 \xBF\x3\x2\x2\x2\"\xC4\x3\x2\x2\x2$\xC7"+
		"\x3\x2\x2\x2&\xDA\x3\x2\x2\x2(\xEC\x3\x2\x2\x2*\xF5\x3\x2\x2\x2,\xF7\x3"+
		"\x2\x2\x2.\x123\x3\x2\x2\x2\x30\x138\x3\x2\x2\x2\x32\x140\x3\x2\x2\x2"+
		"\x34\x145\x3\x2\x2\x2\x36\x151\x3\x2\x2\x2\x38\x160\x3\x2\x2\x2:\x168"+
		"\x3\x2\x2\x2<\x174\x3\x2\x2\x2>\x176\x3\x2\x2\x2@\x17D\x3\x2\x2\x2\x42"+
		"\x192\x3\x2\x2\x2\x44\x198\x3\x2\x2\x2\x46\x1B6\x3\x2\x2\x2H\x1C3\x3\x2"+
		"\x2\x2J\x1C5\x3\x2\x2\x2L\x1DA\x3\x2\x2\x2N\x1E2\x3\x2\x2\x2P\x1E4\x3"+
		"\x2\x2\x2RS\a\x15\x2\x2ST\a\x5\x2\x2TU\a\x15\x2\x2UV\a\x3\x2\x2VW\a\x33"+
		"\x2\x2WY\a\x16\x2\x2XZ\x5\x4\x3\x2YX\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\\\x3\x2"+
		"\x2\x2[]\x5\f\a\x2\\[\x3\x2\x2\x2\\]\x3\x2\x2\x2]_\x3\x2\x2\x2^`\x5\xE"+
		"\b\x2_^\x3\x2\x2\x2_`\x3\x2\x2\x2`\x64\x3\x2\x2\x2\x61\x63\x5\x18\r\x2"+
		"\x62\x61\x3\x2\x2\x2\x63\x66\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3"+
		"\x2\x2\x2\x65g\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2gh\a\x16\x2\x2h\x3\x3\x2"+
		"\x2\x2ij\a\x15\x2\x2jk\a\x19\x2\x2km\a\x6\x2\x2ln\x5\x6\x4\x2ml\x3\x2"+
		"\x2\x2no\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2\x2\x2pq\x3\x2\x2\x2qr\a\x16"+
		"\x2\x2r\x5\x3\x2\x2\x2sv\x5\b\x5\x2tv\x5\n\x6\x2us\x3\x2\x2\x2ut\x3\x2"+
		"\x2\x2v\a\x3\x2\x2\x2wx\a\x19\x2\x2xy\a\x13\x2\x2y\t\x3\x2\x2\x2z{\a\x19"+
		"\x2\x2{|\a\x14\x2\x2|\v\x3\x2\x2\x2}~\a\x15\x2\x2~\x7F\a\x19\x2\x2\x7F"+
		"\x80\a\a\x2\x2\x80\x81\x5$\x13\x2\x81\x82\a\x16\x2\x2\x82\r\x3\x2\x2\x2"+
		"\x83\x84\a\x15\x2\x2\x84\x85\a\x19\x2\x2\x85\x87\a\b\x2\x2\x86\x88\x5"+
		"\x10\t\x2\x87\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2"+
		"\x89\x8A\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\a\x16\x2\x2\x8C\xF\x3"+
		"\x2\x2\x2\x8D\x8E\a\x15\x2\x2\x8E\x8F\x5\x12\n\x2\x8F\x90\x5&\x14\x2\x90"+
		"\x91\a\x16\x2\x2\x91\x11\x3\x2\x2\x2\x92\x93\a\x33\x2\x2\x93\x13\x3\x2"+
		"\x2\x2\x94\x95\t\x2\x2\x2\x95\x15\x3\x2\x2\x2\x96\xA1\x5\x14\v\x2\x97"+
		"\x98\a\x15\x2\x2\x98\x9A\a\xE\x2\x2\x99\x9B\x5\x14\v\x2\x9A\x99\x3\x2"+
		"\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D"+
		"\x9E\x3\x2\x2\x2\x9E\x9F\a\x16\x2\x2\x9F\xA1\x3\x2\x2\x2\xA0\x96\x3\x2"+
		"\x2\x2\xA0\x97\x3\x2\x2\x2\xA1\x17\x3\x2\x2\x2\xA2\xA3\x5\x1A\xE\x2\xA3"+
		"\x19\x3\x2\x2\x2\xA4\xA5\a\x15\x2\x2\xA5\xA6\a\x19\x2\x2\xA6\xA7\a\t\x2"+
		"\x2\xA7\xA8\x5\x1C\xF\x2\xA8\xA9\a\x19\x2\x2\xA9\xAA\a\n\x2\x2\xAA\xAB"+
		"\a\x15\x2\x2\xAB\xAC\x5&\x14\x2\xAC\xAD\a\x16\x2\x2\xAD\xAE\x5\x1E\x10"+
		"\x2\xAE\xAF\a\x16\x2\x2\xAF\x1B\x3\x2\x2\x2\xB0\xB1\a\x33\x2\x2\xB1\x1D"+
		"\x3\x2\x2\x2\xB2\xB3\a\x19\x2\x2\xB3\xB4\a\v\x2\x2\xB4\xB6\x5 \x11\x2"+
		"\xB5\xB2\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xBA\x3\x2\x2\x2\xB7\xB8\a"+
		"\x19\x2\x2\xB8\xB9\a\f\x2\x2\xB9\xBB\x5\"\x12\x2\xBA\xB7\x3\x2\x2\x2\xBA"+
		"\xBB\x3\x2\x2\x2\xBB\x1F\x3\x2\x2\x2\xBC\xC0\x5(\x15\x2\xBD\xBE\a\x15"+
		"\x2\x2\xBE\xC0\a\x16\x2\x2\xBF\xBC\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0"+
		"!\x3\x2\x2\x2\xC1\xC5\x5\x36\x1C\x2\xC2\xC3\a\x15\x2\x2\xC3\xC5\a\x16"+
		"\x2\x2\xC4\xC1\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5#\x3\x2\x2\x2\xC6\xC8"+
		"\a\x33\x2\x2\xC7\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xC7\x3\x2\x2"+
		"\x2\xC9\xCA\x3\x2\x2\x2\xCA%\x3\x2\x2\x2\xCB\xCD\a\x37\x2\x2\xCC\xCB\x3"+
		"\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2"+
		"\xCF\xDB\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1\xD3\a\x37\x2\x2\xD2\xD1\x3"+
		"\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2"+
		"\xD5\xD6\x3\x2\x2\x2\xD6\xD7\a\x1D\x2\x2\xD7\xD8\x5\x16\f\x2\xD8\xD9\x5"+
		"&\x14\x2\xD9\xDB\x3\x2\x2\x2\xDA\xCE\x3\x2\x2\x2\xDA\xD2\x3\x2\x2\x2\xDB"+
		"\'\x3\x2\x2\x2\xDC\xED\x5*\x16\x2\xDD\xDE\a\x15\x2\x2\xDE\xE2\a\'\x2\x2"+
		"\xDF\xE1\x5(\x15\x2\xE0\xDF\x3\x2\x2\x2\xE1\xE4\x3\x2\x2\x2\xE2\xE0\x3"+
		"\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE5\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2"+
		"\xE5\xED\a\x16\x2\x2\xE6\xE7\a\x15\x2\x2\xE7\xE8\a+\x2\x2\xE8\xE9\x5&"+
		"\x14\x2\xE9\xEA\x5(\x15\x2\xEA\xEB\a\x16\x2\x2\xEB\xED\x3\x2\x2\x2\xEC"+
		"\xDC\x3\x2\x2\x2\xEC\xDD\x3\x2\x2\x2\xEC\xE6\x3\x2\x2\x2\xED)\x3\x2\x2"+
		"\x2\xEE\xF6\x5.\x18\x2\xEF\xF0\a\x15\x2\x2\xF0\xF1\a.\x2\x2\xF1\xF2\x5"+
		",\x17\x2\xF2\xF3\x5.\x18\x2\xF3\xF4\a\x16\x2\x2\xF4\xF6\x3\x2\x2\x2\xF5"+
		"\xEE\x3\x2\x2\x2\xF5\xEF\x3\x2\x2\x2\xF6+\x3\x2\x2\x2\xF7\xF8\a\x33\x2"+
		"\x2\xF8-\x3\x2\x2\x2\xF9\x124\x5\x30\x19\x2\xFA\x124\x5\x32\x1A\x2\xFB"+
		"\xFC\a\x15\x2\x2\xFC\x100\a\'\x2\x2\xFD\xFF\x5.\x18\x2\xFE\xFD\x3\x2\x2"+
		"\x2\xFF\x102\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101"+
		"\x103\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x103\x124\a\x16\x2\x2\x104\x105"+
		"\a\x15\x2\x2\x105\x109\a(\x2\x2\x106\x108\x5.\x18\x2\x107\x106\x3\x2\x2"+
		"\x2\x108\x10B\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2"+
		"\x10A\x10C\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\x124\a\x16\x2\x2\x10D"+
		"\x10E\a\x15\x2\x2\x10E\x10F\a*\x2\x2\x10F\x110\x5.\x18\x2\x110\x111\x5"+
		".\x18\x2\x111\x112\a\x16\x2\x2\x112\x124\x3\x2\x2\x2\x113\x114\a\x15\x2"+
		"\x2\x114\x115\a,\x2\x2\x115\x116\a\x15\x2\x2\x116\x117\x5&\x14\x2\x117"+
		"\x118\a\x16\x2\x2\x118\x119\x5.\x18\x2\x119\x11A\a\x16\x2\x2\x11A\x124"+
		"\x3\x2\x2\x2\x11B\x11C\a\x15\x2\x2\x11C\x11D\a+\x2\x2\x11D\x11E\a\x15"+
		"\x2\x2\x11E\x11F\x5&\x14\x2\x11F\x120\a\x16\x2\x2\x120\x121\x5.\x18\x2"+
		"\x121\x122\a\x16\x2\x2\x122\x124\x3\x2\x2\x2\x123\xF9\x3\x2\x2\x2\x123"+
		"\xFA\x3\x2\x2\x2\x123\xFB\x3\x2\x2\x2\x123\x104\x3\x2\x2\x2\x123\x10D"+
		"\x3\x2\x2\x2\x123\x113\x3\x2\x2\x2\x123\x11B\x3\x2\x2\x2\x124/\x3\x2\x2"+
		"\x2\x125\x126\a\x15\x2\x2\x126\x12A\x5\x12\n\x2\x127\x129\x5\x34\x1B\x2"+
		"\x128\x127\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12A"+
		"\x12B\x3\x2\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D\x12E"+
		"\a\x16\x2\x2\x12E\x139\x3\x2\x2\x2\x12F\x130\a\x15\x2\x2\x130\x134\a\""+
		"\x2\x2\x131\x133\x5\x34\x1B\x2\x132\x131\x3\x2\x2\x2\x133\x136\x3\x2\x2"+
		"\x2\x134\x132\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135\x137\x3\x2\x2\x2"+
		"\x136\x134\x3\x2\x2\x2\x137\x139\a\x16\x2\x2\x138\x125\x3\x2\x2\x2\x138"+
		"\x12F\x3\x2\x2\x2\x139\x31\x3\x2\x2\x2\x13A\x141\x5\x30\x19\x2\x13B\x13C"+
		"\a\x15\x2\x2\x13C\x13D\a)\x2\x2\x13D\x13E\x5\x30\x19\x2\x13E\x13F\a\x16"+
		"\x2\x2\x13F\x141\x3\x2\x2\x2\x140\x13A\x3\x2\x2\x2\x140\x13B\x3\x2\x2"+
		"\x2\x141\x33\x3\x2\x2\x2\x142\x146\a\x33\x2\x2\x143\x146\a\x37\x2\x2\x144"+
		"\x146\x5> \x2\x145\x142\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x145\x144\x3"+
		"\x2\x2\x2\x146\x35\x3\x2\x2\x2\x147\x148\a\x15\x2\x2\x148\x14C\a\'\x2"+
		"\x2\x149\x14B\x5\x38\x1D\x2\x14A\x149\x3\x2\x2\x2\x14B\x14E\x3\x2\x2\x2"+
		"\x14C\x14A\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14F\x3\x2\x2\x2\x14E"+
		"\x14C\x3\x2\x2\x2\x14F\x152\a\x16\x2\x2\x150\x152\x5\x38\x1D\x2\x151\x147"+
		"\x3\x2\x2\x2\x151\x150\x3\x2\x2\x2\x152\x37\x3\x2\x2\x2\x153\x154\a\x15"+
		"\x2\x2\x154\x155\a+\x2\x2\x155\x156\x5&\x14\x2\x156\x157\x5\x36\x1C\x2"+
		"\x157\x158\a\x16\x2\x2\x158\x161\x3\x2\x2\x2\x159\x15A\a\x15\x2\x2\x15A"+
		"\x15B\a-\x2\x2\x15B\x15C\x5.\x18\x2\x15C\x15D\x5<\x1F\x2\x15D\x15E\a\x16"+
		"\x2\x2\x15E\x161\x3\x2\x2\x2\x15F\x161\x5:\x1E\x2\x160\x153\x3\x2\x2\x2"+
		"\x160\x159\x3\x2\x2\x2\x160\x15F\x3\x2\x2\x2\x161\x39\x3\x2\x2\x2\x162"+
		"\x163\a\x15\x2\x2\x163\x164\a)\x2\x2\x164\x165\x5\x30\x19\x2\x165\x166"+
		"\a\x16\x2\x2\x166\x169\x3\x2\x2\x2\x167\x169\x5\x30\x19\x2\x168\x162\x3"+
		"\x2\x2\x2\x168\x167\x3\x2\x2\x2\x169;\x3\x2\x2\x2\x16A\x16B\a\x15\x2\x2"+
		"\x16B\x16F\a\'\x2\x2\x16C\x16E\x5:\x1E\x2\x16D\x16C\x3\x2\x2\x2\x16E\x171"+
		"\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2\x170\x172\x3"+
		"\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x172\x175\a\x16\x2\x2\x173\x175\x5:\x1E"+
		"\x2\x174\x16A\x3\x2\x2\x2\x174\x173\x3\x2\x2\x2\x175=\x3\x2\x2\x2\x176"+
		"\x17A\a\x38\x2\x2\x177\x179\x5\x34\x1B\x2\x178\x177\x3\x2\x2\x2\x179\x17C"+
		"\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B?\x3\x2\x2"+
		"\x2\x17C\x17A\x3\x2\x2\x2\x17D\x17E\a\x15\x2\x2\x17E\x17F\a\x5\x2\x2\x17F"+
		"\x180\a\x15\x2\x2\x180\x181\a\x4\x2\x2\x181\x182\a\x33\x2\x2\x182\x183"+
		"\a\x16\x2\x2\x183\x184\a\x15\x2\x2\x184\x185\a\x19\x2\x2\x185\x186\a\x3"+
		"\x2\x2\x186\x187\a\x33\x2\x2\x187\x189\a\x16\x2\x2\x188\x18A\x5\x4\x3"+
		"\x2\x189\x188\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x18C\x3\x2\x2\x2"+
		"\x18B\x18D\x5\x42\"\x2\x18C\x18B\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D"+
		"\x18E\x3\x2\x2\x2\x18E\x18F\x5\x44#\x2\x18F\x190\x5P)\x2\x190\x191\a\x16"+
		"\x2\x2\x191\x41\x3\x2\x2\x2\x192\x193\a\x15\x2\x2\x193\x194\a\x19\x2\x2"+
		"\x194\x195\a\xF\x2\x2\x195\x196\x5$\x13\x2\x196\x197\a\x16\x2\x2\x197"+
		"\x43\x3\x2\x2\x2\x198\x199\a\x15\x2\x2\x199\x19A\a\x19\x2\x2\x19A\x19E"+
		"\a\x10\x2\x2\x19B\x19D\x5\x46$\x2\x19C\x19B\x3\x2\x2\x2\x19D\x1A0\x3\x2"+
		"\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19F\x3\x2\x2\x2\x19F\x1A1\x3\x2\x2"+
		"\x2\x1A0\x19E\x3\x2\x2\x2\x1A1\x1A2\a\x16\x2\x2\x1A2\x45\x3\x2\x2\x2\x1A3"+
		"\x1B7\x5N(\x2\x1A4\x1A5\a\x15\x2\x2\x1A5\x1A6\a\x12\x2\x2\x1A6\x1A7\a"+
		"\x35\x2\x2\x1A7\x1A8\x5N(\x2\x1A8\x1A9\a\x16\x2\x2\x1A9\x1B7\x3\x2\x2"+
		"\x2\x1AA\x1AB\a\x15\x2\x2\x1AB\x1AC\a\"\x2\x2\x1AC\x1AD\x5H%\x2\x1AD\x1AE"+
		"\a\x35\x2\x2\x1AE\x1AF\a\x16\x2\x2\x1AF\x1B7\x3\x2\x2\x2\x1B0\x1B1\a\x15"+
		"\x2\x2\x1B1\x1B2\a\"\x2\x2\x1B2\x1B3\x5H%\x2\x1B3\x1B4\a\x33\x2\x2\x1B4"+
		"\x1B5\a\x16\x2\x2\x1B5\x1B7\x3\x2\x2\x2\x1B6\x1A3\x3\x2\x2\x2\x1B6\x1A4"+
		"\x3\x2\x2\x2\x1B6\x1AA\x3\x2\x2\x2\x1B6\x1B0\x3\x2\x2\x2\x1B7G\x3\x2\x2"+
		"\x2\x1B8\x1C4\x5J&\x2\x1B9\x1BA\a\x15\x2\x2\x1BA\x1BE\x5J&\x2\x1BB\x1BD"+
		"\a\x33\x2\x2\x1BC\x1BB\x3\x2\x2\x2\x1BD\x1C0\x3\x2\x2\x2\x1BE\x1BC\x3"+
		"\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C1\x3\x2\x2\x2\x1C0\x1BE\x3\x2"+
		"\x2\x2\x1C1\x1C2\a\x16\x2\x2\x1C2\x1C4\x3\x2\x2\x2\x1C3\x1B8\x3\x2\x2"+
		"\x2\x1C3\x1B9\x3\x2\x2\x2\x1C4I\x3\x2\x2\x2\x1C5\x1C6\a\x33\x2\x2\x1C6"+
		"K\x3\x2\x2\x2\x1C7\x1C8\a\x15\x2\x2\x1C8\x1CC\x5\x12\n\x2\x1C9\x1CB\a"+
		"\x33\x2\x2\x1CA\x1C9\x3\x2\x2\x2\x1CB\x1CE\x3\x2\x2\x2\x1CC\x1CA\x3\x2"+
		"\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CF\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2"+
		"\x2\x1CF\x1D0\a\x16\x2\x2\x1D0\x1DB\x3\x2\x2\x2\x1D1\x1D2\a\x15\x2\x2"+
		"\x1D2\x1D6\a\"\x2\x2\x1D3\x1D5\a\x33\x2\x2\x1D4\x1D3\x3\x2\x2\x2\x1D5"+
		"\x1D8\x3\x2\x2\x2\x1D6\x1D4\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D9"+
		"\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D9\x1DB\a\x16\x2\x2\x1DA\x1C7\x3"+
		"\x2\x2\x2\x1DA\x1D1\x3\x2\x2\x2\x1DBM\x3\x2\x2\x2\x1DC\x1E3\x5L\'\x2\x1DD"+
		"\x1DE\a\x15\x2\x2\x1DE\x1DF\a)\x2\x2\x1DF\x1E0\x5L\'\x2\x1E0\x1E1\a\x16"+
		"\x2\x2\x1E1\x1E3\x3\x2\x2\x2\x1E2\x1DC\x3\x2\x2\x2\x1E2\x1DD\x3\x2\x2"+
		"\x2\x1E3O\x3\x2\x2\x2\x1E4\x1E5\a\x15\x2\x2\x1E5\x1E6\a\x19\x2\x2\x1E6"+
		"\x1E7\a\x11\x2\x2\x1E7\x1E8\x5(\x15\x2\x1E8\x1E9\a\x16\x2\x2\x1E9Q\x3"+
		"\x2\x2\x2/Y\\_\x64ou\x89\x9C\xA0\xB5\xBA\xBF\xC4\xC9\xCE\xD4\xDA\xE2\xEC"+
		"\xF5\x100\x109\x123\x12A\x134\x138\x140\x145\x14C\x151\x160\x168\x16F"+
		"\x174\x17A\x189\x18C\x19E\x1B6\x1BE\x1C3\x1CC\x1D6\x1DA\x1E2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
