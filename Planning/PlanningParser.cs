//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\Planning.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOM=1, PROM=2, DEF=3, AGENTID=4, TYPE=5, PRED=6, ACT=7, PARM=8, PRE=9, 
		EFF=10, OBJ=11, EITHER=12, INITKNOWLEDGE=13, INITBELIEF=14, OBJS=15, INIT=16, 
		AGENTS=17, GOAL=18, LB=19, RB=20, LSB=21, RSB=22, COLON=23, QM=24, POINT=25, 
		UL=26, DASH=27, AND=28, OR=29, NOT=30, IMPLY=31, FORALL=32, EXISTS=33, 
		WHEN=34, LETTER=35, DIGIT=36, NAME=37, CHAR=38, NUMBER=39, DECIMAL=40, 
		VAR=41, FUNSYM=42, WS=43;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'agentid'", "'types'", 
		"'predicates'", "'action'", "'parameters'", "'precondition'", "'effect'", 
		"'object'", "'either'", "'initknowledge'", "'initbelief'", "'objects'", 
		"'init'", "'agents'", "'goal'", "'('", "')'", "'['", "']'", "':'", "'?'", 
		"'.'", "'_'", "'-'", "'and'", "'or'", "'not'", "'imply'", "'forall'", 
		"'exists'", "'when'", "LETTER", "DIGIT", "NAME", "CHAR", "NUMBER", "DECIMAL", 
		"VAR", "FUNSYM", "WS"
	};
	public const int
		RULE_domain = 0, RULE_typeDefine = 1, RULE_predicatesDefine = 2, RULE_atomicFormulaSkeleton = 3, 
		RULE_predicate = 4, RULE_primitiveType = 5, RULE_type = 6, RULE_actionDefine = 7, 
		RULE_actionSymbol = 8, RULE_actionDefBody = 9, RULE_emptyOrPreGD = 10, 
		RULE_emptyOrEffect = 11, RULE_listName = 12, RULE_listVariable = 13, RULE_gd = 14, 
		RULE_atomicFormulaTerm = 15, RULE_literalTerm = 16, RULE_term = 17, RULE_effect = 18, 
		RULE_cEffect = 19, RULE_condEffect = 20, RULE_serverProblem = 21, RULE_problemName = 22, 
		RULE_domainName = 23, RULE_agentDefine = 24, RULE_objectDeclaration = 25, 
		RULE_init = 26, RULE_gdName = 27, RULE_atomicFormulaName = 28, RULE_literalName = 29, 
		RULE_clientProblem = 30, RULE_initKnowledge = 31, RULE_initBelief = 32, 
		RULE_agentId = 33;
	public static readonly string[] ruleNames = {
		"domain", "typeDefine", "predicatesDefine", "atomicFormulaSkeleton", "predicate", 
		"primitiveType", "type", "actionDefine", "actionSymbol", "actionDefBody", 
		"emptyOrPreGD", "emptyOrEffect", "listName", "listVariable", "gd", "atomicFormulaTerm", 
		"literalTerm", "term", "effect", "cEffect", "condEffect", "serverProblem", 
		"problemName", "domainName", "agentDefine", "objectDeclaration", "init", 
		"gdName", "atomicFormulaName", "literalName", "clientProblem", "initKnowledge", 
		"initBelief", "agentId"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public IReadOnlyList<ActionDefineContext> actionDefine() {
			return GetRuleContexts<ActionDefineContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicatesDefineContext predicatesDefine() {
			return GetRuleContext<PredicatesDefineContext>(0);
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ActionDefineContext actionDefine(int i) {
			return GetRuleContext<ActionDefineContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(LB);
			State = 69; Match(DEF);
			State = 70; Match(LB);
			State = 71; Match(DOM);
			State = 72; Match(NAME);
			State = 73; Match(RB);
			State = 75;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 74; typeDefine();
				}
				break;
			}
			State = 78;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 77; predicatesDefine();
				}
				break;
			}
			State = 83;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 80; actionDefine();
				}
				}
				State = 85;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 86; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(LB);
			State = 89; Match(COLON);
			State = 90; Match(TYPE);
			State = 91; listName();
			State = 92; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public IReadOnlyList<AtomicFormulaSkeletonContext> atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningParser.PRED, 0); }
		public PredicatesDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicatesDefine; }
	}

	[RuleVersion(0)]
	public PredicatesDefineContext predicatesDefine() {
		PredicatesDefineContext _localctx = new PredicatesDefineContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_predicatesDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(LB);
			State = 95; Match(COLON);
			State = 96; Match(PRED);
			State = 98;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 97; atomicFormulaSkeleton();
				}
				}
				State = 100;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 102; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaSkeleton; }
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(LB);
			State = 105; predicate();
			State = 106; listVariable();
			State = 107; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			_la = _input.La(1);
			if ( !(_la==OBJ || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ITerminalNode EITHER() { return GetToken(PlanningParser.EITHER, 0); }
		public IReadOnlyList<PrimitiveTypeContext> primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			State = 123;
			switch (_input.La(1)) {
			case OBJ:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113; primitiveType();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; Match(LB);
				State = 115; Match(EITHER);
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 116; primitiveType();
					}
					}
					State = 119;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OBJ || _la==NAME );
				State = 121; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ActionDefBodyContext actionDefBody() {
			return GetRuleContext<ActionDefBodyContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_actionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(LB);
			State = 126; Match(COLON);
			State = 127; Match(ACT);
			State = 128; actionSymbol();
			State = 129; Match(COLON);
			State = 130; Match(PARM);
			State = 131; Match(LB);
			State = 132; listVariable();
			State = 133; Match(RB);
			State = 134; actionDefBody();
			State = 135; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefBodyContext : ParserRuleContext {
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningParser.EFF, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefBody; }
	}

	[RuleVersion(0)]
	public ActionDefBodyContext actionDefBody() {
		ActionDefBodyContext _localctx = new ActionDefBodyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_actionDefBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 139; Match(COLON);
				State = 140; Match(PRE);
				State = 141; emptyOrPreGD();
				}
				break;
			}
			State = 147;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 144; Match(COLON);
				State = 145; Match(EFF);
				State = 146; emptyOrEffect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrPreGD; }
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_emptyOrPreGD);
		try {
			State = 152;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150; Match(LB);
				State = 151; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrEffect; }
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_emptyOrEffect);
		try {
			State = 157;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155; Match(LB);
				State = 156; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_listName);
		int _la;
		try {
			State = 174;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 159; Match(NAME);
					}
					}
					State = 164;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 165; Match(NAME);
					}
					}
					State = 168;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NAME );
				State = 170; Match(DASH);
				State = 171; type();
				State = 172; listName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_listVariable);
		int _la;
		try {
			State = 191;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 176; Match(VAR);
					}
					}
					State = 181;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 182; Match(VAR);
					}
					}
					State = 185;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 187; Match(DASH);
				State = 188; type();
				State = 189; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public LiteralTermContext literalTerm() {
			return GetRuleContext<LiteralTermContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_gd);
		int _la;
		try {
			State = 224;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; literalTerm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 195; Match(LB);
				State = 196; Match(AND);
				State = 198;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 197; gd();
					}
					}
					State = 200;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 202; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 204; Match(LB);
				State = 205; Match(OR);
				State = 207;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 206; gd();
					}
					}
					State = 209;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 211; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 213; Match(LB);
				State = 214; Match(NOT);
				State = 215; gd();
				State = 216; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 218; Match(LB);
				State = 219; Match(IMPLY);
				State = 220; gd();
				State = 221; gd();
				State = 222; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaTerm; }
	}

	[RuleVersion(0)]
	public AtomicFormulaTermContext atomicFormulaTerm() {
		AtomicFormulaTermContext _localctx = new AtomicFormulaTermContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_atomicFormulaTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(LB);
			State = 227; predicate();
			State = 231;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME || _la==VAR) {
				{
				{
				State = 228; term();
				}
				}
				State = 233;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 234; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTermContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public LiteralTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalTerm; }
	}

	[RuleVersion(0)]
	public LiteralTermContext literalTerm() {
		LiteralTermContext _localctx = new LiteralTermContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_literalTerm);
		try {
			State = 242;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237; Match(LB);
				State = 238; Match(NOT);
				State = 239; atomicFormulaTerm();
				State = 240; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			_la = _input.La(1);
			if ( !(_la==NAME || _la==VAR) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_effect);
		int _la;
		try {
			State = 256;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; Match(LB);
				State = 247; Match(AND);
				State = 249;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 248; cEffect();
					}
					}
					State = 251;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 253; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public LiteralTermContext literalTerm() {
			return GetRuleContext<LiteralTermContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_cEffect);
		try {
			State = 265;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; Match(LB);
				State = 259; Match(WHEN);
				State = 260; gd();
				State = 261; condEffect();
				State = 262; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264; literalTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public IReadOnlyList<LiteralTermContext> literalTerm() {
			return GetRuleContexts<LiteralTermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public LiteralTermContext literalTerm(int i) {
			return GetRuleContext<LiteralTermContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_condEffect);
		int _la;
		try {
			State = 277;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267; Match(LB);
				State = 268; Match(AND);
				State = 270;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 269; literalTerm();
					}
					}
					State = 272;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 274; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276; literalTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerProblemContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public AgentDefineContext agentDefine() {
			return GetRuleContext<AgentDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ServerProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_serverProblem; }
	}

	[RuleVersion(0)]
	public ServerProblemContext serverProblem() {
		ServerProblemContext _localctx = new ServerProblemContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_serverProblem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(LB);
			State = 280; Match(DEF);
			State = 281; Match(LB);
			State = 282; Match(PROM);
			State = 283; problemName();
			State = 284; Match(RB);
			State = 285; Match(LB);
			State = 286; Match(COLON);
			State = 287; Match(DOM);
			State = 288; domainName();
			State = 289; Match(RB);
			State = 290; agentDefine();
			State = 292;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 291; objectDeclaration();
				}
				break;
			}
			State = 294; init();
			State = 295; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problemName; }
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domainName; }
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode AGENTS() { return GetToken(PlanningParser.AGENTS, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public AgentDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentDefine; }
	}

	[RuleVersion(0)]
	public AgentDefineContext agentDefine() {
		AgentDefineContext _localctx = new AgentDefineContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_agentDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(LB);
			State = 302; Match(COLON);
			State = 303; Match(AGENTS);
			State = 305;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 304; Match(NAME);
				}
				}
				State = 307;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 309; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(LB);
			State = 312; Match(COLON);
			State = 313; Match(OBJS);
			State = 314; listName();
			State = 315; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<AtomicFormulaNameContext> atomicFormulaName() {
			return GetRuleContexts<AtomicFormulaNameContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public AtomicFormulaNameContext atomicFormulaName(int i) {
			return GetRuleContext<AtomicFormulaNameContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(LB);
			State = 318; Match(COLON);
			State = 319; Match(INIT);
			State = 323;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 320; atomicFormulaName();
				}
				}
				State = 325;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 326; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<GdNameContext> gdName() {
			return GetRuleContexts<GdNameContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public LiteralNameContext literalName() {
			return GetRuleContext<LiteralNameContext>(0);
		}
		public GdNameContext gdName(int i) {
			return GetRuleContext<GdNameContext>(i);
		}
		public GdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gdName; }
	}

	[RuleVersion(0)]
	public GdNameContext gdName() {
		GdNameContext _localctx = new GdNameContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_gdName);
		int _la;
		try {
			State = 359;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; literalName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 330; Match(LB);
				State = 331; Match(AND);
				State = 333;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 332; gdName();
					}
					}
					State = 335;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 337; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 339; Match(LB);
				State = 340; Match(OR);
				State = 342;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 341; gdName();
					}
					}
					State = 344;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 346; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 348; Match(LB);
				State = 349; Match(NOT);
				State = 350; gdName();
				State = 351; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 353; Match(LB);
				State = 354; Match(IMPLY);
				State = 355; gdName();
				State = 356; gdName();
				State = 357; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public AtomicFormulaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaName; }
	}

	[RuleVersion(0)]
	public AtomicFormulaNameContext atomicFormulaName() {
		AtomicFormulaNameContext _localctx = new AtomicFormulaNameContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_atomicFormulaName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(LB);
			State = 362; predicate();
			State = 366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NAME) {
				{
				{
				State = 363; Match(NAME);
				}
				}
				State = 368;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 369; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public LiteralNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalName; }
	}

	[RuleVersion(0)]
	public LiteralNameContext literalName() {
		LiteralNameContext _localctx = new LiteralNameContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_literalName);
		try {
			State = 377;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 371; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 372; Match(LB);
				State = 373; Match(NOT);
				State = 374; atomicFormulaName();
				State = 375; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClientProblemContext : ParserRuleContext {
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitKnowledgeContext initKnowledge() {
			return GetRuleContext<InitKnowledgeContext>(0);
		}
		public ITerminalNode AGENTID() { return GetToken(PlanningParser.AGENTID, 0); }
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public AgentDefineContext agentDefine() {
			return GetRuleContext<AgentDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public InitBeliefContext initBelief() {
			return GetRuleContext<InitBeliefContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public AgentIdContext agentId() {
			return GetRuleContext<AgentIdContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ClientProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_clientProblem; }
	}

	[RuleVersion(0)]
	public ClientProblemContext clientProblem() {
		ClientProblemContext _localctx = new ClientProblemContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_clientProblem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(LB);
			State = 380; Match(DEF);
			State = 381; Match(LB);
			State = 382; Match(PROM);
			State = 383; problemName();
			State = 384; Match(RB);
			State = 385; Match(LB);
			State = 386; Match(COLON);
			State = 387; Match(DOM);
			State = 388; domainName();
			State = 389; Match(RB);
			State = 390; agentDefine();
			State = 391; Match(LB);
			State = 392; Match(COLON);
			State = 393; Match(AGENTID);
			State = 394; agentId();
			State = 395; Match(RB);
			State = 397;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 396; objectDeclaration();
				}
				break;
			}
			State = 400;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 399; initKnowledge();
				}
				break;
			}
			State = 403;
			_la = _input.La(1);
			if (_la==LB) {
				{
				State = 402; initBelief();
				}
			}

			State = 405; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitKnowledgeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public GdNameContext gdName() {
			return GetRuleContext<GdNameContext>(0);
		}
		public ITerminalNode INITKNOWLEDGE() { return GetToken(PlanningParser.INITKNOWLEDGE, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitKnowledgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initKnowledge; }
	}

	[RuleVersion(0)]
	public InitKnowledgeContext initKnowledge() {
		InitKnowledgeContext _localctx = new InitKnowledgeContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_initKnowledge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(LB);
			State = 408; Match(COLON);
			State = 409; Match(INITKNOWLEDGE);
			State = 410; gdName();
			State = 411; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitBeliefContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode INITBELIEF() { return GetToken(PlanningParser.INITBELIEF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public GdNameContext gdName() {
			return GetRuleContext<GdNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitBeliefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initBelief; }
	}

	[RuleVersion(0)]
	public InitBeliefContext initBelief() {
		InitBeliefContext _localctx = new InitBeliefContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_initBelief);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(LB);
			State = 414; Match(COLON);
			State = 415; Match(INITBELIEF);
			State = 416; gdName();
			State = 417; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentIdContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public AgentIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentId; }
	}

	[RuleVersion(0)]
	public AgentIdContext agentId() {
		AgentIdContext _localctx = new AgentIdContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_agentId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3-\x1A8\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2N\n"+
		"\x2\x3\x2\x5\x2Q\n\x2\x3\x2\a\x2T\n\x2\f\x2\xE\x2W\v\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x6\x4\x65\n"+
		"\x4\r\x4\xE\x4\x66\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x6\bx\n\b\r\b\xE\by\x3\b\x3\b\x5\b~"+
		"\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\v\x3\v\x3\v\x5\v\x91\n\v\x3\v\x3\v\x3\v\x5\v\x96\n\v\x3\f\x3"+
		"\f\x3\f\x5\f\x9B\n\f\x3\r\x3\r\x3\r\x5\r\xA0\n\r\x3\xE\a\xE\xA3\n\xE\f"+
		"\xE\xE\xE\xA6\v\xE\x3\xE\x6\xE\xA9\n\xE\r\xE\xE\xE\xAA\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x5\xE\xB1\n\xE\x3\xF\a\xF\xB4\n\xF\f\xF\xE\xF\xB7\v\xF\x3\xF"+
		"\x6\xF\xBA\n\xF\r\xF\xE\xF\xBB\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xC2\n\xF"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x6\x10\xC9\n\x10\r\x10\xE\x10\xCA"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x6\x10\xD2\n\x10\r\x10\xE\x10\xD3"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x5\x10\xE3\n\x10\x3\x11\x3\x11\x3\x11\a\x11\xE8"+
		"\n\x11\f\x11\xE\x11\xEB\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\xF5\n\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x6"+
		"\x14\xFC\n\x14\r\x14\xE\x14\xFD\x3\x14\x3\x14\x3\x14\x5\x14\x103\n\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x10C\n\x15\x3"+
		"\x16\x3\x16\x3\x16\x6\x16\x111\n\x16\r\x16\xE\x16\x112\x3\x16\x3\x16\x3"+
		"\x16\x5\x16\x118\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x127\n\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x6"+
		"\x1A\x134\n\x1A\r\x1A\xE\x1A\x135\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x144\n\x1C\f\x1C"+
		"\xE\x1C\x147\v\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x6"+
		"\x1D\x150\n\x1D\r\x1D\xE\x1D\x151\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x6"+
		"\x1D\x159\n\x1D\r\x1D\xE\x1D\x15A\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x16A\n\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\a\x1E\x16F\n\x1E\f\x1E\xE\x1E\x172\v\x1E\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x17C\n\x1F\x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x5 \x190\n \x3 \x5 \x193\n \x3 \x5 \x196\n \x3 \x3 \x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x2\x2\x2$\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36"+
		"\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x2\x4\x4\x2\r\r\'\'\x4\x2\'\'"+
		"++\x1B2\x2\x46\x3\x2\x2\x2\x4Z\x3\x2\x2\x2\x6`\x3\x2\x2\x2\bj\x3\x2\x2"+
		"\x2\no\x3\x2\x2\x2\fq\x3\x2\x2\x2\xE}\x3\x2\x2\x2\x10\x7F\x3\x2\x2\x2"+
		"\x12\x8B\x3\x2\x2\x2\x14\x90\x3\x2\x2\x2\x16\x9A\x3\x2\x2\x2\x18\x9F\x3"+
		"\x2\x2\x2\x1A\xB0\x3\x2\x2\x2\x1C\xC1\x3\x2\x2\x2\x1E\xE2\x3\x2\x2\x2"+
		" \xE4\x3\x2\x2\x2\"\xF4\x3\x2\x2\x2$\xF6\x3\x2\x2\x2&\x102\x3\x2\x2\x2"+
		"(\x10B\x3\x2\x2\x2*\x117\x3\x2\x2\x2,\x119\x3\x2\x2\x2.\x12B\x3\x2\x2"+
		"\x2\x30\x12D\x3\x2\x2\x2\x32\x12F\x3\x2\x2\x2\x34\x139\x3\x2\x2\x2\x36"+
		"\x13F\x3\x2\x2\x2\x38\x169\x3\x2\x2\x2:\x16B\x3\x2\x2\x2<\x17B\x3\x2\x2"+
		"\x2>\x17D\x3\x2\x2\x2@\x199\x3\x2\x2\x2\x42\x19F\x3\x2\x2\x2\x44\x1A5"+
		"\x3\x2\x2\x2\x46G\a\x15\x2\x2GH\a\x5\x2\x2HI\a\x15\x2\x2IJ\a\x3\x2\x2"+
		"JK\a\'\x2\x2KM\a\x16\x2\x2LN\x5\x4\x3\x2ML\x3\x2\x2\x2MN\x3\x2\x2\x2N"+
		"P\x3\x2\x2\x2OQ\x5\x6\x4\x2PO\x3\x2\x2\x2PQ\x3\x2\x2\x2QU\x3\x2\x2\x2"+
		"RT\x5\x10\t\x2SR\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2"+
		"VX\x3\x2\x2\x2WU\x3\x2\x2\x2XY\a\x16\x2\x2Y\x3\x3\x2\x2\x2Z[\a\x15\x2"+
		"\x2[\\\a\x19\x2\x2\\]\a\a\x2\x2]^\x5\x1A\xE\x2^_\a\x16\x2\x2_\x5\x3\x2"+
		"\x2\x2`\x61\a\x15\x2\x2\x61\x62\a\x19\x2\x2\x62\x64\a\b\x2\x2\x63\x65"+
		"\x5\b\x5\x2\x64\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2"+
		"\x66g\x3\x2\x2\x2gh\x3\x2\x2\x2hi\a\x16\x2\x2i\a\x3\x2\x2\x2jk\a\x15\x2"+
		"\x2kl\x5\n\x6\x2lm\x5\x1C\xF\x2mn\a\x16\x2\x2n\t\x3\x2\x2\x2op\a\'\x2"+
		"\x2p\v\x3\x2\x2\x2qr\t\x2\x2\x2r\r\x3\x2\x2\x2s~\x5\f\a\x2tu\a\x15\x2"+
		"\x2uw\a\xE\x2\x2vx\x5\f\a\x2wv\x3\x2\x2\x2xy\x3\x2\x2\x2yw\x3\x2\x2\x2"+
		"yz\x3\x2\x2\x2z{\x3\x2\x2\x2{|\a\x16\x2\x2|~\x3\x2\x2\x2}s\x3\x2\x2\x2"+
		"}t\x3\x2\x2\x2~\xF\x3\x2\x2\x2\x7F\x80\a\x15\x2\x2\x80\x81\a\x19\x2\x2"+
		"\x81\x82\a\t\x2\x2\x82\x83\x5\x12\n\x2\x83\x84\a\x19\x2\x2\x84\x85\a\n"+
		"\x2\x2\x85\x86\a\x15\x2\x2\x86\x87\x5\x1C\xF\x2\x87\x88\a\x16\x2\x2\x88"+
		"\x89\x5\x14\v\x2\x89\x8A\a\x16\x2\x2\x8A\x11\x3\x2\x2\x2\x8B\x8C\a\'\x2"+
		"\x2\x8C\x13\x3\x2\x2\x2\x8D\x8E\a\x19\x2\x2\x8E\x8F\a\v\x2\x2\x8F\x91"+
		"\x5\x16\f\x2\x90\x8D\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x95\x3\x2\x2"+
		"\x2\x92\x93\a\x19\x2\x2\x93\x94\a\f\x2\x2\x94\x96\x5\x18\r\x2\x95\x92"+
		"\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x15\x3\x2\x2\x2\x97\x9B\x5\x1E\x10"+
		"\x2\x98\x99\a\x15\x2\x2\x99\x9B\a\x16\x2\x2\x9A\x97\x3\x2\x2\x2\x9A\x98"+
		"\x3\x2\x2\x2\x9B\x17\x3\x2\x2\x2\x9C\xA0\x5&\x14\x2\x9D\x9E\a\x15\x2\x2"+
		"\x9E\xA0\a\x16\x2\x2\x9F\x9C\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\x19\x3"+
		"\x2\x2\x2\xA1\xA3\a\'\x2\x2\xA2\xA1\x3\x2\x2\x2\xA3\xA6\x3\x2\x2\x2\xA4"+
		"\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xB1\x3\x2\x2\x2\xA6\xA4\x3\x2"+
		"\x2\x2\xA7\xA9\a\'\x2\x2\xA8\xA7\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xA8"+
		"\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\a\x1D\x2"+
		"\x2\xAD\xAE\x5\xE\b\x2\xAE\xAF\x5\x1A\xE\x2\xAF\xB1\x3\x2\x2\x2\xB0\xA4"+
		"\x3\x2\x2\x2\xB0\xA8\x3\x2\x2\x2\xB1\x1B\x3\x2\x2\x2\xB2\xB4\a+\x2\x2"+
		"\xB3\xB2\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3"+
		"\x2\x2\x2\xB6\xC2\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xBA\a+\x2\x2\xB9"+
		"\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2"+
		"\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\a\x1D\x2\x2\xBE\xBF\x5\xE\b\x2\xBF"+
		"\xC0\x5\x1C\xF\x2\xC0\xC2\x3\x2\x2\x2\xC1\xB5\x3\x2\x2\x2\xC1\xB9\x3\x2"+
		"\x2\x2\xC2\x1D\x3\x2\x2\x2\xC3\xE3\x5 \x11\x2\xC4\xE3\x5\"\x12\x2\xC5"+
		"\xC6\a\x15\x2\x2\xC6\xC8\a\x1E\x2\x2\xC7\xC9\x5\x1E\x10\x2\xC8\xC7\x3"+
		"\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2"+
		"\xCB\xCC\x3\x2\x2\x2\xCC\xCD\a\x16\x2\x2\xCD\xE3\x3\x2\x2\x2\xCE\xCF\a"+
		"\x15\x2\x2\xCF\xD1\a\x1F\x2\x2\xD0\xD2\x5\x1E\x10\x2\xD1\xD0\x3\x2\x2"+
		"\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD5"+
		"\x3\x2\x2\x2\xD5\xD6\a\x16\x2\x2\xD6\xE3\x3\x2\x2\x2\xD7\xD8\a\x15\x2"+
		"\x2\xD8\xD9\a \x2\x2\xD9\xDA\x5\x1E\x10\x2\xDA\xDB\a\x16\x2\x2\xDB\xE3"+
		"\x3\x2\x2\x2\xDC\xDD\a\x15\x2\x2\xDD\xDE\a!\x2\x2\xDE\xDF\x5\x1E\x10\x2"+
		"\xDF\xE0\x5\x1E\x10\x2\xE0\xE1\a\x16\x2\x2\xE1\xE3\x3\x2\x2\x2\xE2\xC3"+
		"\x3\x2\x2\x2\xE2\xC4\x3\x2\x2\x2\xE2\xC5\x3\x2\x2\x2\xE2\xCE\x3\x2\x2"+
		"\x2\xE2\xD7\x3\x2\x2\x2\xE2\xDC\x3\x2\x2\x2\xE3\x1F\x3\x2\x2\x2\xE4\xE5"+
		"\a\x15\x2\x2\xE5\xE9\x5\n\x6\x2\xE6\xE8\x5$\x13\x2\xE7\xE6\x3\x2\x2\x2"+
		"\xE8\xEB\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEC\x3"+
		"\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEC\xED\a\x16\x2\x2\xED!\x3\x2\x2\x2\xEE"+
		"\xF5\x5 \x11\x2\xEF\xF0\a\x15\x2\x2\xF0\xF1\a \x2\x2\xF1\xF2\x5 \x11\x2"+
		"\xF2\xF3\a\x16\x2\x2\xF3\xF5\x3\x2\x2\x2\xF4\xEE\x3\x2\x2\x2\xF4\xEF\x3"+
		"\x2\x2\x2\xF5#\x3\x2\x2\x2\xF6\xF7\t\x3\x2\x2\xF7%\x3\x2\x2\x2\xF8\xF9"+
		"\a\x15\x2\x2\xF9\xFB\a\x1E\x2\x2\xFA\xFC\x5(\x15\x2\xFB\xFA\x3\x2\x2\x2"+
		"\xFC\xFD\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF\x3"+
		"\x2\x2\x2\xFF\x100\a\x16\x2\x2\x100\x103\x3\x2\x2\x2\x101\x103\x5(\x15"+
		"\x2\x102\xF8\x3\x2\x2\x2\x102\x101\x3\x2\x2\x2\x103\'\x3\x2\x2\x2\x104"+
		"\x105\a\x15\x2\x2\x105\x106\a$\x2\x2\x106\x107\x5\x1E\x10\x2\x107\x108"+
		"\x5*\x16\x2\x108\x109\a\x16\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x10C\x5\""+
		"\x12\x2\x10B\x104\x3\x2\x2\x2\x10B\x10A\x3\x2\x2\x2\x10C)\x3\x2\x2\x2"+
		"\x10D\x10E\a\x15\x2\x2\x10E\x110\a\x1E\x2\x2\x10F\x111\x5\"\x12\x2\x110"+
		"\x10F\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x113"+
		"\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x115\a\x16\x2\x2\x115\x118\x3"+
		"\x2\x2\x2\x116\x118\x5\"\x12\x2\x117\x10D\x3\x2\x2\x2\x117\x116\x3\x2"+
		"\x2\x2\x118+\x3\x2\x2\x2\x119\x11A\a\x15\x2\x2\x11A\x11B\a\x5\x2\x2\x11B"+
		"\x11C\a\x15\x2\x2\x11C\x11D\a\x4\x2\x2\x11D\x11E\x5.\x18\x2\x11E\x11F"+
		"\a\x16\x2\x2\x11F\x120\a\x15\x2\x2\x120\x121\a\x19\x2\x2\x121\x122\a\x3"+
		"\x2\x2\x122\x123\x5\x30\x19\x2\x123\x124\a\x16\x2\x2\x124\x126\x5\x32"+
		"\x1A\x2\x125\x127\x5\x34\x1B\x2\x126\x125\x3\x2\x2\x2\x126\x127\x3\x2"+
		"\x2\x2\x127\x128\x3\x2\x2\x2\x128\x129\x5\x36\x1C\x2\x129\x12A\a\x16\x2"+
		"\x2\x12A-\x3\x2\x2\x2\x12B\x12C\a\'\x2\x2\x12C/\x3\x2\x2\x2\x12D\x12E"+
		"\a\'\x2\x2\x12E\x31\x3\x2\x2\x2\x12F\x130\a\x15\x2\x2\x130\x131\a\x19"+
		"\x2\x2\x131\x133\a\x13\x2\x2\x132\x134\a\'\x2\x2\x133\x132\x3\x2\x2\x2"+
		"\x134\x135\x3\x2\x2\x2\x135\x133\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136"+
		"\x137\x3\x2\x2\x2\x137\x138\a\x16\x2\x2\x138\x33\x3\x2\x2\x2\x139\x13A"+
		"\a\x15\x2\x2\x13A\x13B\a\x19\x2\x2\x13B\x13C\a\x11\x2\x2\x13C\x13D\x5"+
		"\x1A\xE\x2\x13D\x13E\a\x16\x2\x2\x13E\x35\x3\x2\x2\x2\x13F\x140\a\x15"+
		"\x2\x2\x140\x141\a\x19\x2\x2\x141\x145\a\x12\x2\x2\x142\x144\x5:\x1E\x2"+
		"\x143\x142\x3\x2\x2\x2\x144\x147\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x145"+
		"\x146\x3\x2\x2\x2\x146\x148\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x148\x149"+
		"\a\x16\x2\x2\x149\x37\x3\x2\x2\x2\x14A\x16A\x5:\x1E\x2\x14B\x16A\x5<\x1F"+
		"\x2\x14C\x14D\a\x15\x2\x2\x14D\x14F\a\x1E\x2\x2\x14E\x150\x5\x38\x1D\x2"+
		"\x14F\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x151"+
		"\x152\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\a\x16\x2\x2\x154\x16A"+
		"\x3\x2\x2\x2\x155\x156\a\x15\x2\x2\x156\x158\a\x1F\x2\x2\x157\x159\x5"+
		"\x38\x1D\x2\x158\x157\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A\x158\x3\x2"+
		"\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15D\a\x16\x2"+
		"\x2\x15D\x16A\x3\x2\x2\x2\x15E\x15F\a\x15\x2\x2\x15F\x160\a \x2\x2\x160"+
		"\x161\x5\x38\x1D\x2\x161\x162\a\x16\x2\x2\x162\x16A\x3\x2\x2\x2\x163\x164"+
		"\a\x15\x2\x2\x164\x165\a!\x2\x2\x165\x166\x5\x38\x1D\x2\x166\x167\x5\x38"+
		"\x1D\x2\x167\x168\a\x16\x2\x2\x168\x16A\x3\x2\x2\x2\x169\x14A\x3\x2\x2"+
		"\x2\x169\x14B\x3\x2\x2\x2\x169\x14C\x3\x2\x2\x2\x169\x155\x3\x2\x2\x2"+
		"\x169\x15E\x3\x2\x2\x2\x169\x163\x3\x2\x2\x2\x16A\x39\x3\x2\x2\x2\x16B"+
		"\x16C\a\x15\x2\x2\x16C\x170\x5\n\x6\x2\x16D\x16F\a\'\x2\x2\x16E\x16D\x3"+
		"\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x170\x171\x3\x2"+
		"\x2\x2\x171\x173\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173\x174\a\x16\x2"+
		"\x2\x174;\x3\x2\x2\x2\x175\x17C\x5:\x1E\x2\x176\x177\a\x15\x2\x2\x177"+
		"\x178\a \x2\x2\x178\x179\x5:\x1E\x2\x179\x17A\a\x16\x2\x2\x17A\x17C\x3"+
		"\x2\x2\x2\x17B\x175\x3\x2\x2\x2\x17B\x176\x3\x2\x2\x2\x17C=\x3\x2\x2\x2"+
		"\x17D\x17E\a\x15\x2\x2\x17E\x17F\a\x5\x2\x2\x17F\x180\a\x15\x2\x2\x180"+
		"\x181\a\x4\x2\x2\x181\x182\x5.\x18\x2\x182\x183\a\x16\x2\x2\x183\x184"+
		"\a\x15\x2\x2\x184\x185\a\x19\x2\x2\x185\x186\a\x3\x2\x2\x186\x187\x5\x30"+
		"\x19\x2\x187\x188\a\x16\x2\x2\x188\x189\x5\x32\x1A\x2\x189\x18A\a\x15"+
		"\x2\x2\x18A\x18B\a\x19\x2\x2\x18B\x18C\a\x6\x2\x2\x18C\x18D\x5\x44#\x2"+
		"\x18D\x18F\a\x16\x2\x2\x18E\x190\x5\x34\x1B\x2\x18F\x18E\x3\x2\x2\x2\x18F"+
		"\x190\x3\x2\x2\x2\x190\x192\x3\x2\x2\x2\x191\x193\x5@!\x2\x192\x191\x3"+
		"\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x195\x3\x2\x2\x2\x194\x196\x5\x42"+
		"\"\x2\x195\x194\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2"+
		"\x197\x198\a\x16\x2\x2\x198?\x3\x2\x2\x2\x199\x19A\a\x15\x2\x2\x19A\x19B"+
		"\a\x19\x2\x2\x19B\x19C\a\xF\x2\x2\x19C\x19D\x5\x38\x1D\x2\x19D\x19E\a"+
		"\x16\x2\x2\x19E\x41\x3\x2\x2\x2\x19F\x1A0\a\x15\x2\x2\x1A0\x1A1\a\x19"+
		"\x2\x2\x1A1\x1A2\a\x10\x2\x2\x1A2\x1A3\x5\x38\x1D\x2\x1A3\x1A4\a\x16\x2"+
		"\x2\x1A4\x43\x3\x2\x2\x2\x1A5\x1A6\a\'\x2\x2\x1A6\x45\x3\x2\x2\x2\'MP"+
		"U\x66y}\x90\x95\x9A\x9F\xA4\xAA\xB0\xB5\xBB\xC1\xCA\xD3\xE2\xE9\xF4\xFD"+
		"\x102\x10B\x112\x117\x126\x135\x145\x151\x15A\x169\x170\x17B\x18F\x192"+
		"\x195";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
