//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\edgolog\LanguageRecognition\Planning.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOMAIN=1, PROBLEM=2, DEFINE=3, AGENTID=4, CONST=5, TYPE=6, PREDICATE=7, 
		ACTION=8, EVENT=9, EVENTS=10, PLDEGREE=11, EVENTMODEL=12, PARAMETER=13, 
		PRECONDITION=14, RESPONSE=15, OBSERVATION=16, MIN=17, MAX=18, NUMS=19, 
		EFFECT=20, OBJECT=21, AGENT=22, EITHER=23, INITKNOWLEDGE=24, INITBELIEF=25, 
		SEQ=26, IF=27, WHILE=28, KNOW=29, BEL=30, OBJS=31, INIT=32, GOAL=33, LB=34, 
		RB=35, LSB=36, RSB=37, COLON=38, QM=39, POINT=40, UL=41, MINUS=42, PLUS=43, 
		MULT=44, DIV=45, EQ=46, NEQ=47, LT=48, LEQ=49, GT=50, GEQ=51, AND=52, 
		OR=53, NOT=54, ONEOF=55, IMPLY=56, FORALL=57, EXISTS=58, WHEN=59, NAME=60, 
		INTEGER=61, VAR=62, WS=63;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'agentid'", "'constants'", 
		"'types'", "'predicates'", "'action'", "'event'", "'events'", "'pldegree'", 
		"'eventmodel'", "'parameters'", "'precondition'", "'response'", "'observation'", 
		"'min'", "'max'", "'numbers'", "'effect'", "'object'", "'agent'", "'either'", 
		"'initknowledge'", "'initbelief'", "'seq'", "'if'", "'while'", "'know'", 
		"'bel'", "'objects'", "'init'", "'goal'", "'('", "')'", "'['", "']'", 
		"':'", "'?'", "'.'", "'_'", "'-'", "'+'", "'*'", "'/'", "'='", "'!='", 
		"'<'", "'<='", "'>'", "'>='", "'and'", "'or'", "'not'", "'oneof'", "'imply'", 
		"'forall'", "'exists'", "'when'", "NAME", "INTEGER", "VAR", "WS"
	};
	public const int
		RULE_domain = 0, RULE_numericDefine = 1, RULE_numericSymbol = 2, RULE_typeDefine = 3, 
		RULE_predicateDefine = 4, RULE_atomFormSkeleton = 5, RULE_predicate = 6, 
		RULE_typeDeclaration = 7, RULE_type = 8, RULE_eventDefine = 9, RULE_eventSymbol = 10, 
		RULE_responseDefine = 11, RULE_responseSymbol = 12, RULE_actionDefine = 13, 
		RULE_actionSymbol = 14, RULE_observationDefine = 15, RULE_observationSymbol = 16, 
		RULE_eventModel = 17, RULE_plGdEvent = 18, RULE_plDeg = 19, RULE_emptyOrPreGD = 20, 
		RULE_emptyOrEffect = 21, RULE_listName = 22, RULE_listVariable = 23, RULE_oneofDefine = 24, 
		RULE_gd = 25, RULE_termAtomForm = 26, RULE_termLiteral = 27, RULE_gdEvent = 28, 
		RULE_termEventForm = 29, RULE_constTerm = 30, RULE_term = 31, RULE_effect = 32, 
		RULE_cEffect = 33, RULE_condEffect = 34, RULE_serverProblem = 35, RULE_problemName = 36, 
		RULE_domainName = 37, RULE_agentDefine = 38, RULE_objectDeclaration = 39, 
		RULE_numericSetting = 40, RULE_init = 41, RULE_constTermAtomForm = 42, 
		RULE_clientProblem = 43, RULE_initKnowledge = 44, RULE_initBelief = 45, 
		RULE_agentId = 46, RULE_program = 47, RULE_subjectGd = 48;
	public static readonly string[] ruleNames = {
		"domain", "numericDefine", "numericSymbol", "typeDefine", "predicateDefine", 
		"atomFormSkeleton", "predicate", "typeDeclaration", "type", "eventDefine", 
		"eventSymbol", "responseDefine", "responseSymbol", "actionDefine", "actionSymbol", 
		"observationDefine", "observationSymbol", "eventModel", "plGdEvent", "plDeg", 
		"emptyOrPreGD", "emptyOrEffect", "listName", "listVariable", "oneofDefine", 
		"gd", "termAtomForm", "termLiteral", "gdEvent", "termEventForm", "constTerm", 
		"term", "effect", "cEffect", "condEffect", "serverProblem", "problemName", 
		"domainName", "agentDefine", "objectDeclaration", "numericSetting", "init", 
		"constTermAtomForm", "clientProblem", "initKnowledge", "initBelief", "agentId", 
		"program", "subjectGd"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ObservationDefineContext observationDefine(int i) {
			return GetRuleContext<ObservationDefineContext>(i);
		}
		public EventDefineContext eventDefine(int i) {
			return GetRuleContext<EventDefineContext>(i);
		}
		public ITerminalNode DOMAIN() { return GetToken(PlanningParser.DOMAIN, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public NumericDefineContext numericDefine() {
			return GetRuleContext<NumericDefineContext>(0);
		}
		public PredicateDefineContext predicateDefine() {
			return GetRuleContext<PredicateDefineContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public IReadOnlyList<ObservationDefineContext> observationDefine() {
			return GetRuleContexts<ObservationDefineContext>();
		}
		public ITerminalNode DEFINE() { return GetToken(PlanningParser.DEFINE, 0); }
		public ActionDefineContext actionDefine(int i) {
			return GetRuleContext<ActionDefineContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public IReadOnlyList<EventDefineContext> eventDefine() {
			return GetRuleContexts<EventDefineContext>();
		}
		public IReadOnlyList<ActionDefineContext> actionDefine() {
			return GetRuleContexts<ActionDefineContext>();
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domain; } }
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(LB);
			State = 99; Match(DEFINE);
			State = 100; Match(LB);
			State = 101; Match(DOMAIN);
			State = 102; Match(NAME);
			State = 103; Match(RB);
			State = 105;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 104; numericDefine();
				}
				break;
			}
			State = 108;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 107; typeDefine();
				}
				break;
			}
			State = 111;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 110; predicateDefine();
				}
				break;
			}
			State = 116;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 113; eventDefine();
					}
					} 
				}
				State = 118;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			State = 122;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 119; actionDefine();
					}
					} 
				}
				State = 124;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 125; observationDefine();
				}
				}
				State = 130;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 131; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericDefineContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public NumericSymbolContext numericSymbol(int i) {
			return GetRuleContext<NumericSymbolContext>(i);
		}
		public ITerminalNode NUMS() { return GetToken(PlanningParser.NUMS, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<NumericSymbolContext> numericSymbol() {
			return GetRuleContexts<NumericSymbolContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public NumericDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericDefine; } }
	}

	[RuleVersion(0)]
	public NumericDefineContext numericDefine() {
		NumericDefineContext _localctx = new NumericDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_numericDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(LB);
			State = 134; Match(COLON);
			State = 135; Match(NUMS);
			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 136; numericSymbol();
				}
				}
				State = 139;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 141; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public NumericSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericSymbol; } }
	}

	[RuleVersion(0)]
	public NumericSymbolContext numericSymbol() {
		NumericSymbolContext _localctx = new NumericSymbolContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_numericSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public IReadOnlyList<TypeDeclarationContext> typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefine; } }
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_typeDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(LB);
			State = 146; Match(COLON);
			State = 147; Match(TYPE);
			State = 149;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 148; typeDeclaration();
				}
				}
				State = 151;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB || _la==NAME );
			State = 153; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateDefineContext : ParserRuleContext {
		public AtomFormSkeletonContext atomFormSkeleton(int i) {
			return GetRuleContext<AtomFormSkeletonContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PREDICATE() { return GetToken(PlanningParser.PREDICATE, 0); }
		public IReadOnlyList<AtomFormSkeletonContext> atomFormSkeleton() {
			return GetRuleContexts<AtomFormSkeletonContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredicateDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateDefine; } }
	}

	[RuleVersion(0)]
	public PredicateDefineContext predicateDefine() {
		PredicateDefineContext _localctx = new PredicateDefineContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_predicateDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(LB);
			State = 156; Match(COLON);
			State = 157; Match(PREDICATE);
			State = 159;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 158; atomFormSkeleton();
				}
				}
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 163; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomFormSkeletonContext : ParserRuleContext {
		public OneofDefineContext oneofDefine() {
			return GetRuleContext<OneofDefineContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomFormSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomFormSkeleton; } }
	}

	[RuleVersion(0)]
	public AtomFormSkeletonContext atomFormSkeleton() {
		AtomFormSkeletonContext _localctx = new AtomFormSkeletonContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_atomFormSkeleton);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(LB);
			State = 166; predicate();
			State = 167; listVariable();
			State = 169;
			_la = _input.La(1);
			if (_la==ONEOF) {
				{
				State = 168; oneofDefine();
				}
			}

			State = 171; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public IReadOnlyList<ConstTermContext> constTerm() {
			return GetRuleContexts<ConstTermContext>();
		}
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ConstTermContext constTerm(int i) {
			return GetRuleContext<ConstTermContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_typeDeclaration);
		try {
			State = 182;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; Match(NAME);
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176; Match(LB);
				State = 177; Match(NAME);
				State = 178; constTerm();
				State = 179; constTerm();
				State = 180; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode AGENT() { return GetToken(PlanningParser.AGENT, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlanningParser.OBJECT, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OBJECT) | (1L << AGENT) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefineContext : ParserRuleContext {
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode PARAMETER() { return GetToken(PlanningParser.PARAMETER, 0); }
		public ITerminalNode PRECONDITION() { return GetToken(PlanningParser.PRECONDITION, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode EFFECT() { return GetToken(PlanningParser.EFFECT, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public EventSymbolContext eventSymbol() {
			return GetRuleContext<EventSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(PlanningParser.EVENT, 0); }
		public EventDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDefine; } }
	}

	[RuleVersion(0)]
	public EventDefineContext eventDefine() {
		EventDefineContext _localctx = new EventDefineContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_eventDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(LB);
			State = 187; Match(COLON);
			State = 188; Match(EVENT);
			State = 189; eventSymbol();
			State = 196;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 190; Match(COLON);
				State = 191; Match(PARAMETER);
				State = 192; Match(LB);
				State = 193; listVariable();
				State = 194; Match(RB);
				}
				break;
			}
			State = 201;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 198; Match(COLON);
				State = 199; Match(PRECONDITION);
				State = 200; emptyOrPreGD();
				}
				break;
			}
			State = 206;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 203; Match(COLON);
				State = 204; Match(EFFECT);
				State = 205; emptyOrEffect();
				}
			}

			State = 208; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public EventSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventSymbol; } }
	}

	[RuleVersion(0)]
	public EventSymbolContext eventSymbol() {
		EventSymbolContext _localctx = new EventSymbolContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_eventSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResponseDefineContext : ParserRuleContext {
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode RESPONSE() { return GetToken(PlanningParser.RESPONSE, 0); }
		public ITerminalNode PARAMETER() { return GetToken(PlanningParser.PARAMETER, 0); }
		public ResponseSymbolContext responseSymbol() {
			return GetRuleContext<ResponseSymbolContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public EventModelContext eventModel() {
			return GetRuleContext<EventModelContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode EVENTMODEL() { return GetToken(PlanningParser.EVENTMODEL, 0); }
		public ResponseDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_responseDefine; } }
	}

	[RuleVersion(0)]
	public ResponseDefineContext responseDefine() {
		ResponseDefineContext _localctx = new ResponseDefineContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_responseDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(LB);
			State = 213; Match(COLON);
			State = 214; Match(RESPONSE);
			State = 215; responseSymbol();
			State = 222;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 216; Match(COLON);
				State = 217; Match(PARAMETER);
				State = 218; Match(LB);
				State = 219; listVariable();
				State = 220; Match(RB);
				}
				break;
			}
			State = 224; Match(COLON);
			State = 225; Match(EVENTMODEL);
			State = 226; eventModel();
			State = 227; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResponseSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ResponseSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_responseSymbol; } }
	}

	[RuleVersion(0)]
	public ResponseSymbolContext responseSymbol() {
		ResponseSymbolContext _localctx = new ResponseSymbolContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_responseSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode ACTION() { return GetToken(PlanningParser.ACTION, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode PARAMETER() { return GetToken(PlanningParser.PARAMETER, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ResponseDefineContext responseDefine(int i) {
			return GetRuleContext<ResponseDefineContext>(i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ResponseDefineContext> responseDefine() {
			return GetRuleContexts<ResponseDefineContext>();
		}
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionDefine; } }
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_actionDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(LB);
			State = 232; Match(COLON);
			State = 233; Match(ACTION);
			State = 234; actionSymbol();
			State = 241;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 235; Match(COLON);
				State = 236; Match(PARAMETER);
				State = 237; Match(LB);
				State = 238; listVariable();
				State = 239; Match(RB);
				}
			}

			State = 244;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 243; responseDefine();
				}
				}
				State = 246;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 248; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionSymbol; } }
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObservationDefineContext : ParserRuleContext {
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode PARAMETER() { return GetToken(PlanningParser.PARAMETER, 0); }
		public ITerminalNode PRECONDITION() { return GetToken(PlanningParser.PRECONDITION, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public EventModelContext eventModel() {
			return GetRuleContext<EventModelContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode OBSERVATION() { return GetToken(PlanningParser.OBSERVATION, 0); }
		public ObservationSymbolContext observationSymbol() {
			return GetRuleContext<ObservationSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode EVENTMODEL() { return GetToken(PlanningParser.EVENTMODEL, 0); }
		public ObservationDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_observationDefine; } }
	}

	[RuleVersion(0)]
	public ObservationDefineContext observationDefine() {
		ObservationDefineContext _localctx = new ObservationDefineContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_observationDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(LB);
			State = 253; Match(COLON);
			State = 254; Match(OBSERVATION);
			State = 255; observationSymbol();
			State = 262;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 256; Match(COLON);
				State = 257; Match(PARAMETER);
				State = 258; Match(LB);
				State = 259; listVariable();
				State = 260; Match(RB);
				}
				break;
			}
			State = 267;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				State = 264; Match(COLON);
				State = 265; Match(PRECONDITION);
				State = 266; emptyOrPreGD();
				}
				break;
			}
			State = 269; Match(COLON);
			State = 270; Match(EVENTMODEL);
			State = 271; eventModel();
			State = 272; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObservationSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ObservationSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_observationSymbol; } }
	}

	[RuleVersion(0)]
	public ObservationSymbolContext observationSymbol() {
		ObservationSymbolContext _localctx = new ObservationSymbolContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_observationSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventModelContext : ParserRuleContext {
		public GdEventContext gdEvent() {
			return GetRuleContext<GdEventContext>(0);
		}
		public IReadOnlyList<PlGdEventContext> plGdEvent() {
			return GetRuleContexts<PlGdEventContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PlGdEventContext plGdEvent(int i) {
			return GetRuleContext<PlGdEventContext>(i);
		}
		public EventModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventModel; } }
	}

	[RuleVersion(0)]
	public EventModelContext eventModel() {
		EventModelContext _localctx = new EventModelContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_eventModel);
		int _la;
		try {
			State = 285;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; gdEvent();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; Match(LB);
				State = 279;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 278; plGdEvent();
					}
					}
					State = 281;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 283; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlGdEventContext : ParserRuleContext {
		public ITerminalNode EVENTS() { return GetToken(PlanningParser.EVENTS, 0); }
		public GdEventContext gdEvent() {
			return GetRuleContext<GdEventContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode PLDEGREE() { return GetToken(PlanningParser.PLDEGREE, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PlDegContext plDeg() {
			return GetRuleContext<PlDegContext>(0);
		}
		public PlGdEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plGdEvent; } }
	}

	[RuleVersion(0)]
	public PlGdEventContext plGdEvent() {
		PlGdEventContext _localctx = new PlGdEventContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_plGdEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(LB);
			State = 288; Match(COLON);
			State = 289; Match(PLDEGREE);
			State = 290; plDeg();
			State = 291; Match(COLON);
			State = 292; Match(EVENTS);
			State = 293; gdEvent();
			State = 294; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlDegContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public PlDegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plDeg; } }
	}

	[RuleVersion(0)]
	public PlDegContext plDeg() {
		PlDegContext _localctx = new PlDegContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_plDeg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyOrPreGD; } }
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_emptyOrPreGD);
		try {
			State = 301;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299; Match(LB);
				State = 300; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyOrEffect; } }
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_emptyOrEffect);
		try {
			State = 306;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304; Match(LB);
				State = 305; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listName; } }
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_listName);
		int _la;
		try {
			State = 323;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 308; Match(NAME);
					}
					}
					State = 313;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 314; Match(NAME);
					}
					}
					State = 317;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NAME );
				State = 319; Match(MINUS);
				State = 320; type();
				State = 321; listName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listVariable; } }
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_listVariable);
		int _la;
		try {
			State = 340;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 325; Match(VAR);
					}
					}
					State = 330;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 331; Match(VAR);
					}
					}
					State = 334;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 336; Match(MINUS);
				State = 337; type();
				State = 338; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofDefineContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public ITerminalNode ONEOF() { return GetToken(PlanningParser.ONEOF, 0); }
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public OneofDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofDefine; } }
	}

	[RuleVersion(0)]
	public OneofDefineContext oneofDefine() {
		OneofDefineContext _localctx = new OneofDefineContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_oneofDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(ONEOF);
			State = 344;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 343; Match(VAR);
				}
				}
				State = 346;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==VAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public TermAtomFormContext termAtomForm() {
			return GetRuleContext<TermAtomFormContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gd; } }
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_gd);
		int _la;
		try {
			State = 394;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; termAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; Match(LB);
				State = 350; Match(AND);
				State = 352;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 351; gd();
					}
					}
					State = 354;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 356; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 358; Match(LB);
				State = 359; Match(OR);
				State = 361;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 360; gd();
					}
					}
					State = 363;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 365; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 367; Match(LB);
				State = 368; Match(NOT);
				State = 369; gd();
				State = 370; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 372; Match(LB);
				State = 373; Match(IMPLY);
				State = 374; gd();
				State = 375; gd();
				State = 376; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 378; Match(LB);
				State = 379; Match(EXISTS);
				State = 380; Match(LB);
				State = 381; listVariable();
				State = 382; Match(RB);
				State = 383; gd();
				State = 384; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 386; Match(LB);
				State = 387; Match(FORALL);
				State = 388; Match(LB);
				State = 389; listVariable();
				State = 390; Match(RB);
				State = 391; gd();
				State = 392; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermAtomFormContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(PlanningParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(PlanningParser.NEQ, 0); }
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(PlanningParser.LEQ, 0); }
		public ITerminalNode LT() { return GetToken(PlanningParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(PlanningParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public TermAtomFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termAtomForm; } }
	}

	[RuleVersion(0)]
	public TermAtomFormContext termAtomForm() {
		TermAtomFormContext _localctx = new TermAtomFormContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_termAtomForm);
		int _la;
		try {
			State = 442;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 396; Match(LB);
				State = 397; predicate();
				State = 401;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER) | (1L << VAR))) != 0)) {
					{
					{
					State = 398; term();
					}
					}
					State = 403;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 404; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; Match(LB);
				State = 407; Match(EQ);
				State = 408; term();
				State = 409; term();
				State = 410; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 412; Match(LB);
				State = 413; Match(NEQ);
				State = 414; term();
				State = 415; term();
				State = 416; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418; Match(LB);
				State = 419; Match(LT);
				State = 420; term();
				State = 421; term();
				State = 422; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 424; Match(LB);
				State = 425; Match(LEQ);
				State = 426; term();
				State = 427; term();
				State = 428; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 430; Match(LB);
				State = 431; Match(GT);
				State = 432; term();
				State = 433; term();
				State = 434; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 436; Match(LB);
				State = 437; Match(GEQ);
				State = 438; term();
				State = 439; term();
				State = 440; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermLiteralContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public TermAtomFormContext termAtomForm() {
			return GetRuleContext<TermAtomFormContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public TermLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termLiteral; } }
	}

	[RuleVersion(0)]
	public TermLiteralContext termLiteral() {
		TermLiteralContext _localctx = new TermLiteralContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_termLiteral);
		try {
			State = 450;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444; termAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445; Match(LB);
				State = 446; Match(NOT);
				State = 447; termAtomForm();
				State = 448; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdEventContext : ParserRuleContext {
		public TermEventFormContext termEventForm() {
			return GetRuleContext<TermEventFormContext>(0);
		}
		public GdEventContext gdEvent(int i) {
			return GetRuleContext<GdEventContext>(i);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public IReadOnlyList<GdEventContext> gdEvent() {
			return GetRuleContexts<GdEventContext>();
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public GdEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gdEvent; } }
	}

	[RuleVersion(0)]
	public GdEventContext gdEvent() {
		GdEventContext _localctx = new GdEventContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_gdEvent);
		int _la;
		try {
			State = 498;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 452; termEventForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 453; Match(LB);
				State = 454; Match(NOT);
				State = 455; gdEvent();
				State = 456; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 458; Match(LB);
				State = 459; Match(AND);
				State = 461;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 460; gdEvent();
					}
					}
					State = 463;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 465; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 467; Match(LB);
				State = 468; Match(OR);
				State = 470;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 469; gdEvent();
					}
					}
					State = 472;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 474; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 476; Match(LB);
				State = 477; Match(IMPLY);
				State = 478; gdEvent();
				State = 479; gdEvent();
				State = 480; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 482; Match(LB);
				State = 483; Match(EXISTS);
				State = 484; Match(LB);
				State = 485; listVariable();
				State = 486; Match(RB);
				State = 487; gdEvent();
				State = 488; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 490; Match(LB);
				State = 491; Match(FORALL);
				State = 492; Match(LB);
				State = 493; listVariable();
				State = 494; Match(RB);
				State = 495; gdEvent();
				State = 496; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermEventFormContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(PlanningParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(PlanningParser.NEQ, 0); }
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(PlanningParser.LEQ, 0); }
		public EventSymbolContext eventSymbol() {
			return GetRuleContext<EventSymbolContext>(0);
		}
		public ITerminalNode LT() { return GetToken(PlanningParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(PlanningParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public TermEventFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termEventForm; } }
	}

	[RuleVersion(0)]
	public TermEventFormContext termEventForm() {
		TermEventFormContext _localctx = new TermEventFormContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_termEventForm);
		int _la;
		try {
			State = 546;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 500; Match(LB);
				State = 501; eventSymbol();
				State = 505;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER) | (1L << VAR))) != 0)) {
					{
					{
					State = 502; term();
					}
					}
					State = 507;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 508; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; Match(LB);
				State = 511; Match(EQ);
				State = 512; term();
				State = 513; term();
				State = 514; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 516; Match(LB);
				State = 517; Match(NEQ);
				State = 518; term();
				State = 519; term();
				State = 520; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 522; Match(LB);
				State = 523; Match(LT);
				State = 524; term();
				State = 525; term();
				State = 526; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 528; Match(LB);
				State = 529; Match(LEQ);
				State = 530; term();
				State = 531; term();
				State = 532; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 534; Match(LB);
				State = 535; Match(GT);
				State = 536; term();
				State = 537; term();
				State = 538; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 540; Match(LB);
				State = 541; Match(GEQ);
				State = 542; term();
				State = 543; term();
				State = 544; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public IReadOnlyList<ConstTermContext> constTerm() {
			return GetRuleContexts<ConstTermContext>();
		}
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ConstTermContext constTerm(int i) {
			return GetRuleContext<ConstTermContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(PlanningParser.PLUS, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ConstTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constTerm; } }
	}

	[RuleVersion(0)]
	public ConstTermContext constTerm() {
		ConstTermContext _localctx = new ConstTermContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_constTerm);
		try {
			State = 567;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548; Match(NAME);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 549; Match(INTEGER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 550; Match(LB);
				State = 551; Match(MINUS);
				State = 552; constTerm();
				State = 553; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 555; Match(LB);
				State = 556; Match(MINUS);
				State = 557; constTerm();
				State = 558; constTerm();
				State = 559; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 561; Match(LB);
				State = 562; Match(PLUS);
				State = 563; constTerm();
				State = 564; constTerm();
				State = 565; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(PlanningParser.PLUS, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_term);
		try {
			State = 589;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 569; Match(NAME);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 570; Match(VAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 571; Match(INTEGER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 572; Match(LB);
				State = 573; Match(MINUS);
				State = 574; term();
				State = 575; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 577; Match(LB);
				State = 578; Match(MINUS);
				State = 579; term();
				State = 580; term();
				State = 581; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 583; Match(LB);
				State = 584; Match(PLUS);
				State = 585; term();
				State = 586; term();
				State = 587; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effect; } }
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_effect);
		int _la;
		try {
			State = 601;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 591; Match(LB);
				State = 592; Match(AND);
				State = 594;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 593; cEffect();
					}
					}
					State = 596;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 598; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 600; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public TermLiteralContext termLiteral() {
			return GetRuleContext<TermLiteralContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cEffect; } }
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_cEffect);
		try {
			State = 618;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 603; Match(LB);
				State = 604; Match(FORALL);
				State = 605; Match(LB);
				State = 606; listVariable();
				State = 607; Match(RB);
				State = 608; effect();
				State = 609; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611; Match(LB);
				State = 612; Match(WHEN);
				State = 613; gd();
				State = 614; condEffect();
				State = 615; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 617; termLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public IReadOnlyList<TermLiteralContext> termLiteral() {
			return GetRuleContexts<TermLiteralContext>();
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public TermLiteralContext termLiteral(int i) {
			return GetRuleContext<TermLiteralContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condEffect; } }
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_condEffect);
		int _la;
		try {
			State = 630;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 620; Match(LB);
				State = 621; Match(AND);
				State = 623;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 622; termLiteral();
					}
					}
					State = 625;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 627; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 629; termLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerProblemContext : ParserRuleContext {
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode DOMAIN() { return GetToken(PlanningParser.DOMAIN, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PROBLEM() { return GetToken(PlanningParser.PROBLEM, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEFINE() { return GetToken(PlanningParser.DEFINE, 0); }
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public NumericSettingContext numericSetting() {
			return GetRuleContext<NumericSettingContext>(0);
		}
		public ServerProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverProblem; } }
	}

	[RuleVersion(0)]
	public ServerProblemContext serverProblem() {
		ServerProblemContext _localctx = new ServerProblemContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_serverProblem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; Match(LB);
			State = 633; Match(DEFINE);
			State = 634; Match(LB);
			State = 635; Match(PROBLEM);
			State = 636; problemName();
			State = 637; Match(RB);
			State = 638; Match(LB);
			State = 639; Match(COLON);
			State = 640; Match(DOMAIN);
			State = 641; domainName();
			State = 642; Match(RB);
			State = 644;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 643; numericSetting();
				}
				break;
			}
			State = 647;
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 646; objectDeclaration();
				}
				break;
			}
			State = 649; init();
			State = 650; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_problemName; } }
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domainName; } }
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentDefineContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode AGENT() { return GetToken(PlanningParser.AGENT, 0); }
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public AgentDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentDefine; } }
	}

	[RuleVersion(0)]
	public AgentDefineContext agentDefine() {
		AgentDefineContext _localctx = new AgentDefineContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_agentDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656; Match(LB);
			State = 657; Match(COLON);
			State = 658; Match(AGENT);
			State = 660;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 659; Match(NAME);
				}
				}
				State = 662;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 664; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDeclaration; } }
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; Match(LB);
			State = 667; Match(COLON);
			State = 668; Match(OBJS);
			State = 669; listName();
			State = 670; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericSettingContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> INTEGER() { return GetTokens(PlanningParser.INTEGER); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public NumericSymbolContext numericSymbol(int i) {
			return GetRuleContext<NumericSymbolContext>(i);
		}
		public ITerminalNode NUMS() { return GetToken(PlanningParser.NUMS, 0); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(PlanningParser.INTEGER, i);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public IReadOnlyList<NumericSymbolContext> numericSymbol() {
			return GetRuleContexts<NumericSymbolContext>();
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public NumericSettingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericSetting; } }
	}

	[RuleVersion(0)]
	public NumericSettingContext numericSetting() {
		NumericSettingContext _localctx = new NumericSettingContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_numericSetting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672; Match(LB);
			State = 673; Match(COLON);
			State = 674; Match(NUMS);
			State = 680;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 675; Match(LB);
				State = 676; numericSymbol();
				State = 677; Match(INTEGER);
				State = 678; Match(RB);
				}
				}
				State = 682;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 684; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public IReadOnlyList<ConstTermAtomFormContext> constTermAtomForm() {
			return GetRuleContexts<ConstTermAtomFormContext>();
		}
		public ConstTermAtomFormContext constTermAtomForm(int i) {
			return GetRuleContext<ConstTermAtomFormContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686; Match(LB);
			State = 687; Match(COLON);
			State = 688; Match(INIT);
			State = 692;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 689; constTermAtomForm();
				}
				}
				State = 694;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 695; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermAtomFormContext : ParserRuleContext {
		public ITerminalNode GEQ() { return GetToken(PlanningParser.GEQ, 0); }
		public IReadOnlyList<ConstTermContext> constTerm() {
			return GetRuleContexts<ConstTermContext>();
		}
		public ITerminalNode LEQ() { return GetToken(PlanningParser.LEQ, 0); }
		public ConstTermContext constTerm(int i) {
			return GetRuleContext<ConstTermContext>(i);
		}
		public ITerminalNode LT() { return GetToken(PlanningParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(PlanningParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ConstTermAtomFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constTermAtomForm; } }
	}

	[RuleVersion(0)]
	public ConstTermAtomFormContext constTermAtomForm() {
		ConstTermAtomFormContext _localctx = new ConstTermAtomFormContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_constTermAtomForm);
		int _la;
		try {
			State = 737;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 697; Match(LB);
				State = 698; predicate();
				State = 702;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER))) != 0)) {
					{
					{
					State = 699; constTerm();
					}
					}
					State = 704;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 705; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 707; Match(LB);
				State = 708; Match(EQ);
				State = 709; constTerm();
				State = 710; constTerm();
				State = 711; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 713; Match(LB);
				State = 714; Match(LT);
				State = 715; constTerm();
				State = 716; constTerm();
				State = 717; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 719; Match(LB);
				State = 720; Match(LEQ);
				State = 721; constTerm();
				State = 722; constTerm();
				State = 723; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 725; Match(LB);
				State = 726; Match(GT);
				State = 727; constTerm();
				State = 728; constTerm();
				State = 729; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 731; Match(LB);
				State = 732; Match(GEQ);
				State = 733; constTerm();
				State = 734; constTerm();
				State = 735; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClientProblemContext : ParserRuleContext {
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public AgentIdContext agentId() {
			return GetRuleContext<AgentIdContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode DOMAIN() { return GetToken(PlanningParser.DOMAIN, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PROBLEM() { return GetToken(PlanningParser.PROBLEM, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode AGENTID() { return GetToken(PlanningParser.AGENTID, 0); }
		public AgentDefineContext agentDefine() {
			return GetRuleContext<AgentDefineContext>(0);
		}
		public InitKnowledgeContext initKnowledge() {
			return GetRuleContext<InitKnowledgeContext>(0);
		}
		public ITerminalNode DEFINE() { return GetToken(PlanningParser.DEFINE, 0); }
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public InitBeliefContext initBelief() {
			return GetRuleContext<InitBeliefContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public NumericSettingContext numericSetting() {
			return GetRuleContext<NumericSettingContext>(0);
		}
		public ClientProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clientProblem; } }
	}

	[RuleVersion(0)]
	public ClientProblemContext clientProblem() {
		ClientProblemContext _localctx = new ClientProblemContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_clientProblem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(LB);
			State = 740; Match(DEFINE);
			State = 741; Match(LB);
			State = 742; Match(PROBLEM);
			State = 743; problemName();
			State = 744; Match(RB);
			State = 745; Match(LB);
			State = 746; Match(COLON);
			State = 747; Match(DOMAIN);
			State = 748; domainName();
			State = 749; Match(RB);
			State = 750; agentDefine();
			State = 751; Match(LB);
			State = 752; Match(COLON);
			State = 753; Match(AGENTID);
			State = 754; agentId();
			State = 755; Match(RB);
			State = 757;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 756; objectDeclaration();
				}
				break;
			}
			State = 760;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 759; numericSetting();
				}
				break;
			}
			State = 763;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 762; initKnowledge();
				}
				break;
			}
			State = 766;
			_la = _input.La(1);
			if (_la==LB) {
				{
				State = 765; initBelief();
				}
			}

			State = 768; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitKnowledgeContext : ParserRuleContext {
		public ITerminalNode INITKNOWLEDGE() { return GetToken(PlanningParser.INITKNOWLEDGE, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public InitKnowledgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initKnowledge; } }
	}

	[RuleVersion(0)]
	public InitKnowledgeContext initKnowledge() {
		InitKnowledgeContext _localctx = new InitKnowledgeContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_initKnowledge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770; Match(LB);
			State = 771; Match(COLON);
			State = 772; Match(INITKNOWLEDGE);
			State = 773; gd();
			State = 774; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitBeliefContext : ParserRuleContext {
		public ITerminalNode INITBELIEF() { return GetToken(PlanningParser.INITBELIEF, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public InitBeliefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initBelief; } }
	}

	[RuleVersion(0)]
	public InitBeliefContext initBelief() {
		InitBeliefContext _localctx = new InitBeliefContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_initBelief);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776; Match(LB);
			State = 777; Match(COLON);
			State = 778; Match(INITBELIEF);
			State = 779; gd();
			State = 780; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentIdContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public AgentIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentId; } }
	}

	[RuleVersion(0)]
	public AgentIdContext agentId() {
		AgentIdContext _localctx = new AgentIdContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_agentId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		public ITerminalNode IF() { return GetToken(PlanningParser.IF, 0); }
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public IReadOnlyList<ProgramContext> program() {
			return GetRuleContexts<ProgramContext>();
		}
		public ITerminalNode SEQ() { return GetToken(PlanningParser.SEQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode WHILE() { return GetToken(PlanningParser.WHILE, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public SubjectGdContext subjectGd() {
			return GetRuleContext<SubjectGdContext>(0);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_program);
		int _la;
		try {
			State = 818;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 784; Match(LB);
				State = 785; actionSymbol();
				State = 789;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER) | (1L << VAR))) != 0)) {
					{
					{
					State = 786; term();
					}
					}
					State = 791;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 792; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 794; Match(LB);
				State = 795; Match(SEQ);
				State = 797;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 796; program();
					}
					}
					State = 799;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 801; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 803; Match(LB);
				State = 804; Match(IF);
				State = 805; subjectGd();
				State = 806; program();
				State = 808;
				_la = _input.La(1);
				if (_la==LB) {
					{
					State = 807; program();
					}
				}

				State = 810; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 812; Match(LB);
				State = 813; Match(WHILE);
				State = 814; subjectGd();
				State = 815; program();
				State = 816; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectGdContext : ParserRuleContext {
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public SubjectGdContext subjectGd(int i) {
			return GetRuleContext<SubjectGdContext>(i);
		}
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode BEL() { return GetToken(PlanningParser.BEL, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode KNOW() { return GetToken(PlanningParser.KNOW, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public IReadOnlyList<SubjectGdContext> subjectGd() {
			return GetRuleContexts<SubjectGdContext>();
		}
		public SubjectGdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subjectGd; } }
	}

	[RuleVersion(0)]
	public SubjectGdContext subjectGd() {
		SubjectGdContext _localctx = new SubjectGdContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_subjectGd);
		int _la;
		try {
			State = 869;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 820; Match(LB);
				State = 821; Match(KNOW);
				State = 822; gd();
				State = 823; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 825; Match(LB);
				State = 826; Match(BEL);
				State = 827; gd();
				State = 828; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 830; Match(LB);
				State = 831; Match(NOT);
				State = 832; subjectGd();
				State = 833; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 835; Match(LB);
				State = 836; Match(AND);
				State = 838;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 837; subjectGd();
					}
					}
					State = 840;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 842; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 844; Match(LB);
				State = 845; Match(OR);
				State = 847;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 846; subjectGd();
					}
					}
					State = 849;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 851; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 853; Match(LB);
				State = 854; Match(EXISTS);
				State = 855; Match(LB);
				State = 856; listVariable();
				State = 857; Match(RB);
				State = 858; subjectGd();
				State = 859; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 861; Match(LB);
				State = 862; Match(FORALL);
				State = 863; Match(LB);
				State = 864; listVariable();
				State = 865; Match(RB);
				State = 866; subjectGd();
				State = 867; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x41\x36A\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2l\n\x2\x3\x2\x5"+
		"\x2o\n\x2\x3\x2\x5\x2r\n\x2\x3\x2\a\x2u\n\x2\f\x2\xE\x2x\v\x2\x3\x2\a"+
		"\x2{\n\x2\f\x2\xE\x2~\v\x2\x3\x2\a\x2\x81\n\x2\f\x2\xE\x2\x84\v\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3\x8C\n\x3\r\x3\xE\x3\x8D\x3\x3"+
		"\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\x98\n\x5\r\x5\xE\x5\x99"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x6\x6\xA2\n\x6\r\x6\xE\x6\xA3\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x5\a\xAC\n\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xB9\n\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xC7\n\v\x3\v\x3\v\x3\v\x5\v\xCC\n"+
		"\v\x3\v\x3\v\x3\v\x5\v\xD1\n\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xE1\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x5\xF\xF4\n\xF\x3\xF\x6\xF\xF7\n\xF\r\xF\xE\xF\xF8\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x5\x11\x109\n\x11\x3\x11\x3\x11\x3\x11\x5\x11\x10E\n\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x6\x13"+
		"\x11A\n\x13\r\x13\xE\x13\x11B\x3\x13\x3\x13\x5\x13\x120\n\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x130\n\x16\x3\x17\x3\x17\x3\x17\x5\x17\x135"+
		"\n\x17\x3\x18\a\x18\x138\n\x18\f\x18\xE\x18\x13B\v\x18\x3\x18\x6\x18\x13E"+
		"\n\x18\r\x18\xE\x18\x13F\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x146\n\x18"+
		"\x3\x19\a\x19\x149\n\x19\f\x19\xE\x19\x14C\v\x19\x3\x19\x6\x19\x14F\n"+
		"\x19\r\x19\xE\x19\x150\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x157\n\x19\x3"+
		"\x1A\x3\x1A\x6\x1A\x15B\n\x1A\r\x1A\xE\x1A\x15C\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x6\x1B\x163\n\x1B\r\x1B\xE\x1B\x164\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x6\x1B\x16C\n\x1B\r\x1B\xE\x1B\x16D\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x18D\n\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\a\x1C\x192\n\x1C\f\x1C\xE\x1C\x195\v\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x1BD\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x5\x1D\x1C5\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x6\x1E\x1D0\n\x1E\r\x1E\xE\x1E\x1D1\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x6\x1E\x1D9\n\x1E\r\x1E\xE\x1E\x1DA\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x1F5\n\x1E\x3\x1F\x3\x1F\x3\x1F\a\x1F\x1FA"+
		"\n\x1F\f\x1F\xE\x1F\x1FD\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x5\x1F\x225\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x23A\n \x3!\x3!\x3!\x3!\x3!"+
		"\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x250"+
		"\n!\x3\"\x3\"\x3\"\x6\"\x255\n\"\r\"\xE\"\x256\x3\"\x3\"\x3\"\x5\"\x25C"+
		"\n\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x26D"+
		"\n#\x3$\x3$\x3$\x6$\x272\n$\r$\xE$\x273\x3$\x3$\x3$\x5$\x279\n$\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x287\n%\x3%\x5%\x28A\n%"+
		"\x3%\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3(\x3(\x6(\x297\n(\r(\xE(\x298"+
		"\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x6*\x2AB"+
		"\n*\r*\xE*\x2AC\x3*\x3*\x3+\x3+\x3+\x3+\a+\x2B5\n+\f+\xE+\x2B8\v+\x3+"+
		"\x3+\x3,\x3,\x3,\a,\x2BF\n,\f,\xE,\x2C2\v,\x3,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,"+
		"\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x2E4\n,\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x2F8\n-\x3-\x5-\x2FB"+
		"\n-\x3-\x5-\x2FE\n-\x3-\x5-\x301\n-\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x3"+
		"/\x3/\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\a\x31\x316\n"+
		"\x31\f\x31\xE\x31\x319\v\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x6\x31"+
		"\x320\n\x31\r\x31\xE\x31\x321\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31"+
		"\x3\x31\x5\x31\x32B\n\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x5\x31\x335\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x6\x32\x349\n\x32\r\x32\xE\x32\x34A\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x6\x32\x352\n\x32\r\x32\xE\x32\x353\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x368\n\x32\x3\x32\x2\x2\x2"+
		"\x33\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32"+
		"\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2"+
		"L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x2\x3\x4\x2\x17\x18"+
		">>\x3A1\x2\x64\x3\x2\x2\x2\x4\x87\x3\x2\x2\x2\x6\x91\x3\x2\x2\x2\b\x93"+
		"\x3\x2\x2\x2\n\x9D\x3\x2\x2\x2\f\xA7\x3\x2\x2\x2\xE\xAF\x3\x2\x2\x2\x10"+
		"\xB8\x3\x2\x2\x2\x12\xBA\x3\x2\x2\x2\x14\xBC\x3\x2\x2\x2\x16\xD4\x3\x2"+
		"\x2\x2\x18\xD6\x3\x2\x2\x2\x1A\xE7\x3\x2\x2\x2\x1C\xE9\x3\x2\x2\x2\x1E"+
		"\xFC\x3\x2\x2\x2 \xFE\x3\x2\x2\x2\"\x114\x3\x2\x2\x2$\x11F\x3\x2\x2\x2"+
		"&\x121\x3\x2\x2\x2(\x12A\x3\x2\x2\x2*\x12F\x3\x2\x2\x2,\x134\x3\x2\x2"+
		"\x2.\x145\x3\x2\x2\x2\x30\x156\x3\x2\x2\x2\x32\x158\x3\x2\x2\x2\x34\x18C"+
		"\x3\x2\x2\x2\x36\x1BC\x3\x2\x2\x2\x38\x1C4\x3\x2\x2\x2:\x1F4\x3\x2\x2"+
		"\x2<\x224\x3\x2\x2\x2>\x239\x3\x2\x2\x2@\x24F\x3\x2\x2\x2\x42\x25B\x3"+
		"\x2\x2\x2\x44\x26C\x3\x2\x2\x2\x46\x278\x3\x2\x2\x2H\x27A\x3\x2\x2\x2"+
		"J\x28E\x3\x2\x2\x2L\x290\x3\x2\x2\x2N\x292\x3\x2\x2\x2P\x29C\x3\x2\x2"+
		"\x2R\x2A2\x3\x2\x2\x2T\x2B0\x3\x2\x2\x2V\x2E3\x3\x2\x2\x2X\x2E5\x3\x2"+
		"\x2\x2Z\x304\x3\x2\x2\x2\\\x30A\x3\x2\x2\x2^\x310\x3\x2\x2\x2`\x334\x3"+
		"\x2\x2\x2\x62\x367\x3\x2\x2\x2\x64\x65\a$\x2\x2\x65\x66\a\x5\x2\x2\x66"+
		"g\a$\x2\x2gh\a\x3\x2\x2hi\a>\x2\x2ik\a%\x2\x2jl\x5\x4\x3\x2kj\x3\x2\x2"+
		"\x2kl\x3\x2\x2\x2ln\x3\x2\x2\x2mo\x5\b\x5\x2nm\x3\x2\x2\x2no\x3\x2\x2"+
		"\x2oq\x3\x2\x2\x2pr\x5\n\x6\x2qp\x3\x2\x2\x2qr\x3\x2\x2\x2rv\x3\x2\x2"+
		"\x2su\x5\x14\v\x2ts\x3\x2\x2\x2ux\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2"+
		"\x2w|\x3\x2\x2\x2xv\x3\x2\x2\x2y{\x5\x1C\xF\x2zy\x3\x2\x2\x2{~\x3\x2\x2"+
		"\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}\x82\x3\x2\x2\x2~|\x3\x2\x2\x2\x7F\x81"+
		"\x5 \x11\x2\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2"+
		"\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x86\a"+
		"%\x2\x2\x86\x3\x3\x2\x2\x2\x87\x88\a$\x2\x2\x88\x89\a(\x2\x2\x89\x8B\a"+
		"\x15\x2\x2\x8A\x8C\x5\x6\x4\x2\x8B\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2"+
		"\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x90\a"+
		"%\x2\x2\x90\x5\x3\x2\x2\x2\x91\x92\a>\x2\x2\x92\a\x3\x2\x2\x2\x93\x94"+
		"\a$\x2\x2\x94\x95\a(\x2\x2\x95\x97\a\b\x2\x2\x96\x98\x5\x10\t\x2\x97\x96"+
		"\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2"+
		"\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\a%\x2\x2\x9C\t\x3\x2\x2\x2\x9D\x9E\a$"+
		"\x2\x2\x9E\x9F\a(\x2\x2\x9F\xA1\a\t\x2\x2\xA0\xA2\x5\f\a\x2\xA1\xA0\x3"+
		"\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2"+
		"\xA4\xA5\x3\x2\x2\x2\xA5\xA6\a%\x2\x2\xA6\v\x3\x2\x2\x2\xA7\xA8\a$\x2"+
		"\x2\xA8\xA9\x5\xE\b\x2\xA9\xAB\x5\x30\x19\x2\xAA\xAC\x5\x32\x1A\x2\xAB"+
		"\xAA\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAE\a%\x2"+
		"\x2\xAE\r\x3\x2\x2\x2\xAF\xB0\a>\x2\x2\xB0\xF\x3\x2\x2\x2\xB1\xB9\a>\x2"+
		"\x2\xB2\xB3\a$\x2\x2\xB3\xB4\a>\x2\x2\xB4\xB5\x5> \x2\xB5\xB6\x5> \x2"+
		"\xB6\xB7\a%\x2\x2\xB7\xB9\x3\x2\x2\x2\xB8\xB1\x3\x2\x2\x2\xB8\xB2\x3\x2"+
		"\x2\x2\xB9\x11\x3\x2\x2\x2\xBA\xBB\t\x2\x2\x2\xBB\x13\x3\x2\x2\x2\xBC"+
		"\xBD\a$\x2\x2\xBD\xBE\a(\x2\x2\xBE\xBF\a\v\x2\x2\xBF\xC6\x5\x16\f\x2\xC0"+
		"\xC1\a(\x2\x2\xC1\xC2\a\xF\x2\x2\xC2\xC3\a$\x2\x2\xC3\xC4\x5\x30\x19\x2"+
		"\xC4\xC5\a%\x2\x2\xC5\xC7\x3\x2\x2\x2\xC6\xC0\x3\x2\x2\x2\xC6\xC7\x3\x2"+
		"\x2\x2\xC7\xCB\x3\x2\x2\x2\xC8\xC9\a(\x2\x2\xC9\xCA\a\x10\x2\x2\xCA\xCC"+
		"\x5*\x16\x2\xCB\xC8\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xD0\x3\x2\x2\x2"+
		"\xCD\xCE\a(\x2\x2\xCE\xCF\a\x16\x2\x2\xCF\xD1\x5,\x17\x2\xD0\xCD\x3\x2"+
		"\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\a%\x2\x2\xD3\x15"+
		"\x3\x2\x2\x2\xD4\xD5\a>\x2\x2\xD5\x17\x3\x2\x2\x2\xD6\xD7\a$\x2\x2\xD7"+
		"\xD8\a(\x2\x2\xD8\xD9\a\x11\x2\x2\xD9\xE0\x5\x1A\xE\x2\xDA\xDB\a(\x2\x2"+
		"\xDB\xDC\a\xF\x2\x2\xDC\xDD\a$\x2\x2\xDD\xDE\x5\x30\x19\x2\xDE\xDF\a%"+
		"\x2\x2\xDF\xE1\x3\x2\x2\x2\xE0\xDA\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1"+
		"\xE2\x3\x2\x2\x2\xE2\xE3\a(\x2\x2\xE3\xE4\a\xE\x2\x2\xE4\xE5\x5$\x13\x2"+
		"\xE5\xE6\a%\x2\x2\xE6\x19\x3\x2\x2\x2\xE7\xE8\a>\x2\x2\xE8\x1B\x3\x2\x2"+
		"\x2\xE9\xEA\a$\x2\x2\xEA\xEB\a(\x2\x2\xEB\xEC\a\n\x2\x2\xEC\xF3\x5\x1E"+
		"\x10\x2\xED\xEE\a(\x2\x2\xEE\xEF\a\xF\x2\x2\xEF\xF0\a$\x2\x2\xF0\xF1\x5"+
		"\x30\x19\x2\xF1\xF2\a%\x2\x2\xF2\xF4\x3\x2\x2\x2\xF3\xED\x3\x2\x2\x2\xF3"+
		"\xF4\x3\x2\x2\x2\xF4\xF6\x3\x2\x2\x2\xF5\xF7\x5\x18\r\x2\xF6\xF5\x3\x2"+
		"\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9"+
		"\xFA\x3\x2\x2\x2\xFA\xFB\a%\x2\x2\xFB\x1D\x3\x2\x2\x2\xFC\xFD\a>\x2\x2"+
		"\xFD\x1F\x3\x2\x2\x2\xFE\xFF\a$\x2\x2\xFF\x100\a(\x2\x2\x100\x101\a\x12"+
		"\x2\x2\x101\x108\x5\"\x12\x2\x102\x103\a(\x2\x2\x103\x104\a\xF\x2\x2\x104"+
		"\x105\a$\x2\x2\x105\x106\x5\x30\x19\x2\x106\x107\a%\x2\x2\x107\x109\x3"+
		"\x2\x2\x2\x108\x102\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10D\x3\x2"+
		"\x2\x2\x10A\x10B\a(\x2\x2\x10B\x10C\a\x10\x2\x2\x10C\x10E\x5*\x16\x2\x10D"+
		"\x10A\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110"+
		"\a(\x2\x2\x110\x111\a\xE\x2\x2\x111\x112\x5$\x13\x2\x112\x113\a%\x2\x2"+
		"\x113!\x3\x2\x2\x2\x114\x115\a>\x2\x2\x115#\x3\x2\x2\x2\x116\x120\x5:"+
		"\x1E\x2\x117\x119\a$\x2\x2\x118\x11A\x5&\x14\x2\x119\x118\x3\x2\x2\x2"+
		"\x11A\x11B\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C"+
		"\x11D\x3\x2\x2\x2\x11D\x11E\a%\x2\x2\x11E\x120\x3\x2\x2\x2\x11F\x116\x3"+
		"\x2\x2\x2\x11F\x117\x3\x2\x2\x2\x120%\x3\x2\x2\x2\x121\x122\a$\x2\x2\x122"+
		"\x123\a(\x2\x2\x123\x124\a\r\x2\x2\x124\x125\x5(\x15\x2\x125\x126\a(\x2"+
		"\x2\x126\x127\a\f\x2\x2\x127\x128\x5:\x1E\x2\x128\x129\a%\x2\x2\x129\'"+
		"\x3\x2\x2\x2\x12A\x12B\a?\x2\x2\x12B)\x3\x2\x2\x2\x12C\x130\x5\x34\x1B"+
		"\x2\x12D\x12E\a$\x2\x2\x12E\x130\a%\x2\x2\x12F\x12C\x3\x2\x2\x2\x12F\x12D"+
		"\x3\x2\x2\x2\x130+\x3\x2\x2\x2\x131\x135\x5\x42\"\x2\x132\x133\a$\x2\x2"+
		"\x133\x135\a%\x2\x2\x134\x131\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2\x135-"+
		"\x3\x2\x2\x2\x136\x138\a>\x2\x2\x137\x136\x3\x2\x2\x2\x138\x13B\x3\x2"+
		"\x2\x2\x139\x137\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x146\x3\x2\x2"+
		"\x2\x13B\x139\x3\x2\x2\x2\x13C\x13E\a>\x2\x2\x13D\x13C\x3\x2\x2\x2\x13E"+
		"\x13F\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x141"+
		"\x3\x2\x2\x2\x141\x142\a,\x2\x2\x142\x143\x5\x12\n\x2\x143\x144\x5.\x18"+
		"\x2\x144\x146\x3\x2\x2\x2\x145\x139\x3\x2\x2\x2\x145\x13D\x3\x2\x2\x2"+
		"\x146/\x3\x2\x2\x2\x147\x149\a@\x2\x2\x148\x147\x3\x2\x2\x2\x149\x14C"+
		"\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x157\x3"+
		"\x2\x2\x2\x14C\x14A\x3\x2\x2\x2\x14D\x14F\a@\x2\x2\x14E\x14D\x3\x2\x2"+
		"\x2\x14F\x150\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2"+
		"\x151\x152\x3\x2\x2\x2\x152\x153\a,\x2\x2\x153\x154\x5\x12\n\x2\x154\x155"+
		"\x5\x30\x19\x2\x155\x157\x3\x2\x2\x2\x156\x14A\x3\x2\x2\x2\x156\x14E\x3"+
		"\x2\x2\x2\x157\x31\x3\x2\x2\x2\x158\x15A\a\x39\x2\x2\x159\x15B\a@\x2\x2"+
		"\x15A\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15A\x3\x2\x2\x2\x15C"+
		"\x15D\x3\x2\x2\x2\x15D\x33\x3\x2\x2\x2\x15E\x18D\x5\x36\x1C\x2\x15F\x160"+
		"\a$\x2\x2\x160\x162\a\x36\x2\x2\x161\x163\x5\x34\x1B\x2\x162\x161\x3\x2"+
		"\x2\x2\x163\x164\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x164\x165\x3\x2\x2"+
		"\x2\x165\x166\x3\x2\x2\x2\x166\x167\a%\x2\x2\x167\x18D\x3\x2\x2\x2\x168"+
		"\x169\a$\x2\x2\x169\x16B\a\x37\x2\x2\x16A\x16C\x5\x34\x1B\x2\x16B\x16A"+
		"\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16B\x3\x2\x2\x2\x16D\x16E\x3"+
		"\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x170\a%\x2\x2\x170\x18D\x3\x2\x2"+
		"\x2\x171\x172\a$\x2\x2\x172\x173\a\x38\x2\x2\x173\x174\x5\x34\x1B\x2\x174"+
		"\x175\a%\x2\x2\x175\x18D\x3\x2\x2\x2\x176\x177\a$\x2\x2\x177\x178\a:\x2"+
		"\x2\x178\x179\x5\x34\x1B\x2\x179\x17A\x5\x34\x1B\x2\x17A\x17B\a%\x2\x2"+
		"\x17B\x18D\x3\x2\x2\x2\x17C\x17D\a$\x2\x2\x17D\x17E\a<\x2\x2\x17E\x17F"+
		"\a$\x2\x2\x17F\x180\x5\x30\x19\x2\x180\x181\a%\x2\x2\x181\x182\x5\x34"+
		"\x1B\x2\x182\x183\a%\x2\x2\x183\x18D\x3\x2\x2\x2\x184\x185\a$\x2\x2\x185"+
		"\x186\a;\x2\x2\x186\x187\a$\x2\x2\x187\x188\x5\x30\x19\x2\x188\x189\a"+
		"%\x2\x2\x189\x18A\x5\x34\x1B\x2\x18A\x18B\a%\x2\x2\x18B\x18D\x3\x2\x2"+
		"\x2\x18C\x15E\x3\x2\x2\x2\x18C\x15F\x3\x2\x2\x2\x18C\x168\x3\x2\x2\x2"+
		"\x18C\x171\x3\x2\x2\x2\x18C\x176\x3\x2\x2\x2\x18C\x17C\x3\x2\x2\x2\x18C"+
		"\x184\x3\x2\x2\x2\x18D\x35\x3\x2\x2\x2\x18E\x18F\a$\x2\x2\x18F\x193\x5"+
		"\xE\b\x2\x190\x192\x5@!\x2\x191\x190\x3\x2\x2\x2\x192\x195\x3\x2\x2\x2"+
		"\x193\x191\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x196\x3\x2\x2\x2\x195"+
		"\x193\x3\x2\x2\x2\x196\x197\a%\x2\x2\x197\x1BD\x3\x2\x2\x2\x198\x199\a"+
		"$\x2\x2\x199\x19A\a\x30\x2\x2\x19A\x19B\x5@!\x2\x19B\x19C\x5@!\x2\x19C"+
		"\x19D\a%\x2\x2\x19D\x1BD\x3\x2\x2\x2\x19E\x19F\a$\x2\x2\x19F\x1A0\a\x31"+
		"\x2\x2\x1A0\x1A1\x5@!\x2\x1A1\x1A2\x5@!\x2\x1A2\x1A3\a%\x2\x2\x1A3\x1BD"+
		"\x3\x2\x2\x2\x1A4\x1A5\a$\x2\x2\x1A5\x1A6\a\x32\x2\x2\x1A6\x1A7\x5@!\x2"+
		"\x1A7\x1A8\x5@!\x2\x1A8\x1A9\a%\x2\x2\x1A9\x1BD\x3\x2\x2\x2\x1AA\x1AB"+
		"\a$\x2\x2\x1AB\x1AC\a\x33\x2\x2\x1AC\x1AD\x5@!\x2\x1AD\x1AE\x5@!\x2\x1AE"+
		"\x1AF\a%\x2\x2\x1AF\x1BD\x3\x2\x2\x2\x1B0\x1B1\a$\x2\x2\x1B1\x1B2\a\x34"+
		"\x2\x2\x1B2\x1B3\x5@!\x2\x1B3\x1B4\x5@!\x2\x1B4\x1B5\a%\x2\x2\x1B5\x1BD"+
		"\x3\x2\x2\x2\x1B6\x1B7\a$\x2\x2\x1B7\x1B8\a\x35\x2\x2\x1B8\x1B9\x5@!\x2"+
		"\x1B9\x1BA\x5@!\x2\x1BA\x1BB\a%\x2\x2\x1BB\x1BD\x3\x2\x2\x2\x1BC\x18E"+
		"\x3\x2\x2\x2\x1BC\x198\x3\x2\x2\x2\x1BC\x19E\x3\x2\x2\x2\x1BC\x1A4\x3"+
		"\x2\x2\x2\x1BC\x1AA\x3\x2\x2\x2\x1BC\x1B0\x3\x2\x2\x2\x1BC\x1B6\x3\x2"+
		"\x2\x2\x1BD\x37\x3\x2\x2\x2\x1BE\x1C5\x5\x36\x1C\x2\x1BF\x1C0\a$\x2\x2"+
		"\x1C0\x1C1\a\x38\x2\x2\x1C1\x1C2\x5\x36\x1C\x2\x1C2\x1C3\a%\x2\x2\x1C3"+
		"\x1C5\x3\x2\x2\x2\x1C4\x1BE\x3\x2\x2\x2\x1C4\x1BF\x3\x2\x2\x2\x1C5\x39"+
		"\x3\x2\x2\x2\x1C6\x1F5\x5<\x1F\x2\x1C7\x1C8\a$\x2\x2\x1C8\x1C9\a\x38\x2"+
		"\x2\x1C9\x1CA\x5:\x1E\x2\x1CA\x1CB\a%\x2\x2\x1CB\x1F5\x3\x2\x2\x2\x1CC"+
		"\x1CD\a$\x2\x2\x1CD\x1CF\a\x36\x2\x2\x1CE\x1D0\x5:\x1E\x2\x1CF\x1CE\x3"+
		"\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2"+
		"\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D4\a%\x2\x2\x1D4\x1F5\x3\x2\x2\x2"+
		"\x1D5\x1D6\a$\x2\x2\x1D6\x1D8\a\x37\x2\x2\x1D7\x1D9\x5:\x1E\x2\x1D8\x1D7"+
		"\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1D8\x3\x2\x2\x2\x1DA\x1DB\x3"+
		"\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DD\a%\x2\x2\x1DD\x1F5\x3\x2\x2"+
		"\x2\x1DE\x1DF\a$\x2\x2\x1DF\x1E0\a:\x2\x2\x1E0\x1E1\x5:\x1E\x2\x1E1\x1E2"+
		"\x5:\x1E\x2\x1E2\x1E3\a%\x2\x2\x1E3\x1F5\x3\x2\x2\x2\x1E4\x1E5\a$\x2\x2"+
		"\x1E5\x1E6\a<\x2\x2\x1E6\x1E7\a$\x2\x2\x1E7\x1E8\x5\x30\x19\x2\x1E8\x1E9"+
		"\a%\x2\x2\x1E9\x1EA\x5:\x1E\x2\x1EA\x1EB\a%\x2\x2\x1EB\x1F5\x3\x2\x2\x2"+
		"\x1EC\x1ED\a$\x2\x2\x1ED\x1EE\a;\x2\x2\x1EE\x1EF\a$\x2\x2\x1EF\x1F0\x5"+
		"\x30\x19\x2\x1F0\x1F1\a%\x2\x2\x1F1\x1F2\x5:\x1E\x2\x1F2\x1F3\a%\x2\x2"+
		"\x1F3\x1F5\x3\x2\x2\x2\x1F4\x1C6\x3\x2\x2\x2\x1F4\x1C7\x3\x2\x2\x2\x1F4"+
		"\x1CC\x3\x2\x2\x2\x1F4\x1D5\x3\x2\x2\x2\x1F4\x1DE\x3\x2\x2\x2\x1F4\x1E4"+
		"\x3\x2\x2\x2\x1F4\x1EC\x3\x2\x2\x2\x1F5;\x3\x2\x2\x2\x1F6\x1F7\a$\x2\x2"+
		"\x1F7\x1FB\x5\x16\f\x2\x1F8\x1FA\x5@!\x2\x1F9\x1F8\x3\x2\x2\x2\x1FA\x1FD"+
		"\x3\x2\x2\x2\x1FB\x1F9\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FE\x3"+
		"\x2\x2\x2\x1FD\x1FB\x3\x2\x2\x2\x1FE\x1FF\a%\x2\x2\x1FF\x225\x3\x2\x2"+
		"\x2\x200\x201\a$\x2\x2\x201\x202\a\x30\x2\x2\x202\x203\x5@!\x2\x203\x204"+
		"\x5@!\x2\x204\x205\a%\x2\x2\x205\x225\x3\x2\x2\x2\x206\x207\a$\x2\x2\x207"+
		"\x208\a\x31\x2\x2\x208\x209\x5@!\x2\x209\x20A\x5@!\x2\x20A\x20B\a%\x2"+
		"\x2\x20B\x225\x3\x2\x2\x2\x20C\x20D\a$\x2\x2\x20D\x20E\a\x32\x2\x2\x20E"+
		"\x20F\x5@!\x2\x20F\x210\x5@!\x2\x210\x211\a%\x2\x2\x211\x225\x3\x2\x2"+
		"\x2\x212\x213\a$\x2\x2\x213\x214\a\x33\x2\x2\x214\x215\x5@!\x2\x215\x216"+
		"\x5@!\x2\x216\x217\a%\x2\x2\x217\x225\x3\x2\x2\x2\x218\x219\a$\x2\x2\x219"+
		"\x21A\a\x34\x2\x2\x21A\x21B\x5@!\x2\x21B\x21C\x5@!\x2\x21C\x21D\a%\x2"+
		"\x2\x21D\x225\x3\x2\x2\x2\x21E\x21F\a$\x2\x2\x21F\x220\a\x35\x2\x2\x220"+
		"\x221\x5@!\x2\x221\x222\x5@!\x2\x222\x223\a%\x2\x2\x223\x225\x3\x2\x2"+
		"\x2\x224\x1F6\x3\x2\x2\x2\x224\x200\x3\x2\x2\x2\x224\x206\x3\x2\x2\x2"+
		"\x224\x20C\x3\x2\x2\x2\x224\x212\x3\x2\x2\x2\x224\x218\x3\x2\x2\x2\x224"+
		"\x21E\x3\x2\x2\x2\x225=\x3\x2\x2\x2\x226\x23A\a>\x2\x2\x227\x23A\a?\x2"+
		"\x2\x228\x229\a$\x2\x2\x229\x22A\a,\x2\x2\x22A\x22B\x5> \x2\x22B\x22C"+
		"\a%\x2\x2\x22C\x23A\x3\x2\x2\x2\x22D\x22E\a$\x2\x2\x22E\x22F\a,\x2\x2"+
		"\x22F\x230\x5> \x2\x230\x231\x5> \x2\x231\x232\a%\x2\x2\x232\x23A\x3\x2"+
		"\x2\x2\x233\x234\a$\x2\x2\x234\x235\a-\x2\x2\x235\x236\x5> \x2\x236\x237"+
		"\x5> \x2\x237\x238\a%\x2\x2\x238\x23A\x3\x2\x2\x2\x239\x226\x3\x2\x2\x2"+
		"\x239\x227\x3\x2\x2\x2\x239\x228\x3\x2\x2\x2\x239\x22D\x3\x2\x2\x2\x239"+
		"\x233\x3\x2\x2\x2\x23A?\x3\x2\x2\x2\x23B\x250\a>\x2\x2\x23C\x250\a@\x2"+
		"\x2\x23D\x250\a?\x2\x2\x23E\x23F\a$\x2\x2\x23F\x240\a,\x2\x2\x240\x241"+
		"\x5@!\x2\x241\x242\a%\x2\x2\x242\x250\x3\x2\x2\x2\x243\x244\a$\x2\x2\x244"+
		"\x245\a,\x2\x2\x245\x246\x5@!\x2\x246\x247\x5@!\x2\x247\x248\a%\x2\x2"+
		"\x248\x250\x3\x2\x2\x2\x249\x24A\a$\x2\x2\x24A\x24B\a-\x2\x2\x24B\x24C"+
		"\x5@!\x2\x24C\x24D\x5@!\x2\x24D\x24E\a%\x2\x2\x24E\x250\x3\x2\x2\x2\x24F"+
		"\x23B\x3\x2\x2\x2\x24F\x23C\x3\x2\x2\x2\x24F\x23D\x3\x2\x2\x2\x24F\x23E"+
		"\x3\x2\x2\x2\x24F\x243\x3\x2\x2\x2\x24F\x249\x3\x2\x2\x2\x250\x41\x3\x2"+
		"\x2\x2\x251\x252\a$\x2\x2\x252\x254\a\x36\x2\x2\x253\x255\x5\x44#\x2\x254"+
		"\x253\x3\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x254\x3\x2\x2\x2\x256\x257"+
		"\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x259\a%\x2\x2\x259\x25C\x3\x2"+
		"\x2\x2\x25A\x25C\x5\x44#\x2\x25B\x251\x3\x2\x2\x2\x25B\x25A\x3\x2\x2\x2"+
		"\x25C\x43\x3\x2\x2\x2\x25D\x25E\a$\x2\x2\x25E\x25F\a;\x2\x2\x25F\x260"+
		"\a$\x2\x2\x260\x261\x5\x30\x19\x2\x261\x262\a%\x2\x2\x262\x263\x5\x42"+
		"\"\x2\x263\x264\a%\x2\x2\x264\x26D\x3\x2\x2\x2\x265\x266\a$\x2\x2\x266"+
		"\x267\a=\x2\x2\x267\x268\x5\x34\x1B\x2\x268\x269\x5\x46$\x2\x269\x26A"+
		"\a%\x2\x2\x26A\x26D\x3\x2\x2\x2\x26B\x26D\x5\x38\x1D\x2\x26C\x25D\x3\x2"+
		"\x2\x2\x26C\x265\x3\x2\x2\x2\x26C\x26B\x3\x2\x2\x2\x26D\x45\x3\x2\x2\x2"+
		"\x26E\x26F\a$\x2\x2\x26F\x271\a\x36\x2\x2\x270\x272\x5\x38\x1D\x2\x271"+
		"\x270\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x271\x3\x2\x2\x2\x273\x274"+
		"\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x276\a%\x2\x2\x276\x279\x3\x2"+
		"\x2\x2\x277\x279\x5\x38\x1D\x2\x278\x26E\x3\x2\x2\x2\x278\x277\x3\x2\x2"+
		"\x2\x279G\x3\x2\x2\x2\x27A\x27B\a$\x2\x2\x27B\x27C\a\x5\x2\x2\x27C\x27D"+
		"\a$\x2\x2\x27D\x27E\a\x4\x2\x2\x27E\x27F\x5J&\x2\x27F\x280\a%\x2\x2\x280"+
		"\x281\a$\x2\x2\x281\x282\a(\x2\x2\x282\x283\a\x3\x2\x2\x283\x284\x5L\'"+
		"\x2\x284\x286\a%\x2\x2\x285\x287\x5R*\x2\x286\x285\x3\x2\x2\x2\x286\x287"+
		"\x3\x2\x2\x2\x287\x289\x3\x2\x2\x2\x288\x28A\x5P)\x2\x289\x288\x3\x2\x2"+
		"\x2\x289\x28A\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x28C\x5T+\x2\x28C"+
		"\x28D\a%\x2\x2\x28DI\x3\x2\x2\x2\x28E\x28F\a>\x2\x2\x28FK\x3\x2\x2\x2"+
		"\x290\x291\a>\x2\x2\x291M\x3\x2\x2\x2\x292\x293\a$\x2\x2\x293\x294\a("+
		"\x2\x2\x294\x296\a\x18\x2\x2\x295\x297\a>\x2\x2\x296\x295\x3\x2\x2\x2"+
		"\x297\x298\x3\x2\x2\x2\x298\x296\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299"+
		"\x29A\x3\x2\x2\x2\x29A\x29B\a%\x2\x2\x29BO\x3\x2\x2\x2\x29C\x29D\a$\x2"+
		"\x2\x29D\x29E\a(\x2\x2\x29E\x29F\a!\x2\x2\x29F\x2A0\x5.\x18\x2\x2A0\x2A1"+
		"\a%\x2\x2\x2A1Q\x3\x2\x2\x2\x2A2\x2A3\a$\x2\x2\x2A3\x2A4\a(\x2\x2\x2A4"+
		"\x2AA\a\x15\x2\x2\x2A5\x2A6\a$\x2\x2\x2A6\x2A7\x5\x6\x4\x2\x2A7\x2A8\a"+
		"?\x2\x2\x2A8\x2A9\a%\x2\x2\x2A9\x2AB\x3\x2\x2\x2\x2AA\x2A5\x3\x2\x2\x2"+
		"\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AA\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD"+
		"\x2AE\x3\x2\x2\x2\x2AE\x2AF\a%\x2\x2\x2AFS\x3\x2\x2\x2\x2B0\x2B1\a$\x2"+
		"\x2\x2B1\x2B2\a(\x2\x2\x2B2\x2B6\a\"\x2\x2\x2B3\x2B5\x5V,\x2\x2B4\x2B3"+
		"\x3\x2\x2\x2\x2B5\x2B8\x3\x2\x2\x2\x2B6\x2B4\x3\x2\x2\x2\x2B6\x2B7\x3"+
		"\x2\x2\x2\x2B7\x2B9\x3\x2\x2\x2\x2B8\x2B6\x3\x2\x2\x2\x2B9\x2BA\a%\x2"+
		"\x2\x2BAU\x3\x2\x2\x2\x2BB\x2BC\a$\x2\x2\x2BC\x2C0\x5\xE\b\x2\x2BD\x2BF"+
		"\x5> \x2\x2BE\x2BD\x3\x2\x2\x2\x2BF\x2C2\x3\x2\x2\x2\x2C0\x2BE\x3\x2\x2"+
		"\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C3\x3\x2\x2\x2\x2C2\x2C0\x3\x2\x2\x2"+
		"\x2C3\x2C4\a%\x2\x2\x2C4\x2E4\x3\x2\x2\x2\x2C5\x2C6\a$\x2\x2\x2C6\x2C7"+
		"\a\x30\x2\x2\x2C7\x2C8\x5> \x2\x2C8\x2C9\x5> \x2\x2C9\x2CA\a%\x2\x2\x2CA"+
		"\x2E4\x3\x2\x2\x2\x2CB\x2CC\a$\x2\x2\x2CC\x2CD\a\x32\x2\x2\x2CD\x2CE\x5"+
		"> \x2\x2CE\x2CF\x5> \x2\x2CF\x2D0\a%\x2\x2\x2D0\x2E4\x3\x2\x2\x2\x2D1"+
		"\x2D2\a$\x2\x2\x2D2\x2D3\a\x33\x2\x2\x2D3\x2D4\x5> \x2\x2D4\x2D5\x5> "+
		"\x2\x2D5\x2D6\a%\x2\x2\x2D6\x2E4\x3\x2\x2\x2\x2D7\x2D8\a$\x2\x2\x2D8\x2D9"+
		"\a\x34\x2\x2\x2D9\x2DA\x5> \x2\x2DA\x2DB\x5> \x2\x2DB\x2DC\a%\x2\x2\x2DC"+
		"\x2E4\x3\x2\x2\x2\x2DD\x2DE\a$\x2\x2\x2DE\x2DF\a\x35\x2\x2\x2DF\x2E0\x5"+
		"> \x2\x2E0\x2E1\x5> \x2\x2E1\x2E2\a%\x2\x2\x2E2\x2E4\x3\x2\x2\x2\x2E3"+
		"\x2BB\x3\x2\x2\x2\x2E3\x2C5\x3\x2\x2\x2\x2E3\x2CB\x3\x2\x2\x2\x2E3\x2D1"+
		"\x3\x2\x2\x2\x2E3\x2D7\x3\x2\x2\x2\x2E3\x2DD\x3\x2\x2\x2\x2E4W\x3\x2\x2"+
		"\x2\x2E5\x2E6\a$\x2\x2\x2E6\x2E7\a\x5\x2\x2\x2E7\x2E8\a$\x2\x2\x2E8\x2E9"+
		"\a\x4\x2\x2\x2E9\x2EA\x5J&\x2\x2EA\x2EB\a%\x2\x2\x2EB\x2EC\a$\x2\x2\x2EC"+
		"\x2ED\a(\x2\x2\x2ED\x2EE\a\x3\x2\x2\x2EE\x2EF\x5L\'\x2\x2EF\x2F0\a%\x2"+
		"\x2\x2F0\x2F1\x5N(\x2\x2F1\x2F2\a$\x2\x2\x2F2\x2F3\a(\x2\x2\x2F3\x2F4"+
		"\a\x6\x2\x2\x2F4\x2F5\x5^\x30\x2\x2F5\x2F7\a%\x2\x2\x2F6\x2F8\x5P)\x2"+
		"\x2F7\x2F6\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2FA\x3\x2\x2\x2\x2F9"+
		"\x2FB\x5R*\x2\x2FA\x2F9\x3\x2\x2\x2\x2FA\x2FB\x3\x2\x2\x2\x2FB\x2FD\x3"+
		"\x2\x2\x2\x2FC\x2FE\x5Z.\x2\x2FD\x2FC\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2"+
		"\x2FE\x300\x3\x2\x2\x2\x2FF\x301\x5\\/\x2\x300\x2FF\x3\x2\x2\x2\x300\x301"+
		"\x3\x2\x2\x2\x301\x302\x3\x2\x2\x2\x302\x303\a%\x2\x2\x303Y\x3\x2\x2\x2"+
		"\x304\x305\a$\x2\x2\x305\x306\a(\x2\x2\x306\x307\a\x1A\x2\x2\x307\x308"+
		"\x5\x34\x1B\x2\x308\x309\a%\x2\x2\x309[\x3\x2\x2\x2\x30A\x30B\a$\x2\x2"+
		"\x30B\x30C\a(\x2\x2\x30C\x30D\a\x1B\x2\x2\x30D\x30E\x5\x34\x1B\x2\x30E"+
		"\x30F\a%\x2\x2\x30F]\x3\x2\x2\x2\x310\x311\a>\x2\x2\x311_\x3\x2\x2\x2"+
		"\x312\x313\a$\x2\x2\x313\x317\x5\x1E\x10\x2\x314\x316\x5@!\x2\x315\x314"+
		"\x3\x2\x2\x2\x316\x319\x3\x2\x2\x2\x317\x315\x3\x2\x2\x2\x317\x318\x3"+
		"\x2\x2\x2\x318\x31A\x3\x2\x2\x2\x319\x317\x3\x2\x2\x2\x31A\x31B\a%\x2"+
		"\x2\x31B\x335\x3\x2\x2\x2\x31C\x31D\a$\x2\x2\x31D\x31F\a\x1C\x2\x2\x31E"+
		"\x320\x5`\x31\x2\x31F\x31E\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x31F"+
		"\x3\x2\x2\x2\x321\x322\x3\x2\x2\x2\x322\x323\x3\x2\x2\x2\x323\x324\a%"+
		"\x2\x2\x324\x335\x3\x2\x2\x2\x325\x326\a$\x2\x2\x326\x327\a\x1D\x2\x2"+
		"\x327\x328\x5\x62\x32\x2\x328\x32A\x5`\x31\x2\x329\x32B\x5`\x31\x2\x32A"+
		"\x329\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\x32D"+
		"\a%\x2\x2\x32D\x335\x3\x2\x2\x2\x32E\x32F\a$\x2\x2\x32F\x330\a\x1E\x2"+
		"\x2\x330\x331\x5\x62\x32\x2\x331\x332\x5`\x31\x2\x332\x333\a%\x2\x2\x333"+
		"\x335\x3\x2\x2\x2\x334\x312\x3\x2\x2\x2\x334\x31C\x3\x2\x2\x2\x334\x325"+
		"\x3\x2\x2\x2\x334\x32E\x3\x2\x2\x2\x335\x61\x3\x2\x2\x2\x336\x337\a$\x2"+
		"\x2\x337\x338\a\x1F\x2\x2\x338\x339\x5\x34\x1B\x2\x339\x33A\a%\x2\x2\x33A"+
		"\x368\x3\x2\x2\x2\x33B\x33C\a$\x2\x2\x33C\x33D\a \x2\x2\x33D\x33E\x5\x34"+
		"\x1B\x2\x33E\x33F\a%\x2\x2\x33F\x368\x3\x2\x2\x2\x340\x341\a$\x2\x2\x341"+
		"\x342\a\x38\x2\x2\x342\x343\x5\x62\x32\x2\x343\x344\a%\x2\x2\x344\x368"+
		"\x3\x2\x2\x2\x345\x346\a$\x2\x2\x346\x348\a\x36\x2\x2\x347\x349\x5\x62"+
		"\x32\x2\x348\x347\x3\x2\x2\x2\x349\x34A\x3\x2\x2\x2\x34A\x348\x3\x2\x2"+
		"\x2\x34A\x34B\x3\x2\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\x34D\a%\x2\x2\x34D"+
		"\x368\x3\x2\x2\x2\x34E\x34F\a$\x2\x2\x34F\x351\a\x37\x2\x2\x350\x352\x5"+
		"\x62\x32\x2\x351\x350\x3\x2\x2\x2\x352\x353\x3\x2\x2\x2\x353\x351\x3\x2"+
		"\x2\x2\x353\x354\x3\x2\x2\x2\x354\x355\x3\x2\x2\x2\x355\x356\a%\x2\x2"+
		"\x356\x368\x3\x2\x2\x2\x357\x358\a$\x2\x2\x358\x359\a<\x2\x2\x359\x35A"+
		"\a$\x2\x2\x35A\x35B\x5\x30\x19\x2\x35B\x35C\a%\x2\x2\x35C\x35D\x5\x62"+
		"\x32\x2\x35D\x35E\a%\x2\x2\x35E\x368\x3\x2\x2\x2\x35F\x360\a$\x2\x2\x360"+
		"\x361\a;\x2\x2\x361\x362\a$\x2\x2\x362\x363\x5\x30\x19\x2\x363\x364\a"+
		"%\x2\x2\x364\x365\x5\x62\x32\x2\x365\x366\a%\x2\x2\x366\x368\x3\x2\x2"+
		"\x2\x367\x336\x3\x2\x2\x2\x367\x33B\x3\x2\x2\x2\x367\x340\x3\x2\x2\x2"+
		"\x367\x345\x3\x2\x2\x2\x367\x34E\x3\x2\x2\x2\x367\x357\x3\x2\x2\x2\x367"+
		"\x35F\x3\x2\x2\x2\x368\x63\x3\x2\x2\x2\x44knqv|\x82\x8D\x99\xA3\xAB\xB8"+
		"\xC6\xCB\xD0\xE0\xF3\xF8\x108\x10D\x11B\x11F\x12F\x134\x139\x13F\x145"+
		"\x14A\x150\x156\x15C\x164\x16D\x18C\x193\x1BC\x1C4\x1D1\x1DA\x1F4\x1FB"+
		"\x224\x239\x24F\x256\x25B\x26C\x273\x278\x286\x289\x298\x2AC\x2B6\x2C0"+
		"\x2E3\x2F7\x2FA\x2FD\x300\x317\x321\x32A\x334\x34A\x353\x367";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
