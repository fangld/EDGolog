//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\Planning.g4 by ANTLR 4.2.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOM=1, PROM=2, DEF=3, REQ=4, TYPE=5, PRED=6, ACT=7, PARM=8, PRE=9, EFF=10, 
		OBJ=11, EITHER=12, OBJS=13, INIT=14, STRIPS=15, TYPING=16, LB=17, RB=18, 
		LSB=19, RSB=20, COLON=21, QM=22, COMMA=23, UL=24, DASH=25, PLUS=26, MINUS=27, 
		MULT=28, DIV=29, EQ=30, LT=31, LEQ=32, GT=33, GEQ=34, AND=35, OR=36, NOT=37, 
		IMPLY=38, FORALL=39, EXISTS=40, WHEN=41, PREF=42, BINCOMP=43, BINOP=44, 
		LETTER=45, DIGIT=46, NAME=47, CHAR=48, NUMBER=49, DECIMAL=50, VAR=51, 
		FUNSYM=52, WS=53;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'requirements'", "'types'", 
		"'predicates'", "'action'", "'parameters'", "'precondition'", "'effect'", 
		"'object'", "'either'", "'objects'", "'init'", "'strips'", "'typing'", 
		"'('", "')'", "'['", "']'", "':'", "'?'", "'.'", "'_'", "DASH", "'+'", 
		"MINUS", "'*'", "'/'", "'='", "'<'", "'<='", "'>'", "'>='", "'and'", "'or'", 
		"'not'", "'imply'", "'forall'", "'exists'", "'when'", "'preference'", 
		"BINCOMP", "BINOP", "LETTER", "DIGIT", "NAME", "CHAR", "NUMBER", "DECIMAL", 
		"VAR", "FUNSYM", "WS"
	};
	public const int
		RULE_domain = 0, RULE_requireDefine = 1, RULE_requireKey = 2, RULE_strips = 3, 
		RULE_typing = 4, RULE_typeDefine = 5, RULE_predicatesDefine = 6, RULE_atomicFormulaSkeleton = 7, 
		RULE_predicate = 8, RULE_primitiveType = 9, RULE_type = 10, RULE_structureDefine = 11, 
		RULE_actionDefine = 12, RULE_actionSymbol = 13, RULE_actionDefBody = 14, 
		RULE_emptyOrPreGD = 15, RULE_emptyOrEffect = 16, RULE_listName = 17, RULE_listVariable = 18, 
		RULE_preGD = 19, RULE_prefGD = 20, RULE_prefName = 21, RULE_gd = 22, RULE_atomicFormula = 23, 
		RULE_literal = 24, RULE_term = 25, RULE_effect = 26, RULE_cEffect = 27, 
		RULE_pEffect = 28, RULE_condEffect = 29, RULE_functionTerm = 30, RULE_problem = 31, 
		RULE_objectDeclaration = 32, RULE_init = 33;
	public static readonly string[] ruleNames = {
		"domain", "requireDefine", "requireKey", "strips", "typing", "typeDefine", 
		"predicatesDefine", "atomicFormulaSkeleton", "predicate", "primitiveType", 
		"type", "structureDefine", "actionDefine", "actionSymbol", "actionDefBody", 
		"emptyOrPreGD", "emptyOrEffect", "listName", "listVariable", "preGD", 
		"prefGD", "prefName", "gd", "atomicFormula", "literal", "term", "effect", 
		"cEffect", "pEffect", "condEffect", "functionTerm", "problem", "objectDeclaration", 
		"init"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<StructureDefineContext> structureDefine() {
			return GetRuleContexts<StructureDefineContext>();
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicatesDefineContext predicatesDefine() {
			return GetRuleContext<PredicatesDefineContext>(0);
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public StructureDefineContext structureDefine(int i) {
			return GetRuleContext<StructureDefineContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterDomain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitDomain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(LB);
			State = 69; Match(DEF);
			State = 70; Match(LB);
			State = 71; Match(DOM);
			State = 72; Match(NAME);
			State = 73; Match(RB);
			State = 75;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 74; requireDefine();
				}
				break;
			}
			State = 78;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 77; typeDefine();
				}
				break;
			}
			State = 81;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 80; predicatesDefine();
				}
				break;
			}
			State = 86;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 83; structureDefine();
				}
				}
				State = 88;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 89; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireDefineContext : ParserRuleContext {
		public RequireKeyContext requireKey(int i) {
			return GetRuleContext<RequireKeyContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode REQ() { return GetToken(PlanningParser.REQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<RequireKeyContext> requireKey() {
			return GetRuleContexts<RequireKeyContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public RequireDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterRequireDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitRequireDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireDefineContext requireDefine() {
		RequireDefineContext _localctx = new RequireDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_requireDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(LB);
			State = 92; Match(COLON);
			State = 93; Match(REQ);
			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 94; requireKey();
				}
				}
				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==COLON );
			State = 99; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireKeyContext : ParserRuleContext {
		public StripsContext strips() {
			return GetRuleContext<StripsContext>(0);
		}
		public TypingContext typing() {
			return GetRuleContext<TypingContext>(0);
		}
		public RequireKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireKey; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterRequireKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitRequireKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireKeyContext requireKey() {
		RequireKeyContext _localctx = new RequireKeyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_requireKey);
		try {
			State = 103;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101; strips();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; typing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StripsContext : ParserRuleContext {
		public ITerminalNode STRIPS() { return GetToken(PlanningParser.STRIPS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public StripsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_strips; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterStrips(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitStrips(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrips(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StripsContext strips() {
		StripsContext _localctx = new StripsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_strips);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(COLON);
			State = 106; Match(STRIPS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypingContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPING() { return GetToken(PlanningParser.TYPING, 0); }
		public TypingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typing; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTyping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTyping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypingContext typing() {
		TypingContext _localctx = new TypingContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_typing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(COLON);
			State = 109; Match(TYPING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTypeDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTypeDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(LB);
			State = 112; Match(COLON);
			State = 113; Match(TYPE);
			State = 114; listName();
			State = 115; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public IReadOnlyList<AtomicFormulaSkeletonContext> atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningParser.PRED, 0); }
		public PredicatesDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicatesDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicatesDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicatesDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatesDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatesDefineContext predicatesDefine() {
		PredicatesDefineContext _localctx = new PredicatesDefineContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_predicatesDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(LB);
			State = 118; Match(COLON);
			State = 119; Match(PRED);
			State = 121;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 120; atomicFormulaSkeleton();
				}
				}
				State = 123;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 125; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaSkeleton; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaSkeleton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaSkeleton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaSkeleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(LB);
			State = 128; predicate();
			State = 129; listVariable();
			State = 130; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_la = _input.La(1);
			if ( !(_la==OBJ || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ITerminalNode EITHER() { return GetToken(PlanningParser.EITHER, 0); }
		public IReadOnlyList<PrimitiveTypeContext> primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			State = 146;
			switch (_input.La(1)) {
			case OBJ:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; primitiveType();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; Match(LB);
				State = 138; Match(EITHER);
				State = 140;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 139; primitiveType();
					}
					}
					State = 142;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OBJ || _la==NAME );
				State = 144; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDefineContext : ParserRuleContext {
		public ActionDefineContext actionDefine() {
			return GetRuleContext<ActionDefineContext>(0);
		}
		public StructureDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_structureDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterStructureDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitStructureDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDefineContext structureDefine() {
		StructureDefineContext _localctx = new StructureDefineContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_structureDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; actionDefine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ActionDefBodyContext actionDefBody() {
			return GetRuleContext<ActionDefBodyContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_actionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(LB);
			State = 151; Match(COLON);
			State = 152; Match(ACT);
			State = 153; actionSymbol();
			State = 154; Match(COLON);
			State = 155; Match(PARM);
			State = 156; Match(LB);
			State = 157; listVariable();
			State = 158; Match(RB);
			State = 159; actionDefBody();
			State = 160; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefBodyContext : ParserRuleContext {
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningParser.EFF, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefBody; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefBodyContext actionDefBody() {
		ActionDefBodyContext _localctx = new ActionDefBodyContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_actionDefBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 164; Match(COLON);
				State = 165; Match(PRE);
				State = 166; emptyOrPreGD();
				}
				break;
			}
			State = 172;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 169; Match(COLON);
				State = 170; Match(EFF);
				State = 171; emptyOrEffect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PreGDContext preGD() {
			return GetRuleContext<PreGDContext>(0);
		}
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrPreGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_emptyOrPreGD);
		try {
			State = 177;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; preGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; Match(LB);
				State = 176; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_emptyOrEffect);
		try {
			State = 182;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; Match(LB);
				State = 181; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_listName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 184; Match(NAME);
				}
				}
				State = 187;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_listVariable);
		int _la;
		try {
			State = 204;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 189; Match(VAR);
					}
					}
					State = 194;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 195; Match(VAR);
					}
					}
					State = 198;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 200; Match(DASH);
				State = 201; type();
				State = 202; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PreGDContext preGD(int i) {
			return GetRuleContext<PreGDContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<PreGDContext> preGD() {
			return GetRuleContexts<PreGDContext>();
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public PrefGDContext prefGD() {
			return GetRuleContext<PrefGDContext>(0);
		}
		public PreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_preGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreGDContext preGD() {
		PreGDContext _localctx = new PreGDContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_preGD);
		int _la;
		try {
			State = 222;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; prefGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; Match(LB);
				State = 208; Match(AND);
				State = 212;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 209; preGD();
					}
					}
					State = 214;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 215; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216; Match(LB);
				State = 217; Match(FORALL);
				State = 218; listVariable();
				State = 219; preGD();
				State = 220; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode PREF() { return GetToken(PlanningParser.PREF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrefNameContext prefName() {
			return GetRuleContext<PrefNameContext>(0);
		}
		public PrefGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrefGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrefGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefGDContext prefGD() {
		PrefGDContext _localctx = new PrefGDContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_prefGD);
		try {
			State = 231;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; Match(LB);
				State = 226; Match(PREF);
				State = 227; prefName();
				State = 228; gd();
				State = 229; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefNameContext prefName() {
		PrefNameContext _localctx = new PrefNameContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_prefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterGd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitGd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_gd);
		int _la;
		try {
			State = 277;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; atomicFormula();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; literal();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237; Match(LB);
				State = 238; Match(AND);
				State = 242;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 239; gd();
					}
					}
					State = 244;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 245; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246; Match(LB);
				State = 247; Match(OR);
				State = 251;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 248; gd();
					}
					}
					State = 253;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 254; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 255; Match(LB);
				State = 256; Match(IMPLY);
				State = 257; gd();
				State = 258; gd();
				State = 259; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 261; Match(LB);
				State = 262; Match(EXISTS);
				State = 263; Match(LB);
				State = 264; listVariable();
				State = 265; Match(RB);
				State = 266; gd();
				State = 267; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 269; Match(LB);
				State = 270; Match(FORALL);
				State = 271; Match(LB);
				State = 272; listVariable();
				State = 273; Match(RB);
				State = 274; gd();
				State = 275; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormula; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaContext atomicFormula() {
		AtomicFormulaContext _localctx = new AtomicFormulaContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_atomicFormula);
		int _la;
		try {
			State = 298;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; Match(LB);
				State = 280; predicate();
				State = 284;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 281; term();
					}
					}
					State = 286;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 287; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; Match(LB);
				State = 290; Match(EQ);
				State = 294;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 291; term();
					}
					}
					State = 296;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 297; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literal; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_literal);
		try {
			State = 306;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; atomicFormula();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; Match(LB);
				State = 302; Match(NOT);
				State = 303; atomicFormula();
				State = 304; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public FunctionTermContext functionTerm() {
			return GetRuleContext<FunctionTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_term);
		try {
			State = 311;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308; Match(NAME);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309; Match(VAR);
				}
				break;
			case FUNSYM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 310; functionTerm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_effect);
		int _la;
		try {
			State = 323;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313; Match(LB);
				State = 314; Match(AND);
				State = 318;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 315; cEffect();
					}
					}
					State = 320;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 321; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PEffectContext pEffect() {
			return GetRuleContext<PEffectContext>(0);
		}
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_cEffect);
		try {
			State = 338;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; Match(LB);
				State = 326; Match(FORALL);
				State = 327; listVariable();
				State = 328; effect();
				State = 329; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331; Match(LB);
				State = 332; Match(WHEN);
				State = 333; gd();
				State = 334; condEffect();
				State = 335; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 337; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaContext atomicFormula() {
			return GetRuleContext<AtomicFormulaContext>(0);
		}
		public PEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PEffectContext pEffect() {
		PEffectContext _localctx = new PEffectContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_pEffect);
		try {
			State = 346;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340; Match(LB);
				State = 341; Match(NOT);
				State = 342; atomicFormula();
				State = 343; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345; atomicFormula();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<PEffectContext> pEffect() {
			return GetRuleContexts<PEffectContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public PEffectContext pEffect(int i) {
			return GetRuleContext<PEffectContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCondEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCondEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_condEffect);
		int _la;
		try {
			State = 358;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; Match(LB);
				State = 349; Match(AND);
				State = 353;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 350; pEffect();
					}
					}
					State = 355;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 356; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode FUNSYM() { return GetToken(PlanningParser.FUNSYM, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public FunctionTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterFunctionTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitFunctionTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTermContext functionTerm() {
		FunctionTermContext _localctx = new FunctionTermContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_functionTerm);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(FUNSYM);
			State = 364;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 361; term();
					}
					} 
				}
				State = 366;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problem; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterProblem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitProblem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemContext problem() {
		ProblemContext _localctx = new ProblemContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_problem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(LB);
			State = 368; Match(DEF);
			State = 369; Match(LB);
			State = 370; Match(PROM);
			State = 371; Match(NAME);
			State = 372; Match(RB);
			State = 373; Match(LB);
			State = 374; Match(COLON);
			State = 375; Match(DOM);
			State = 376; Match(NAME);
			State = 377; Match(RB);
			State = 379;
			_la = _input.La(1);
			if (_la==LB) {
				{
				State = 378; requireDefine();
				}
			}

			State = 381; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(LB);
			State = 384; Match(COLON);
			State = 385; Match(OBJS);
			State = 386; listName();
			State = 387; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(LB);
			State = 390; Match(COLON);
			State = 391; Match(INIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x37\x18C\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2N\n"+
		"\x2\x3\x2\x5\x2Q\n\x2\x3\x2\x5\x2T\n\x2\x3\x2\a\x2W\n\x2\f\x2\xE\x2Z\v"+
		"\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3\x62\n\x3\r\x3\xE\x3\x63"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4j\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x6\b|\n\b\r\b\xE"+
		"\b}\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3"+
		"\f\x3\f\x6\f\x8F\n\f\r\f\xE\f\x90\x3\f\x3\f\x5\f\x95\n\f\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x5\x10\xAA\n\x10\x3\x10\x3\x10\x3\x10"+
		"\x5\x10\xAF\n\x10\x3\x11\x3\x11\x3\x11\x5\x11\xB4\n\x11\x3\x12\x3\x12"+
		"\x3\x12\x5\x12\xB9\n\x12\x3\x13\x6\x13\xBC\n\x13\r\x13\xE\x13\xBD\x3\x14"+
		"\a\x14\xC1\n\x14\f\x14\xE\x14\xC4\v\x14\x3\x14\x6\x14\xC7\n\x14\r\x14"+
		"\xE\x14\xC8\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xCF\n\x14\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\a\x15\xD5\n\x15\f\x15\xE\x15\xD8\v\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xE1\n\x15\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\xEA\n\x16\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\a\x18\xF3\n\x18\f\x18\xE\x18\xF6\v\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\a\x18\xFC\n\x18\f\x18\xE\x18\xFF\v\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x5\x18\x118\n\x18\x3\x19\x3\x19\x3\x19\a\x19\x11D\n\x19\f"+
		"\x19\xE\x19\x120\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x127\n"+
		"\x19\f\x19\xE\x19\x12A\v\x19\x3\x19\x5\x19\x12D\n\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x135\n\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x13A\n\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\x13F\n\x1C\f\x1C\xE\x1C\x142\v"+
		"\x1C\x3\x1C\x3\x1C\x5\x1C\x146\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x155\n"+
		"\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x15D\n\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\a\x1F\x162\n\x1F\f\x1F\xE\x1F\x165\v\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x169\n\x1F\x3 \x3 \a \x16D\n \f \xE \x170\v \x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x17E\n!\x3!\x3!\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x2\x2\x2$\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f"+
		"\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x2\x3\x4\x2\r\r\x31\x31\x195\x2\x46\x3\x2\x2"+
		"\x2\x4]\x3\x2\x2\x2\x6i\x3\x2\x2\x2\bk\x3\x2\x2\x2\nn\x3\x2\x2\x2\fq\x3"+
		"\x2\x2\x2\xEw\x3\x2\x2\x2\x10\x81\x3\x2\x2\x2\x12\x86\x3\x2\x2\x2\x14"+
		"\x88\x3\x2\x2\x2\x16\x94\x3\x2\x2\x2\x18\x96\x3\x2\x2\x2\x1A\x98\x3\x2"+
		"\x2\x2\x1C\xA4\x3\x2\x2\x2\x1E\xA9\x3\x2\x2\x2 \xB3\x3\x2\x2\x2\"\xB8"+
		"\x3\x2\x2\x2$\xBB\x3\x2\x2\x2&\xCE\x3\x2\x2\x2(\xE0\x3\x2\x2\x2*\xE9\x3"+
		"\x2\x2\x2,\xEB\x3\x2\x2\x2.\x117\x3\x2\x2\x2\x30\x12C\x3\x2\x2\x2\x32"+
		"\x134\x3\x2\x2\x2\x34\x139\x3\x2\x2\x2\x36\x145\x3\x2\x2\x2\x38\x154\x3"+
		"\x2\x2\x2:\x15C\x3\x2\x2\x2<\x168\x3\x2\x2\x2>\x16A\x3\x2\x2\x2@\x171"+
		"\x3\x2\x2\x2\x42\x181\x3\x2\x2\x2\x44\x187\x3\x2\x2\x2\x46G\a\x13\x2\x2"+
		"GH\a\x5\x2\x2HI\a\x13\x2\x2IJ\a\x3\x2\x2JK\a\x31\x2\x2KM\a\x14\x2\x2L"+
		"N\x5\x4\x3\x2ML\x3\x2\x2\x2MN\x3\x2\x2\x2NP\x3\x2\x2\x2OQ\x5\f\a\x2PO"+
		"\x3\x2\x2\x2PQ\x3\x2\x2\x2QS\x3\x2\x2\x2RT\x5\xE\b\x2SR\x3\x2\x2\x2ST"+
		"\x3\x2\x2\x2TX\x3\x2\x2\x2UW\x5\x18\r\x2VU\x3\x2\x2\x2WZ\x3\x2\x2\x2X"+
		"V\x3\x2\x2\x2XY\x3\x2\x2\x2Y[\x3\x2\x2\x2ZX\x3\x2\x2\x2[\\\a\x14\x2\x2"+
		"\\\x3\x3\x2\x2\x2]^\a\x13\x2\x2^_\a\x17\x2\x2_\x61\a\x6\x2\x2`\x62\x5"+
		"\x6\x4\x2\x61`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63"+
		"\x64\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\a\x14\x2\x2\x66\x5\x3\x2"+
		"\x2\x2gj\x5\b\x5\x2hj\x5\n\x6\x2ig\x3\x2\x2\x2ih\x3\x2\x2\x2j\a\x3\x2"+
		"\x2\x2kl\a\x17\x2\x2lm\a\x11\x2\x2m\t\x3\x2\x2\x2no\a\x17\x2\x2op\a\x12"+
		"\x2\x2p\v\x3\x2\x2\x2qr\a\x13\x2\x2rs\a\x17\x2\x2st\a\a\x2\x2tu\x5$\x13"+
		"\x2uv\a\x14\x2\x2v\r\x3\x2\x2\x2wx\a\x13\x2\x2xy\a\x17\x2\x2y{\a\b\x2"+
		"\x2z|\x5\x10\t\x2{z\x3\x2\x2\x2|}\x3\x2\x2\x2}{\x3\x2\x2\x2}~\x3\x2\x2"+
		"\x2~\x7F\x3\x2\x2\x2\x7F\x80\a\x14\x2\x2\x80\xF\x3\x2\x2\x2\x81\x82\a"+
		"\x13\x2\x2\x82\x83\x5\x12\n\x2\x83\x84\x5&\x14\x2\x84\x85\a\x14\x2\x2"+
		"\x85\x11\x3\x2\x2\x2\x86\x87\a\x31\x2\x2\x87\x13\x3\x2\x2\x2\x88\x89\t"+
		"\x2\x2\x2\x89\x15\x3\x2\x2\x2\x8A\x95\x5\x14\v\x2\x8B\x8C\a\x13\x2\x2"+
		"\x8C\x8E\a\xE\x2\x2\x8D\x8F\x5\x14\v\x2\x8E\x8D\x3\x2\x2\x2\x8F\x90\x3"+
		"\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2"+
		"\x92\x93\a\x14\x2\x2\x93\x95\x3\x2\x2\x2\x94\x8A\x3\x2\x2\x2\x94\x8B\x3"+
		"\x2\x2\x2\x95\x17\x3\x2\x2\x2\x96\x97\x5\x1A\xE\x2\x97\x19\x3\x2\x2\x2"+
		"\x98\x99\a\x13\x2\x2\x99\x9A\a\x17\x2\x2\x9A\x9B\a\t\x2\x2\x9B\x9C\x5"+
		"\x1C\xF\x2\x9C\x9D\a\x17\x2\x2\x9D\x9E\a\n\x2\x2\x9E\x9F\a\x13\x2\x2\x9F"+
		"\xA0\x5&\x14\x2\xA0\xA1\a\x14\x2\x2\xA1\xA2\x5\x1E\x10\x2\xA2\xA3\a\x14"+
		"\x2\x2\xA3\x1B\x3\x2\x2\x2\xA4\xA5\a\x31\x2\x2\xA5\x1D\x3\x2\x2\x2\xA6"+
		"\xA7\a\x17\x2\x2\xA7\xA8\a\v\x2\x2\xA8\xAA\x5 \x11\x2\xA9\xA6\x3\x2\x2"+
		"\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAE\x3\x2\x2\x2\xAB\xAC\a\x17\x2\x2\xAC\xAD"+
		"\a\f\x2\x2\xAD\xAF\x5\"\x12\x2\xAE\xAB\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2"+
		"\xAF\x1F\x3\x2\x2\x2\xB0\xB4\x5(\x15\x2\xB1\xB2\a\x13\x2\x2\xB2\xB4\a"+
		"\x14\x2\x2\xB3\xB0\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4!\x3\x2\x2\x2\xB5"+
		"\xB9\x5\x36\x1C\x2\xB6\xB7\a\x13\x2\x2\xB7\xB9\a\x14\x2\x2\xB8\xB5\x3"+
		"\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9#\x3\x2\x2\x2\xBA\xBC\a\x31\x2\x2\xBB"+
		"\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBE\x3\x2"+
		"\x2\x2\xBE%\x3\x2\x2\x2\xBF\xC1\a\x35\x2\x2\xC0\xBF\x3\x2\x2\x2\xC1\xC4"+
		"\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xCF\x3\x2\x2"+
		"\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC7\a\x35\x2\x2\xC6\xC5\x3\x2\x2\x2\xC7\xC8"+
		"\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCA\x3\x2\x2"+
		"\x2\xCA\xCB\a\x1B\x2\x2\xCB\xCC\x5\x16\f\x2\xCC\xCD\x5&\x14\x2\xCD\xCF"+
		"\x3\x2\x2\x2\xCE\xC2\x3\x2\x2\x2\xCE\xC6\x3\x2\x2\x2\xCF\'\x3\x2\x2\x2"+
		"\xD0\xE1\x5*\x16\x2\xD1\xD2\a\x13\x2\x2\xD2\xD6\a%\x2\x2\xD3\xD5\x5(\x15"+
		"\x2\xD4\xD3\x3\x2\x2\x2\xD5\xD8\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD6\xD7"+
		"\x3\x2\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD9\xE1\a\x14\x2"+
		"\x2\xDA\xDB\a\x13\x2\x2\xDB\xDC\a)\x2\x2\xDC\xDD\x5&\x14\x2\xDD\xDE\x5"+
		"(\x15\x2\xDE\xDF\a\x14\x2\x2\xDF\xE1\x3\x2\x2\x2\xE0\xD0\x3\x2\x2\x2\xE0"+
		"\xD1\x3\x2\x2\x2\xE0\xDA\x3\x2\x2\x2\xE1)\x3\x2\x2\x2\xE2\xEA\x5.\x18"+
		"\x2\xE3\xE4\a\x13\x2\x2\xE4\xE5\a,\x2\x2\xE5\xE6\x5,\x17\x2\xE6\xE7\x5"+
		".\x18\x2\xE7\xE8\a\x14\x2\x2\xE8\xEA\x3\x2\x2\x2\xE9\xE2\x3\x2\x2\x2\xE9"+
		"\xE3\x3\x2\x2\x2\xEA+\x3\x2\x2\x2\xEB\xEC\a\x31\x2\x2\xEC-\x3\x2\x2\x2"+
		"\xED\x118\x5\x30\x19\x2\xEE\x118\x5\x32\x1A\x2\xEF\xF0\a\x13\x2\x2\xF0"+
		"\xF4\a%\x2\x2\xF1\xF3\x5.\x18\x2\xF2\xF1\x3\x2\x2\x2\xF3\xF6\x3\x2\x2"+
		"\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6\xF4"+
		"\x3\x2\x2\x2\xF7\x118\a\x14\x2\x2\xF8\xF9\a\x13\x2\x2\xF9\xFD\a&\x2\x2"+
		"\xFA\xFC\x5.\x18\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFF\x3\x2\x2\x2\xFD\xFB\x3"+
		"\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2"+
		"\x100\x118\a\x14\x2\x2\x101\x102\a\x13\x2\x2\x102\x103\a(\x2\x2\x103\x104"+
		"\x5.\x18\x2\x104\x105\x5.\x18\x2\x105\x106\a\x14\x2\x2\x106\x118\x3\x2"+
		"\x2\x2\x107\x108\a\x13\x2\x2\x108\x109\a*\x2\x2\x109\x10A\a\x13\x2\x2"+
		"\x10A\x10B\x5&\x14\x2\x10B\x10C\a\x14\x2\x2\x10C\x10D\x5.\x18\x2\x10D"+
		"\x10E\a\x14\x2\x2\x10E\x118\x3\x2\x2\x2\x10F\x110\a\x13\x2\x2\x110\x111"+
		"\a)\x2\x2\x111\x112\a\x13\x2\x2\x112\x113\x5&\x14\x2\x113\x114\a\x14\x2"+
		"\x2\x114\x115\x5.\x18\x2\x115\x116\a\x14\x2\x2\x116\x118\x3\x2\x2\x2\x117"+
		"\xED\x3\x2\x2\x2\x117\xEE\x3\x2\x2\x2\x117\xEF\x3\x2\x2\x2\x117\xF8\x3"+
		"\x2\x2\x2\x117\x101\x3\x2\x2\x2\x117\x107\x3\x2\x2\x2\x117\x10F\x3\x2"+
		"\x2\x2\x118/\x3\x2\x2\x2\x119\x11A\a\x13\x2\x2\x11A\x11E\x5\x12\n\x2\x11B"+
		"\x11D\x5\x34\x1B\x2\x11C\x11B\x3\x2\x2\x2\x11D\x120\x3\x2\x2\x2\x11E\x11C"+
		"\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x121\x3\x2\x2\x2\x120\x11E\x3"+
		"\x2\x2\x2\x121\x122\a\x14\x2\x2\x122\x12D\x3\x2\x2\x2\x123\x124\a\x13"+
		"\x2\x2\x124\x128\a \x2\x2\x125\x127\x5\x34\x1B\x2\x126\x125\x3\x2\x2\x2"+
		"\x127\x12A\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129"+
		"\x12B\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12B\x12D\a\x14\x2\x2\x12C\x119"+
		"\x3\x2\x2\x2\x12C\x123\x3\x2\x2\x2\x12D\x31\x3\x2\x2\x2\x12E\x135\x5\x30"+
		"\x19\x2\x12F\x130\a\x13\x2\x2\x130\x131\a\'\x2\x2\x131\x132\x5\x30\x19"+
		"\x2\x132\x133\a\x14\x2\x2\x133\x135\x3\x2\x2\x2\x134\x12E\x3\x2\x2\x2"+
		"\x134\x12F\x3\x2\x2\x2\x135\x33\x3\x2\x2\x2\x136\x13A\a\x31\x2\x2\x137"+
		"\x13A\a\x35\x2\x2\x138\x13A\x5> \x2\x139\x136\x3\x2\x2\x2\x139\x137\x3"+
		"\x2\x2\x2\x139\x138\x3\x2\x2\x2\x13A\x35\x3\x2\x2\x2\x13B\x13C\a\x13\x2"+
		"\x2\x13C\x140\a%\x2\x2\x13D\x13F\x5\x38\x1D\x2\x13E\x13D\x3\x2\x2\x2\x13F"+
		"\x142\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x143"+
		"\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x143\x146\a\x14\x2\x2\x144\x146\x5"+
		"\x38\x1D\x2\x145\x13B\x3\x2\x2\x2\x145\x144\x3\x2\x2\x2\x146\x37\x3\x2"+
		"\x2\x2\x147\x148\a\x13\x2\x2\x148\x149\a)\x2\x2\x149\x14A\x5&\x14\x2\x14A"+
		"\x14B\x5\x36\x1C\x2\x14B\x14C\a\x14\x2\x2\x14C\x155\x3\x2\x2\x2\x14D\x14E"+
		"\a\x13\x2\x2\x14E\x14F\a+\x2\x2\x14F\x150\x5.\x18\x2\x150\x151\x5<\x1F"+
		"\x2\x151\x152\a\x14\x2\x2\x152\x155\x3\x2\x2\x2\x153\x155\x5:\x1E\x2\x154"+
		"\x147\x3\x2\x2\x2\x154\x14D\x3\x2\x2\x2\x154\x153\x3\x2\x2\x2\x155\x39"+
		"\x3\x2\x2\x2\x156\x157\a\x13\x2\x2\x157\x158\a\'\x2\x2\x158\x159\x5\x30"+
		"\x19\x2\x159\x15A\a\x14\x2\x2\x15A\x15D\x3\x2\x2\x2\x15B\x15D\x5\x30\x19"+
		"\x2\x15C\x156\x3\x2\x2\x2\x15C\x15B\x3\x2\x2\x2\x15D;\x3\x2\x2\x2\x15E"+
		"\x15F\a\x13\x2\x2\x15F\x163\a%\x2\x2\x160\x162\x5:\x1E\x2\x161\x160\x3"+
		"\x2\x2\x2\x162\x165\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x163\x164\x3\x2"+
		"\x2\x2\x164\x166\x3\x2\x2\x2\x165\x163\x3\x2\x2\x2\x166\x169\a\x14\x2"+
		"\x2\x167\x169\x5:\x1E\x2\x168\x15E\x3\x2\x2\x2\x168\x167\x3\x2\x2\x2\x169"+
		"=\x3\x2\x2\x2\x16A\x16E\a\x36\x2\x2\x16B\x16D\x5\x34\x1B\x2\x16C\x16B"+
		"\x3\x2\x2\x2\x16D\x170\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3"+
		"\x2\x2\x2\x16F?\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x171\x172\a\x13\x2\x2"+
		"\x172\x173\a\x5\x2\x2\x173\x174\a\x13\x2\x2\x174\x175\a\x4\x2\x2\x175"+
		"\x176\a\x31\x2\x2\x176\x177\a\x14\x2\x2\x177\x178\a\x13\x2\x2\x178\x179"+
		"\a\x17\x2\x2\x179\x17A\a\x3\x2\x2\x17A\x17B\a\x31\x2\x2\x17B\x17D\a\x14"+
		"\x2\x2\x17C\x17E\x5\x4\x3\x2\x17D\x17C\x3\x2\x2\x2\x17D\x17E\x3\x2\x2"+
		"\x2\x17E\x17F\x3\x2\x2\x2\x17F\x180\a\x14\x2\x2\x180\x41\x3\x2\x2\x2\x181"+
		"\x182\a\x13\x2\x2\x182\x183\a\x17\x2\x2\x183\x184\a\xF\x2\x2\x184\x185"+
		"\x5$\x13\x2\x185\x186\a\x14\x2\x2\x186\x43\x3\x2\x2\x2\x187\x188\a\x13"+
		"\x2\x2\x188\x189\a\x17\x2\x2\x189\x18A\a\x10\x2\x2\x18A\x45\x3\x2\x2\x2"+
		"&MPSX\x63i}\x90\x94\xA9\xAE\xB3\xB8\xBD\xC2\xC8\xCE\xD6\xE0\xE9\xF4\xFD"+
		"\x117\x11E\x128\x12C\x134\x139\x140\x145\x154\x15C\x163\x168\x16E\x17D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
