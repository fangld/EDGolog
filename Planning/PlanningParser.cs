//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\Planning.g4 by ANTLR 4.2.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOM=1, PROM=2, DEF=3, REQ=4, TYPE=5, PRED=6, ACT=7, PARM=8, PRE=9, EFF=10, 
		OBJ=11, EITHER=12, OBJS=13, INIT=14, GOAL=15, AT=16, STRIPS=17, TYPING=18, 
		LB=19, RB=20, LSB=21, RSB=22, COLON=23, QM=24, COMMA=25, UL=26, DASH=27, 
		PLUS=28, MINUS=29, MULT=30, DIV=31, EQ=32, LT=33, LEQ=34, GT=35, GEQ=36, 
		AND=37, OR=38, NOT=39, IMPLY=40, FORALL=41, EXISTS=42, WHEN=43, PREF=44, 
		BINCOMP=45, BINOP=46, LETTER=47, DIGIT=48, NAME=49, CHAR=50, NUMBER=51, 
		DECIMAL=52, VAR=53, FUNSYM=54, WS=55;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'requirements'", "'types'", 
		"'predicates'", "'action'", "'parameters'", "'precondition'", "'effect'", 
		"'object'", "'either'", "'objects'", "'init'", "'goal'", "'at'", "'strips'", 
		"'typing'", "'('", "')'", "'['", "']'", "':'", "'?'", "'.'", "'_'", "DASH", 
		"'+'", "MINUS", "'*'", "'/'", "'='", "'<'", "'<='", "'>'", "'>='", "'and'", 
		"'or'", "'not'", "'imply'", "'forall'", "'exists'", "'when'", "'preference'", 
		"BINCOMP", "BINOP", "LETTER", "DIGIT", "NAME", "CHAR", "NUMBER", "DECIMAL", 
		"VAR", "FUNSYM", "WS"
	};
	public const int
		RULE_domain = 0, RULE_requireDefine = 1, RULE_requireKey = 2, RULE_strips = 3, 
		RULE_typing = 4, RULE_typeDefine = 5, RULE_predicatesDefine = 6, RULE_atomicFormulaSkeleton = 7, 
		RULE_predicate = 8, RULE_primitiveType = 9, RULE_type = 10, RULE_structureDefine = 11, 
		RULE_actionDefine = 12, RULE_actionSymbol = 13, RULE_actionDefBody = 14, 
		RULE_emptyOrPreGD = 15, RULE_emptyOrEffect = 16, RULE_listName = 17, RULE_listVariable = 18, 
		RULE_preGD = 19, RULE_prefGD = 20, RULE_prefName = 21, RULE_gd = 22, RULE_atomicFormulaTerm = 23, 
		RULE_literalTerm = 24, RULE_term = 25, RULE_effect = 26, RULE_cEffect = 27, 
		RULE_pEffect = 28, RULE_condEffect = 29, RULE_functionTerm = 30, RULE_problem = 31, 
		RULE_problemName = 32, RULE_domainName = 33, RULE_objectDeclaration = 34, 
		RULE_init = 35, RULE_gdName = 36, RULE_atomicFormulaName = 37, RULE_literalName = 38;
	public static readonly string[] ruleNames = {
		"domain", "requireDefine", "requireKey", "strips", "typing", "typeDefine", 
		"predicatesDefine", "atomicFormulaSkeleton", "predicate", "primitiveType", 
		"type", "structureDefine", "actionDefine", "actionSymbol", "actionDefBody", 
		"emptyOrPreGD", "emptyOrEffect", "listName", "listVariable", "preGD", 
		"prefGD", "prefName", "gd", "atomicFormulaTerm", "literalTerm", "term", 
		"effect", "cEffect", "pEffect", "condEffect", "functionTerm", "problem", 
		"problemName", "domainName", "objectDeclaration", "init", "gdName", "atomicFormulaName", 
		"literalName"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<StructureDefineContext> structureDefine() {
			return GetRuleContexts<StructureDefineContext>();
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicatesDefineContext predicatesDefine() {
			return GetRuleContext<PredicatesDefineContext>(0);
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public StructureDefineContext structureDefine(int i) {
			return GetRuleContext<StructureDefineContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterDomain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitDomain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(LB);
			State = 79; Match(DEF);
			State = 80; Match(LB);
			State = 81; Match(DOM);
			State = 82; Match(NAME);
			State = 83; Match(RB);
			State = 85;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 84; requireDefine();
				}
				break;
			}
			State = 88;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 87; typeDefine();
				}
				break;
			}
			State = 91;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 90; predicatesDefine();
				}
				break;
			}
			State = 96;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 93; structureDefine();
				}
				}
				State = 98;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 99; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireDefineContext : ParserRuleContext {
		public RequireKeyContext requireKey(int i) {
			return GetRuleContext<RequireKeyContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode REQ() { return GetToken(PlanningParser.REQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<RequireKeyContext> requireKey() {
			return GetRuleContexts<RequireKeyContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public RequireDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterRequireDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitRequireDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireDefineContext requireDefine() {
		RequireDefineContext _localctx = new RequireDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_requireDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(LB);
			State = 102; Match(COLON);
			State = 103; Match(REQ);
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 104; requireKey();
				}
				}
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==COLON );
			State = 109; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireKeyContext : ParserRuleContext {
		public StripsContext strips() {
			return GetRuleContext<StripsContext>(0);
		}
		public TypingContext typing() {
			return GetRuleContext<TypingContext>(0);
		}
		public RequireKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireKey; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterRequireKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitRequireKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireKeyContext requireKey() {
		RequireKeyContext _localctx = new RequireKeyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_requireKey);
		try {
			State = 113;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111; strips();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; typing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StripsContext : ParserRuleContext {
		public ITerminalNode STRIPS() { return GetToken(PlanningParser.STRIPS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public StripsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_strips; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterStrips(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitStrips(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrips(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StripsContext strips() {
		StripsContext _localctx = new StripsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_strips);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(COLON);
			State = 116; Match(STRIPS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypingContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPING() { return GetToken(PlanningParser.TYPING, 0); }
		public TypingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typing; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTyping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTyping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypingContext typing() {
		TypingContext _localctx = new TypingContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_typing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(COLON);
			State = 119; Match(TYPING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTypeDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTypeDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(LB);
			State = 122; Match(COLON);
			State = 123; Match(TYPE);
			State = 124; listName();
			State = 125; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public IReadOnlyList<AtomicFormulaSkeletonContext> atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningParser.PRED, 0); }
		public PredicatesDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicatesDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicatesDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicatesDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatesDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatesDefineContext predicatesDefine() {
		PredicatesDefineContext _localctx = new PredicatesDefineContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_predicatesDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(LB);
			State = 128; Match(COLON);
			State = 129; Match(PRED);
			State = 131;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 130; atomicFormulaSkeleton();
				}
				}
				State = 133;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 135; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaSkeleton; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaSkeleton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaSkeleton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaSkeleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(LB);
			State = 138; predicate();
			State = 139; listVariable();
			State = 140; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = _input.La(1);
			if ( !(_la==OBJ || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ITerminalNode EITHER() { return GetToken(PlanningParser.EITHER, 0); }
		public IReadOnlyList<PrimitiveTypeContext> primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			State = 156;
			switch (_input.La(1)) {
			case OBJ:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; primitiveType();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; Match(LB);
				State = 148; Match(EITHER);
				State = 150;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 149; primitiveType();
					}
					}
					State = 152;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OBJ || _la==NAME );
				State = 154; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDefineContext : ParserRuleContext {
		public ActionDefineContext actionDefine() {
			return GetRuleContext<ActionDefineContext>(0);
		}
		public StructureDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_structureDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterStructureDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitStructureDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDefineContext structureDefine() {
		StructureDefineContext _localctx = new StructureDefineContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_structureDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; actionDefine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ActionDefBodyContext actionDefBody() {
			return GetRuleContext<ActionDefBodyContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_actionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(LB);
			State = 161; Match(COLON);
			State = 162; Match(ACT);
			State = 163; actionSymbol();
			State = 164; Match(COLON);
			State = 165; Match(PARM);
			State = 166; Match(LB);
			State = 167; listVariable();
			State = 168; Match(RB);
			State = 169; actionDefBody();
			State = 170; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefBodyContext : ParserRuleContext {
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningParser.EFF, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefBody; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefBodyContext actionDefBody() {
		ActionDefBodyContext _localctx = new ActionDefBodyContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_actionDefBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 174; Match(COLON);
				State = 175; Match(PRE);
				State = 176; emptyOrPreGD();
				}
				break;
			}
			State = 182;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 179; Match(COLON);
				State = 180; Match(EFF);
				State = 181; emptyOrEffect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PreGDContext preGD() {
			return GetRuleContext<PreGDContext>(0);
		}
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrPreGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_emptyOrPreGD);
		try {
			State = 187;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; preGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; Match(LB);
				State = 186; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_emptyOrEffect);
		try {
			State = 192;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; Match(LB);
				State = 191; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_listName);
		int _la;
		try {
			State = 209;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 194; Match(NAME);
					}
					}
					State = 199;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 200; Match(NAME);
					}
					}
					State = 203;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NAME );
				State = 205; Match(DASH);
				State = 206; type();
				State = 207; listName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_listVariable);
		int _la;
		try {
			State = 226;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 211; Match(VAR);
					}
					}
					State = 216;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 217; Match(VAR);
					}
					}
					State = 220;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 222; Match(DASH);
				State = 223; type();
				State = 224; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PreGDContext preGD(int i) {
			return GetRuleContext<PreGDContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<PreGDContext> preGD() {
			return GetRuleContexts<PreGDContext>();
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public PrefGDContext prefGD() {
			return GetRuleContext<PrefGDContext>(0);
		}
		public PreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_preGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreGDContext preGD() {
		PreGDContext _localctx = new PreGDContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_preGD);
		int _la;
		try {
			State = 244;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; prefGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; Match(LB);
				State = 230; Match(AND);
				State = 234;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 231; preGD();
					}
					}
					State = 236;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 237; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238; Match(LB);
				State = 239; Match(FORALL);
				State = 240; listVariable();
				State = 241; preGD();
				State = 242; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode PREF() { return GetToken(PlanningParser.PREF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrefNameContext prefName() {
			return GetRuleContext<PrefNameContext>(0);
		}
		public PrefGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrefGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrefGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefGDContext prefGD() {
		PrefGDContext _localctx = new PrefGDContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_prefGD);
		try {
			State = 253;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247; Match(LB);
				State = 248; Match(PREF);
				State = 249; prefName();
				State = 250; gd();
				State = 251; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefNameContext prefName() {
		PrefNameContext _localctx = new PrefNameContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_prefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public LiteralTermContext literalTerm() {
			return GetRuleContext<LiteralTermContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterGd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitGd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_gd);
		int _la;
		try {
			State = 299;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258; literalTerm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 259; Match(LB);
				State = 260; Match(AND);
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 261; gd();
					}
					}
					State = 266;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 267; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 268; Match(LB);
				State = 269; Match(OR);
				State = 273;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 270; gd();
					}
					}
					State = 275;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 276; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 277; Match(LB);
				State = 278; Match(IMPLY);
				State = 279; gd();
				State = 280; gd();
				State = 281; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 283; Match(LB);
				State = 284; Match(EXISTS);
				State = 285; Match(LB);
				State = 286; listVariable();
				State = 287; Match(RB);
				State = 288; gd();
				State = 289; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 291; Match(LB);
				State = 292; Match(FORALL);
				State = 293; Match(LB);
				State = 294; listVariable();
				State = 295; Match(RB);
				State = 296; gd();
				State = 297; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaTermContext atomicFormulaTerm() {
		AtomicFormulaTermContext _localctx = new AtomicFormulaTermContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_atomicFormulaTerm);
		int _la;
		try {
			State = 320;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; Match(LB);
				State = 302; predicate();
				State = 306;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 303; term();
					}
					}
					State = 308;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 309; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311; Match(LB);
				State = 312; Match(EQ);
				State = 316;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 313; term();
					}
					}
					State = 318;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 319; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTermContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public LiteralTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterLiteralTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitLiteralTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTermContext literalTerm() {
		LiteralTermContext _localctx = new LiteralTermContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_literalTerm);
		try {
			State = 328;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323; Match(LB);
				State = 324; Match(NOT);
				State = 325; atomicFormulaTerm();
				State = 326; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public FunctionTermContext functionTerm() {
			return GetRuleContext<FunctionTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_term);
		try {
			State = 333;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330; Match(NAME);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331; Match(VAR);
				}
				break;
			case FUNSYM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 332; functionTerm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_effect);
		int _la;
		try {
			State = 345;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335; Match(LB);
				State = 336; Match(AND);
				State = 340;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 337; cEffect();
					}
					}
					State = 342;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 343; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PEffectContext pEffect() {
			return GetRuleContext<PEffectContext>(0);
		}
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_cEffect);
		try {
			State = 360;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347; Match(LB);
				State = 348; Match(FORALL);
				State = 349; listVariable();
				State = 350; effect();
				State = 351; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353; Match(LB);
				State = 354; Match(WHEN);
				State = 355; gd();
				State = 356; condEffect();
				State = 357; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public PEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PEffectContext pEffect() {
		PEffectContext _localctx = new PEffectContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_pEffect);
		try {
			State = 368;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362; Match(LB);
				State = 363; Match(NOT);
				State = 364; atomicFormulaTerm();
				State = 365; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367; atomicFormulaTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<PEffectContext> pEffect() {
			return GetRuleContexts<PEffectContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public PEffectContext pEffect(int i) {
			return GetRuleContext<PEffectContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCondEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCondEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_condEffect);
		int _la;
		try {
			State = 380;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 370; Match(LB);
				State = 371; Match(AND);
				State = 375;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 372; pEffect();
					}
					}
					State = 377;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 378; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 379; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode FUNSYM() { return GetToken(PlanningParser.FUNSYM, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public FunctionTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterFunctionTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitFunctionTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTermContext functionTerm() {
		FunctionTermContext _localctx = new FunctionTermContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_functionTerm);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; Match(FUNSYM);
			State = 386;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 383; term();
					}
					} 
				}
				State = 388;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problem; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterProblem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitProblem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemContext problem() {
		ProblemContext _localctx = new ProblemContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_problem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(LB);
			State = 390; Match(DEF);
			State = 391; Match(LB);
			State = 392; Match(PROM);
			State = 393; problemName();
			State = 394; Match(RB);
			State = 395; Match(LB);
			State = 396; Match(COLON);
			State = 397; Match(DOM);
			State = 398; domainName();
			State = 399; Match(RB);
			State = 401;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 400; requireDefine();
				}
				break;
			}
			State = 404;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 403; objectDeclaration();
				}
				break;
			}
			State = 406; init();
			State = 407; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problemName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterProblemName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitProblemName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domainName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterDomainName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitDomainName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(LB);
			State = 414; Match(COLON);
			State = 415; Match(OBJS);
			State = 416; listName();
			State = 417; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public GdNameContext gdName() {
			return GetRuleContext<GdNameContext>(0);
		}
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(LB);
			State = 420; Match(COLON);
			State = 421; Match(INIT);
			State = 422; gdName();
			State = 423; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdNameContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<GdNameContext> gdName() {
			return GetRuleContexts<GdNameContext>();
		}
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public GdNameContext gdName(int i) {
			return GetRuleContext<GdNameContext>(i);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public LiteralNameContext literalName() {
			return GetRuleContext<LiteralNameContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gdName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterGdName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitGdName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdNameContext gdName() {
		GdNameContext _localctx = new GdNameContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_gdName);
		int _la;
		try {
			State = 467;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 425; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426; literalName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 427; Match(LB);
				State = 428; Match(AND);
				State = 432;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 429; gdName();
					}
					}
					State = 434;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 435; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 436; Match(LB);
				State = 437; Match(OR);
				State = 441;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 438; gdName();
					}
					}
					State = 443;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 444; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 445; Match(LB);
				State = 446; Match(IMPLY);
				State = 447; gdName();
				State = 448; gdName();
				State = 449; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 451; Match(LB);
				State = 452; Match(EXISTS);
				State = 453; Match(LB);
				State = 454; listVariable();
				State = 455; Match(RB);
				State = 456; gd();
				State = 457; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 459; Match(LB);
				State = 460; Match(FORALL);
				State = 461; Match(LB);
				State = 462; listVariable();
				State = 463; Match(RB);
				State = 464; gd();
				State = 465; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public AtomicFormulaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaNameContext atomicFormulaName() {
		AtomicFormulaNameContext _localctx = new AtomicFormulaNameContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_atomicFormulaName);
		int _la;
		try {
			State = 488;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 469; Match(LB);
				State = 470; predicate();
				State = 474;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 471; Match(NAME);
					}
					}
					State = 476;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 477; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479; Match(LB);
				State = 480; Match(EQ);
				State = 484;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 481; Match(NAME);
					}
					}
					State = 486;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 487; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public LiteralNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterLiteralName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitLiteralName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNameContext literalName() {
		LiteralNameContext _localctx = new LiteralNameContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_literalName);
		try {
			State = 496;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 490; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 491; Match(LB);
				State = 492; Match(NOT);
				State = 493; atomicFormulaName();
				State = 494; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x39\x1F5\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2X\n\x2\x3\x2\x5\x2[\n\x2\x3\x2\x5\x2"+
		"^\n\x2\x3\x2\a\x2\x61\n\x2\f\x2\xE\x2\x64\v\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x6\x3l\n\x3\r\x3\xE\x3m\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4t\n"+
		"\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\b\x3\b\x3\b\x3\b\x6\b\x86\n\b\r\b\xE\b\x87\x3\b\x3\b\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x6\f\x99\n\f\r\f"+
		"\xE\f\x9A\x3\f\x3\f\x5\f\x9F\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x10\x5\x10\xB4\n\x10\x3\x10\x3\x10\x3\x10\x5\x10\xB9\n\x10\x3\x11"+
		"\x3\x11\x3\x11\x5\x11\xBE\n\x11\x3\x12\x3\x12\x3\x12\x5\x12\xC3\n\x12"+
		"\x3\x13\a\x13\xC6\n\x13\f\x13\xE\x13\xC9\v\x13\x3\x13\x6\x13\xCC\n\x13"+
		"\r\x13\xE\x13\xCD\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xD4\n\x13\x3\x14"+
		"\a\x14\xD7\n\x14\f\x14\xE\x14\xDA\v\x14\x3\x14\x6\x14\xDD\n\x14\r\x14"+
		"\xE\x14\xDE\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xE5\n\x14\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\a\x15\xEB\n\x15\f\x15\xE\x15\xEE\v\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xF7\n\x15\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x100\n\x16\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\a\x18\x109\n\x18\f\x18\xE\x18\x10C\v\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\a\x18\x112\n\x18\f\x18\xE\x18\x115\v\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x5\x18\x12E\n\x18\x3\x19\x3\x19\x3\x19\a\x19\x133\n"+
		"\x19\f\x19\xE\x19\x136\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x13D\n\x19\f\x19\xE\x19\x140\v\x19\x3\x19\x5\x19\x143\n\x19\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x14B\n\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x150\n\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\x155\n\x1C\f\x1C\xE\x1C"+
		"\x158\v\x1C\x3\x1C\x3\x1C\x5\x1C\x15C\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D"+
		"\x16B\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x173\n\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\a\x1F\x178\n\x1F\f\x1F\xE\x1F\x17B\v\x1F\x3\x1F"+
		"\x3\x1F\x5\x1F\x17F\n\x1F\x3 \x3 \a \x183\n \f \xE \x186\v \x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x194\n!\x3!\x5!\x197\n!\x3!"+
		"\x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x3&\x3&\x3&\x3&\x3&\a&\x1B1\n&\f&\xE&\x1B4\v&\x3&\x3&\x3&\x3&\a"+
		"&\x1BA\n&\f&\xE&\x1BD\v&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x1D6\n&\x3\'\x3\'\x3"+
		"\'\a\'\x1DB\n\'\f\'\xE\'\x1DE\v\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x1E5\n"+
		"\'\f\'\xE\'\x1E8\v\'\x3\'\x5\'\x1EB\n\'\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x1F3"+
		"\n(\x3(\x2\x2\x2)\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2"+
		".\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2"+
		"\x46\x2H\x2J\x2L\x2N\x2\x2\x3\x4\x2\r\r\x33\x33\x208\x2P\x3\x2\x2\x2\x4"+
		"g\x3\x2\x2\x2\x6s\x3\x2\x2\x2\bu\x3\x2\x2\x2\nx\x3\x2\x2\x2\f{\x3\x2\x2"+
		"\x2\xE\x81\x3\x2\x2\x2\x10\x8B\x3\x2\x2\x2\x12\x90\x3\x2\x2\x2\x14\x92"+
		"\x3\x2\x2\x2\x16\x9E\x3\x2\x2\x2\x18\xA0\x3\x2\x2\x2\x1A\xA2\x3\x2\x2"+
		"\x2\x1C\xAE\x3\x2\x2\x2\x1E\xB3\x3\x2\x2\x2 \xBD\x3\x2\x2\x2\"\xC2\x3"+
		"\x2\x2\x2$\xD3\x3\x2\x2\x2&\xE4\x3\x2\x2\x2(\xF6\x3\x2\x2\x2*\xFF\x3\x2"+
		"\x2\x2,\x101\x3\x2\x2\x2.\x12D\x3\x2\x2\x2\x30\x142\x3\x2\x2\x2\x32\x14A"+
		"\x3\x2\x2\x2\x34\x14F\x3\x2\x2\x2\x36\x15B\x3\x2\x2\x2\x38\x16A\x3\x2"+
		"\x2\x2:\x172\x3\x2\x2\x2<\x17E\x3\x2\x2\x2>\x180\x3\x2\x2\x2@\x187\x3"+
		"\x2\x2\x2\x42\x19B\x3\x2\x2\x2\x44\x19D\x3\x2\x2\x2\x46\x19F\x3\x2\x2"+
		"\x2H\x1A5\x3\x2\x2\x2J\x1D5\x3\x2\x2\x2L\x1EA\x3\x2\x2\x2N\x1F2\x3\x2"+
		"\x2\x2PQ\a\x15\x2\x2QR\a\x5\x2\x2RS\a\x15\x2\x2ST\a\x3\x2\x2TU\a\x33\x2"+
		"\x2UW\a\x16\x2\x2VX\x5\x4\x3\x2WV\x3\x2\x2\x2WX\x3\x2\x2\x2XZ\x3\x2\x2"+
		"\x2Y[\x5\f\a\x2ZY\x3\x2\x2\x2Z[\x3\x2\x2\x2[]\x3\x2\x2\x2\\^\x5\xE\b\x2"+
		"]\\\x3\x2\x2\x2]^\x3\x2\x2\x2^\x62\x3\x2\x2\x2_\x61\x5\x18\r\x2`_\x3\x2"+
		"\x2\x2\x61\x64\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x65"+
		"\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x65\x66\a\x16\x2\x2\x66\x3\x3\x2\x2\x2"+
		"gh\a\x15\x2\x2hi\a\x19\x2\x2ik\a\x6\x2\x2jl\x5\x6\x4\x2kj\x3\x2\x2\x2"+
		"lm\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2no\x3\x2\x2\x2op\a\x16\x2\x2"+
		"p\x5\x3\x2\x2\x2qt\x5\b\x5\x2rt\x5\n\x6\x2sq\x3\x2\x2\x2sr\x3\x2\x2\x2"+
		"t\a\x3\x2\x2\x2uv\a\x19\x2\x2vw\a\x13\x2\x2w\t\x3\x2\x2\x2xy\a\x19\x2"+
		"\x2yz\a\x14\x2\x2z\v\x3\x2\x2\x2{|\a\x15\x2\x2|}\a\x19\x2\x2}~\a\a\x2"+
		"\x2~\x7F\x5$\x13\x2\x7F\x80\a\x16\x2\x2\x80\r\x3\x2\x2\x2\x81\x82\a\x15"+
		"\x2\x2\x82\x83\a\x19\x2\x2\x83\x85\a\b\x2\x2\x84\x86\x5\x10\t\x2\x85\x84"+
		"\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2"+
		"\x2\x88\x89\x3\x2\x2\x2\x89\x8A\a\x16\x2\x2\x8A\xF\x3\x2\x2\x2\x8B\x8C"+
		"\a\x15\x2\x2\x8C\x8D\x5\x12\n\x2\x8D\x8E\x5&\x14\x2\x8E\x8F\a\x16\x2\x2"+
		"\x8F\x11\x3\x2\x2\x2\x90\x91\a\x33\x2\x2\x91\x13\x3\x2\x2\x2\x92\x93\t"+
		"\x2\x2\x2\x93\x15\x3\x2\x2\x2\x94\x9F\x5\x14\v\x2\x95\x96\a\x15\x2\x2"+
		"\x96\x98\a\xE\x2\x2\x97\x99\x5\x14\v\x2\x98\x97\x3\x2\x2\x2\x99\x9A\x3"+
		"\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2"+
		"\x9C\x9D\a\x16\x2\x2\x9D\x9F\x3\x2\x2\x2\x9E\x94\x3\x2\x2\x2\x9E\x95\x3"+
		"\x2\x2\x2\x9F\x17\x3\x2\x2\x2\xA0\xA1\x5\x1A\xE\x2\xA1\x19\x3\x2\x2\x2"+
		"\xA2\xA3\a\x15\x2\x2\xA3\xA4\a\x19\x2\x2\xA4\xA5\a\t\x2\x2\xA5\xA6\x5"+
		"\x1C\xF\x2\xA6\xA7\a\x19\x2\x2\xA7\xA8\a\n\x2\x2\xA8\xA9\a\x15\x2\x2\xA9"+
		"\xAA\x5&\x14\x2\xAA\xAB\a\x16\x2\x2\xAB\xAC\x5\x1E\x10\x2\xAC\xAD\a\x16"+
		"\x2\x2\xAD\x1B\x3\x2\x2\x2\xAE\xAF\a\x33\x2\x2\xAF\x1D\x3\x2\x2\x2\xB0"+
		"\xB1\a\x19\x2\x2\xB1\xB2\a\v\x2\x2\xB2\xB4\x5 \x11\x2\xB3\xB0\x3\x2\x2"+
		"\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB8\x3\x2\x2\x2\xB5\xB6\a\x19\x2\x2\xB6\xB7"+
		"\a\f\x2\x2\xB7\xB9\x5\"\x12\x2\xB8\xB5\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2"+
		"\xB9\x1F\x3\x2\x2\x2\xBA\xBE\x5(\x15\x2\xBB\xBC\a\x15\x2\x2\xBC\xBE\a"+
		"\x16\x2\x2\xBD\xBA\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE!\x3\x2\x2\x2\xBF"+
		"\xC3\x5\x36\x1C\x2\xC0\xC1\a\x15\x2\x2\xC1\xC3\a\x16\x2\x2\xC2\xBF\x3"+
		"\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3#\x3\x2\x2\x2\xC4\xC6\a\x33\x2\x2\xC5"+
		"\xC4\x3\x2\x2\x2\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2"+
		"\x2\x2\xC8\xD4\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCC\a\x33\x2\x2\xCB"+
		"\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2"+
		"\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD0\a\x1D\x2\x2\xD0\xD1\x5\x16\f\x2\xD1"+
		"\xD2\x5$\x13\x2\xD2\xD4\x3\x2\x2\x2\xD3\xC7\x3\x2\x2\x2\xD3\xCB\x3\x2"+
		"\x2\x2\xD4%\x3\x2\x2\x2\xD5\xD7\a\x37\x2\x2\xD6\xD5\x3\x2\x2\x2\xD7\xDA"+
		"\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xE5\x3\x2\x2"+
		"\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDD\a\x37\x2\x2\xDC\xDB\x3\x2\x2\x2\xDD\xDE"+
		"\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE0\x3\x2\x2"+
		"\x2\xE0\xE1\a\x1D\x2\x2\xE1\xE2\x5\x16\f\x2\xE2\xE3\x5&\x14\x2\xE3\xE5"+
		"\x3\x2\x2\x2\xE4\xD8\x3\x2\x2\x2\xE4\xDC\x3\x2\x2\x2\xE5\'\x3\x2\x2\x2"+
		"\xE6\xF7\x5*\x16\x2\xE7\xE8\a\x15\x2\x2\xE8\xEC\a\'\x2\x2\xE9\xEB\x5("+
		"\x15\x2\xEA\xE9\x3\x2\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC"+
		"\xED\x3\x2\x2\x2\xED\xEF\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF7\a\x16"+
		"\x2\x2\xF0\xF1\a\x15\x2\x2\xF1\xF2\a+\x2\x2\xF2\xF3\x5&\x14\x2\xF3\xF4"+
		"\x5(\x15\x2\xF4\xF5\a\x16\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6\xE6\x3\x2\x2\x2"+
		"\xF6\xE7\x3\x2\x2\x2\xF6\xF0\x3\x2\x2\x2\xF7)\x3\x2\x2\x2\xF8\x100\x5"+
		".\x18\x2\xF9\xFA\a\x15\x2\x2\xFA\xFB\a.\x2\x2\xFB\xFC\x5,\x17\x2\xFC\xFD"+
		"\x5.\x18\x2\xFD\xFE\a\x16\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xF8\x3\x2\x2"+
		"\x2\xFF\xF9\x3\x2\x2\x2\x100+\x3\x2\x2\x2\x101\x102\a\x33\x2\x2\x102-"+
		"\x3\x2\x2\x2\x103\x12E\x5\x30\x19\x2\x104\x12E\x5\x32\x1A\x2\x105\x106"+
		"\a\x15\x2\x2\x106\x10A\a\'\x2\x2\x107\x109\x5.\x18\x2\x108\x107\x3\x2"+
		"\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2"+
		"\x2\x10B\x10D\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x12E\a\x16\x2\x2"+
		"\x10E\x10F\a\x15\x2\x2\x10F\x113\a(\x2\x2\x110\x112\x5.\x18\x2\x111\x110"+
		"\x3\x2\x2\x2\x112\x115\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x114\x3"+
		"\x2\x2\x2\x114\x116\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x116\x12E\a\x16"+
		"\x2\x2\x117\x118\a\x15\x2\x2\x118\x119\a*\x2\x2\x119\x11A\x5.\x18\x2\x11A"+
		"\x11B\x5.\x18\x2\x11B\x11C\a\x16\x2\x2\x11C\x12E\x3\x2\x2\x2\x11D\x11E"+
		"\a\x15\x2\x2\x11E\x11F\a,\x2\x2\x11F\x120\a\x15\x2\x2\x120\x121\x5&\x14"+
		"\x2\x121\x122\a\x16\x2\x2\x122\x123\x5.\x18\x2\x123\x124\a\x16\x2\x2\x124"+
		"\x12E\x3\x2\x2\x2\x125\x126\a\x15\x2\x2\x126\x127\a+\x2\x2\x127\x128\a"+
		"\x15\x2\x2\x128\x129\x5&\x14\x2\x129\x12A\a\x16\x2\x2\x12A\x12B\x5.\x18"+
		"\x2\x12B\x12C\a\x16\x2\x2\x12C\x12E\x3\x2\x2\x2\x12D\x103\x3\x2\x2\x2"+
		"\x12D\x104\x3\x2\x2\x2\x12D\x105\x3\x2\x2\x2\x12D\x10E\x3\x2\x2\x2\x12D"+
		"\x117\x3\x2\x2\x2\x12D\x11D\x3\x2\x2\x2\x12D\x125\x3\x2\x2\x2\x12E/\x3"+
		"\x2\x2\x2\x12F\x130\a\x15\x2\x2\x130\x134\x5\x12\n\x2\x131\x133\x5\x34"+
		"\x1B\x2\x132\x131\x3\x2\x2\x2\x133\x136\x3\x2\x2\x2\x134\x132\x3\x2\x2"+
		"\x2\x134\x135\x3\x2\x2\x2\x135\x137\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2"+
		"\x137\x138\a\x16\x2\x2\x138\x143\x3\x2\x2\x2\x139\x13A\a\x15\x2\x2\x13A"+
		"\x13E\a\"\x2\x2\x13B\x13D\x5\x34\x1B\x2\x13C\x13B\x3\x2\x2\x2\x13D\x140"+
		"\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x141\x3"+
		"\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x141\x143\a\x16\x2\x2\x142\x12F\x3\x2"+
		"\x2\x2\x142\x139\x3\x2\x2\x2\x143\x31\x3\x2\x2\x2\x144\x14B\x5\x30\x19"+
		"\x2\x145\x146\a\x15\x2\x2\x146\x147\a)\x2\x2\x147\x148\x5\x30\x19\x2\x148"+
		"\x149\a\x16\x2\x2\x149\x14B\x3\x2\x2\x2\x14A\x144\x3\x2\x2\x2\x14A\x145"+
		"\x3\x2\x2\x2\x14B\x33\x3\x2\x2\x2\x14C\x150\a\x33\x2\x2\x14D\x150\a\x37"+
		"\x2\x2\x14E\x150\x5> \x2\x14F\x14C\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x14F"+
		"\x14E\x3\x2\x2\x2\x150\x35\x3\x2\x2\x2\x151\x152\a\x15\x2\x2\x152\x156"+
		"\a\'\x2\x2\x153\x155\x5\x38\x1D\x2\x154\x153\x3\x2\x2\x2\x155\x158\x3"+
		"\x2\x2\x2\x156\x154\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x159\x3\x2"+
		"\x2\x2\x158\x156\x3\x2\x2\x2\x159\x15C\a\x16\x2\x2\x15A\x15C\x5\x38\x1D"+
		"\x2\x15B\x151\x3\x2\x2\x2\x15B\x15A\x3\x2\x2\x2\x15C\x37\x3\x2\x2\x2\x15D"+
		"\x15E\a\x15\x2\x2\x15E\x15F\a+\x2\x2\x15F\x160\x5&\x14\x2\x160\x161\x5"+
		"\x36\x1C\x2\x161\x162\a\x16\x2\x2\x162\x16B\x3\x2\x2\x2\x163\x164\a\x15"+
		"\x2\x2\x164\x165\a-\x2\x2\x165\x166\x5.\x18\x2\x166\x167\x5<\x1F\x2\x167"+
		"\x168\a\x16\x2\x2\x168\x16B\x3\x2\x2\x2\x169\x16B\x5:\x1E\x2\x16A\x15D"+
		"\x3\x2\x2\x2\x16A\x163\x3\x2\x2\x2\x16A\x169\x3\x2\x2\x2\x16B\x39\x3\x2"+
		"\x2\x2\x16C\x16D\a\x15\x2\x2\x16D\x16E\a)\x2\x2\x16E\x16F\x5\x30\x19\x2"+
		"\x16F\x170\a\x16\x2\x2\x170\x173\x3\x2\x2\x2\x171\x173\x5\x30\x19\x2\x172"+
		"\x16C\x3\x2\x2\x2\x172\x171\x3\x2\x2\x2\x173;\x3\x2\x2\x2\x174\x175\a"+
		"\x15\x2\x2\x175\x179\a\'\x2\x2\x176\x178\x5:\x1E\x2\x177\x176\x3\x2\x2"+
		"\x2\x178\x17B\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2"+
		"\x17A\x17C\x3\x2\x2\x2\x17B\x179\x3\x2\x2\x2\x17C\x17F\a\x16\x2\x2\x17D"+
		"\x17F\x5:\x1E\x2\x17E\x174\x3\x2\x2\x2\x17E\x17D\x3\x2\x2\x2\x17F=\x3"+
		"\x2\x2\x2\x180\x184\a\x38\x2\x2\x181\x183\x5\x34\x1B\x2\x182\x181\x3\x2"+
		"\x2\x2\x183\x186\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x184\x185\x3\x2\x2"+
		"\x2\x185?\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x187\x188\a\x15\x2\x2\x188"+
		"\x189\a\x5\x2\x2\x189\x18A\a\x15\x2\x2\x18A\x18B\a\x4\x2\x2\x18B\x18C"+
		"\x5\x42\"\x2\x18C\x18D\a\x16\x2\x2\x18D\x18E\a\x15\x2\x2\x18E\x18F\a\x19"+
		"\x2\x2\x18F\x190\a\x3\x2\x2\x190\x191\x5\x44#\x2\x191\x193\a\x16\x2\x2"+
		"\x192\x194\x5\x4\x3\x2\x193\x192\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194"+
		"\x196\x3\x2\x2\x2\x195\x197\x5\x46$\x2\x196\x195\x3\x2\x2\x2\x196\x197"+
		"\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x199\x5H%\x2\x199\x19A\a\x16\x2"+
		"\x2\x19A\x41\x3\x2\x2\x2\x19B\x19C\a\x33\x2\x2\x19C\x43\x3\x2\x2\x2\x19D"+
		"\x19E\a\x33\x2\x2\x19E\x45\x3\x2\x2\x2\x19F\x1A0\a\x15\x2\x2\x1A0\x1A1"+
		"\a\x19\x2\x2\x1A1\x1A2\a\xF\x2\x2\x1A2\x1A3\x5$\x13\x2\x1A3\x1A4\a\x16"+
		"\x2\x2\x1A4G\x3\x2\x2\x2\x1A5\x1A6\a\x15\x2\x2\x1A6\x1A7\a\x19\x2\x2\x1A7"+
		"\x1A8\a\x10\x2\x2\x1A8\x1A9\x5J&\x2\x1A9\x1AA\a\x16\x2\x2\x1AAI\x3\x2"+
		"\x2\x2\x1AB\x1D6\x5L\'\x2\x1AC\x1D6\x5N(\x2\x1AD\x1AE\a\x15\x2\x2\x1AE"+
		"\x1B2\a\'\x2\x2\x1AF\x1B1\x5J&\x2\x1B0\x1AF\x3\x2\x2\x2\x1B1\x1B4\x3\x2"+
		"\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B5\x3\x2\x2"+
		"\x2\x1B4\x1B2\x3\x2\x2\x2\x1B5\x1D6\a\x16\x2\x2\x1B6\x1B7\a\x15\x2\x2"+
		"\x1B7\x1BB\a(\x2\x2\x1B8\x1BA\x5J&\x2\x1B9\x1B8\x3\x2\x2\x2\x1BA\x1BD"+
		"\x3\x2\x2\x2\x1BB\x1B9\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BE\x3"+
		"\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BE\x1D6\a\x16\x2\x2\x1BF\x1C0\a\x15"+
		"\x2\x2\x1C0\x1C1\a*\x2\x2\x1C1\x1C2\x5J&\x2\x1C2\x1C3\x5J&\x2\x1C3\x1C4"+
		"\a\x16\x2\x2\x1C4\x1D6\x3\x2\x2\x2\x1C5\x1C6\a\x15\x2\x2\x1C6\x1C7\a,"+
		"\x2\x2\x1C7\x1C8\a\x15\x2\x2\x1C8\x1C9\x5&\x14\x2\x1C9\x1CA\a\x16\x2\x2"+
		"\x1CA\x1CB\x5.\x18\x2\x1CB\x1CC\a\x16\x2\x2\x1CC\x1D6\x3\x2\x2\x2\x1CD"+
		"\x1CE\a\x15\x2\x2\x1CE\x1CF\a+\x2\x2\x1CF\x1D0\a\x15\x2\x2\x1D0\x1D1\x5"+
		"&\x14\x2\x1D1\x1D2\a\x16\x2\x2\x1D2\x1D3\x5.\x18\x2\x1D3\x1D4\a\x16\x2"+
		"\x2\x1D4\x1D6\x3\x2\x2\x2\x1D5\x1AB\x3\x2\x2\x2\x1D5\x1AC\x3\x2\x2\x2"+
		"\x1D5\x1AD\x3\x2\x2\x2\x1D5\x1B6\x3\x2\x2\x2\x1D5\x1BF\x3\x2\x2\x2\x1D5"+
		"\x1C5\x3\x2\x2\x2\x1D5\x1CD\x3\x2\x2\x2\x1D6K\x3\x2\x2\x2\x1D7\x1D8\a"+
		"\x15\x2\x2\x1D8\x1DC\x5\x12\n\x2\x1D9\x1DB\a\x33\x2\x2\x1DA\x1D9\x3\x2"+
		"\x2\x2\x1DB\x1DE\x3\x2\x2\x2\x1DC\x1DA\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2"+
		"\x2\x1DD\x1DF\x3\x2\x2\x2\x1DE\x1DC\x3\x2\x2\x2\x1DF\x1E0\a\x16\x2\x2"+
		"\x1E0\x1EB\x3\x2\x2\x2\x1E1\x1E2\a\x15\x2\x2\x1E2\x1E6\a\"\x2\x2\x1E3"+
		"\x1E5\a\x33\x2\x2\x1E4\x1E3\x3\x2\x2\x2\x1E5\x1E8\x3\x2\x2\x2\x1E6\x1E4"+
		"\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E9\x3\x2\x2\x2\x1E8\x1E6\x3"+
		"\x2\x2\x2\x1E9\x1EB\a\x16\x2\x2\x1EA\x1D7\x3\x2\x2\x2\x1EA\x1E1\x3\x2"+
		"\x2\x2\x1EBM\x3\x2\x2\x2\x1EC\x1F3\x5L\'\x2\x1ED\x1EE\a\x15\x2\x2\x1EE"+
		"\x1EF\a)\x2\x2\x1EF\x1F0\x5L\'\x2\x1F0\x1F1\a\x16\x2\x2\x1F1\x1F3\x3\x2"+
		"\x2\x2\x1F2\x1EC\x3\x2\x2\x2\x1F2\x1ED\x3\x2\x2\x2\x1F3O\x3\x2\x2\x2\x30"+
		"WZ]\x62ms\x87\x9A\x9E\xB3\xB8\xBD\xC2\xC7\xCD\xD3\xD8\xDE\xE4\xEC\xF6"+
		"\xFF\x10A\x113\x12D\x134\x13E\x142\x14A\x14F\x156\x15B\x16A\x172\x179"+
		"\x17E\x184\x193\x196\x1B2\x1BB\x1D5\x1DC\x1E6\x1EA\x1F2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
