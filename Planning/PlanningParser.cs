//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\Planning.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOM=1, PROM=2, DEF=3, AGENTID=4, CONST=5, TYPE=6, PRED=7, ACT=8, EVT=9, 
		EVTS=10, PARM=11, PRE=12, RESP=13, OBS=14, MIN=15, MAX=16, NUMS=17, EFF=18, 
		OBJ=19, AGT=20, EITHER=21, INITKNOWLEDGE=22, INITBELIEF=23, OBJS=24, INIT=25, 
		GOAL=26, LB=27, RB=28, LSB=29, RSB=30, COLON=31, QM=32, POINT=33, UL=34, 
		MINUS=35, PLUS=36, MULT=37, DIV=38, EQ=39, NEQ=40, LT=41, LEQ=42, GT=43, 
		GEQ=44, AND=45, OR=46, NOT=47, IMPLY=48, FORALL=49, EXISTS=50, WHEN=51, 
		NAME=52, INTEGER=53, VAR=54, WS=55, AGENTS=56;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'agentid'", "'constants'", 
		"'types'", "'predicates'", "'action'", "'event'", "'events'", "'parameters'", 
		"'precondition'", "'response'", "'observation'", "'min'", "'max'", "'numbers'", 
		"'effect'", "'object'", "'agent'", "'either'", "'initknowledge'", "'initbelief'", 
		"'objects'", "'init'", "'goal'", "'('", "')'", "'['", "']'", "':'", "'?'", 
		"'.'", "'_'", "'-'", "'+'", "'*'", "'/'", "'='", "'!='", "'<'", "'<='", 
		"'>'", "'>='", "'and'", "'or'", "'not'", "'imply'", "'forall'", "'exists'", 
		"'when'", "NAME", "INTEGER", "VAR", "WS", "AGENTS"
	};
	public const int
		RULE_domain = 0, RULE_numericDefine = 1, RULE_numericSymbol = 2, RULE_typeDefine = 3, 
		RULE_predDefine = 4, RULE_atomFormSkeleton = 5, RULE_pred = 6, RULE_typeDeclaration = 7, 
		RULE_type = 8, RULE_eventDefine = 9, RULE_eventSymbol = 10, RULE_responseDefine = 11, 
		RULE_responseSymbol = 12, RULE_actionDefine = 13, RULE_actionSymbol = 14, 
		RULE_obsDefine = 15, RULE_obsSymbol = 16, RULE_eventModel = 17, RULE_plDeg = 18, 
		RULE_emptyOrPreGD = 19, RULE_emptyOrEffect = 20, RULE_listName = 21, RULE_listVariable = 22, 
		RULE_gd = 23, RULE_termAtomForm = 24, RULE_termLiteral = 25, RULE_gdEvent = 26, 
		RULE_eventFormulaTerm = 27, RULE_constTerm = 28, RULE_term = 29, RULE_effect = 30, 
		RULE_cEffect = 31, RULE_condEffect = 32, RULE_serverProblem = 33, RULE_problemName = 34, 
		RULE_domainName = 35, RULE_agentDefine = 36, RULE_objectDeclaration = 37, 
		RULE_numericSetting = 38, RULE_init = 39, RULE_constTermGd = 40, RULE_constTermAtomForm = 41, 
		RULE_constTermLiteral = 42, RULE_clientProblem = 43, RULE_initKnowledge = 44, 
		RULE_initBelief = 45, RULE_agentId = 46;
	public static readonly string[] ruleNames = {
		"domain", "numericDefine", "numericSymbol", "typeDefine", "predDefine", 
		"atomFormSkeleton", "pred", "typeDeclaration", "type", "eventDefine", 
		"eventSymbol", "responseDefine", "responseSymbol", "actionDefine", "actionSymbol", 
		"obsDefine", "obsSymbol", "eventModel", "plDeg", "emptyOrPreGD", "emptyOrEffect", 
		"listName", "listVariable", "gd", "termAtomForm", "termLiteral", "gdEvent", 
		"eventFormulaTerm", "constTerm", "term", "effect", "cEffect", "condEffect", 
		"serverProblem", "problemName", "domainName", "agentDefine", "objectDeclaration", 
		"numericSetting", "init", "constTermGd", "constTermAtomForm", "constTermLiteral", 
		"clientProblem", "initKnowledge", "initBelief", "agentId"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public IReadOnlyList<ActionDefineContext> actionDefine() {
			return GetRuleContexts<ActionDefineContext>();
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ObsDefineContext obsDefine(int i) {
			return GetRuleContext<ObsDefineContext>(i);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public EventDefineContext eventDefine(int i) {
			return GetRuleContext<EventDefineContext>(i);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ObsDefineContext> obsDefine() {
			return GetRuleContexts<ObsDefineContext>();
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredDefineContext predDefine() {
			return GetRuleContext<PredDefineContext>(0);
		}
		public IReadOnlyList<EventDefineContext> eventDefine() {
			return GetRuleContexts<EventDefineContext>();
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ActionDefineContext actionDefine(int i) {
			return GetRuleContext<ActionDefineContext>(i);
		}
		public NumericDefineContext numericDefine() {
			return GetRuleContext<NumericDefineContext>(0);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(LB);
			State = 95; Match(DEF);
			State = 96; Match(LB);
			State = 97; Match(DOM);
			State = 98; Match(NAME);
			State = 99; Match(RB);
			State = 101;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 100; numericDefine();
				}
				break;
			}
			State = 104;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 103; typeDefine();
				}
				break;
			}
			State = 107;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 106; predDefine();
				}
				break;
			}
			State = 112;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 109; eventDefine();
					}
					} 
				}
				State = 114;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			State = 118;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 115; actionDefine();
					}
					} 
				}
				State = 120;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 121; obsDefine();
				}
				}
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 127; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericDefineContext : ParserRuleContext {
		public ITerminalNode NUMS() { return GetToken(PlanningParser.NUMS, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<NumericSymbolContext> numericSymbol() {
			return GetRuleContexts<NumericSymbolContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public NumericSymbolContext numericSymbol(int i) {
			return GetRuleContext<NumericSymbolContext>(i);
		}
		public NumericDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericDefine; }
	}

	[RuleVersion(0)]
	public NumericDefineContext numericDefine() {
		NumericDefineContext _localctx = new NumericDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_numericDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(LB);
			State = 130; Match(COLON);
			State = 131; Match(NUMS);
			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 132; numericSymbol();
				}
				}
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 137; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public NumericSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericSymbol; }
	}

	[RuleVersion(0)]
	public NumericSymbolContext numericSymbol() {
		NumericSymbolContext _localctx = new NumericSymbolContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_numericSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<TypeDeclarationContext> typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_typeDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(LB);
			State = 142; Match(COLON);
			State = 143; Match(TYPE);
			State = 145;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 144; typeDeclaration();
				}
				}
				State = 147;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB || _la==NAME );
			State = 149; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public AtomFormSkeletonContext atomFormSkeleton(int i) {
			return GetRuleContext<AtomFormSkeletonContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<AtomFormSkeletonContext> atomFormSkeleton() {
			return GetRuleContexts<AtomFormSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningParser.PRED, 0); }
		public PredDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predDefine; }
	}

	[RuleVersion(0)]
	public PredDefineContext predDefine() {
		PredDefineContext _localctx = new PredDefineContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_predDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(LB);
			State = 152; Match(COLON);
			State = 153; Match(PRED);
			State = 155;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 154; atomFormSkeleton();
				}
				}
				State = 157;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 159; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomFormSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredContext pred() {
			return GetRuleContext<PredContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public AtomFormSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomFormSkeleton; }
	}

	[RuleVersion(0)]
	public AtomFormSkeletonContext atomFormSkeleton() {
		AtomFormSkeletonContext _localctx = new AtomFormSkeletonContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_atomFormSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(LB);
			State = 162; pred();
			State = 163; listVariable();
			State = 164; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pred; }
	}

	[RuleVersion(0)]
	public PredContext pred() {
		PredContext _localctx = new PredContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_pred);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public IReadOnlyList<ConstTermContext> constTerm() {
			return GetRuleContexts<ConstTermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ConstTermContext constTerm(int i) {
			return GetRuleContext<ConstTermContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDeclaration; }
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_typeDeclaration);
		try {
			State = 175;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168; Match(NAME);
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; Match(LB);
				State = 170; Match(NAME);
				State = 171; constTerm();
				State = 172; constTerm();
				State = 173; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ITerminalNode AGT() { return GetToken(PlanningParser.AGT, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OBJ) | (1L << AGT) | (1L << NAME))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefineContext : ParserRuleContext {
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningParser.EFF, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public EventSymbolContext eventSymbol() {
			return GetRuleContext<EventSymbolContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode EVT() { return GetToken(PlanningParser.EVT, 0); }
		public EventDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_eventDefine; }
	}

	[RuleVersion(0)]
	public EventDefineContext eventDefine() {
		EventDefineContext _localctx = new EventDefineContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_eventDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(LB);
			State = 180; Match(COLON);
			State = 181; Match(EVT);
			State = 182; eventSymbol();
			State = 189;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 183; Match(COLON);
				State = 184; Match(PARM);
				State = 185; Match(LB);
				State = 186; listVariable();
				State = 187; Match(RB);
				}
				break;
			}
			State = 194;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 191; Match(COLON);
				State = 192; Match(PRE);
				State = 193; emptyOrPreGD();
				}
				break;
			}
			State = 199;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 196; Match(COLON);
				State = 197; Match(EFF);
				State = 198; emptyOrEffect();
				}
			}

			State = 201; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public EventSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_eventSymbol; }
	}

	[RuleVersion(0)]
	public EventSymbolContext eventSymbol() {
		EventSymbolContext _localctx = new EventSymbolContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_eventSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResponseDefineContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ResponseSymbolContext responseSymbol() {
			return GetRuleContext<ResponseSymbolContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode EVTS() { return GetToken(PlanningParser.EVTS, 0); }
		public ITerminalNode RESP() { return GetToken(PlanningParser.RESP, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public GdEventContext gdEvent() {
			return GetRuleContext<GdEventContext>(0);
		}
		public ResponseDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_responseDefine; }
	}

	[RuleVersion(0)]
	public ResponseDefineContext responseDefine() {
		ResponseDefineContext _localctx = new ResponseDefineContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_responseDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(LB);
			State = 206; Match(COLON);
			State = 207; Match(RESP);
			State = 208; responseSymbol();
			State = 215;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 209; Match(COLON);
				State = 210; Match(PARM);
				State = 211; Match(LB);
				State = 212; listVariable();
				State = 213; Match(RB);
				}
				break;
			}
			State = 217; Match(COLON);
			State = 218; Match(EVTS);
			State = 219; gdEvent();
			State = 220; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResponseSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ResponseSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_responseSymbol; }
	}

	[RuleVersion(0)]
	public ResponseSymbolContext responseSymbol() {
		ResponseSymbolContext _localctx = new ResponseSymbolContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_responseSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ResponseDefineContext> responseDefine() {
			return GetRuleContexts<ResponseDefineContext>();
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ResponseDefineContext responseDefine(int i) {
			return GetRuleContext<ResponseDefineContext>(i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_actionDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(LB);
			State = 225; Match(COLON);
			State = 226; Match(ACT);
			State = 227; actionSymbol();
			State = 234;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 228; Match(COLON);
				State = 229; Match(PARM);
				State = 230; Match(LB);
				State = 231; listVariable();
				State = 232; Match(RB);
				}
			}

			State = 237;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 236; responseDefine();
				}
				}
				State = 239;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 241; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObsDefineContext : ParserRuleContext {
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public ObsSymbolContext obsSymbol() {
			return GetRuleContext<ObsSymbolContext>(0);
		}
		public EventModelContext eventModel() {
			return GetRuleContext<EventModelContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode EVTS() { return GetToken(PlanningParser.EVTS, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ITerminalNode OBS() { return GetToken(PlanningParser.OBS, 0); }
		public ObsDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_obsDefine; }
	}

	[RuleVersion(0)]
	public ObsDefineContext obsDefine() {
		ObsDefineContext _localctx = new ObsDefineContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_obsDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(LB);
			State = 246; Match(COLON);
			State = 247; Match(OBS);
			State = 248; obsSymbol();
			State = 255;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 249; Match(COLON);
				State = 250; Match(PARM);
				State = 251; Match(LB);
				State = 252; listVariable();
				State = 253; Match(RB);
				}
				break;
			}
			State = 260;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 257; Match(COLON);
				State = 258; Match(PRE);
				State = 259; emptyOrPreGD();
				}
				break;
			}
			State = 262; Match(COLON);
			State = 263; Match(EVTS);
			State = 264; eventModel();
			State = 265; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObsSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ObsSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_obsSymbol; }
	}

	[RuleVersion(0)]
	public ObsSymbolContext obsSymbol() {
		ObsSymbolContext _localctx = new ObsSymbolContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_obsSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventModelContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public GdEventContext gdEvent(int i) {
			return GetRuleContext<GdEventContext>(i);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public IReadOnlyList<GdEventContext> gdEvent() {
			return GetRuleContexts<GdEventContext>();
		}
		public PlDegContext plDeg(int i) {
			return GetRuleContext<PlDegContext>(i);
		}
		public IReadOnlyList<PlDegContext> plDeg() {
			return GetRuleContexts<PlDegContext>();
		}
		public EventModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_eventModel; }
	}

	[RuleVersion(0)]
	public EventModelContext eventModel() {
		EventModelContext _localctx = new EventModelContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_eventModel);
		int _la;
		try {
			State = 286;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 269; gdEvent();
					}
					}
					State = 272;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274; Match(LB);
				State = 280;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 275; Match(LB);
					State = 276; plDeg();
					State = 277; gdEvent();
					State = 278; Match(RB);
					}
					}
					State = 282;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 284; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlDegContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public PlDegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_plDeg; }
	}

	[RuleVersion(0)]
	public PlDegContext plDeg() {
		PlDegContext _localctx = new PlDegContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_plDeg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrPreGD; }
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_emptyOrPreGD);
		try {
			State = 293;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291; Match(LB);
				State = 292; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrEffect; }
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_emptyOrEffect);
		try {
			State = 298;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296; Match(LB);
				State = 297; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_listName);
		int _la;
		try {
			State = 315;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 300; Match(NAME);
					}
					}
					State = 305;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 306; Match(NAME);
					}
					}
					State = 309;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NAME );
				State = 311; Match(MINUS);
				State = 312; type();
				State = 313; listName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_listVariable);
		int _la;
		try {
			State = 332;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 317; Match(VAR);
					}
					}
					State = 322;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 323; Match(VAR);
					}
					}
					State = 326;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 328; Match(MINUS);
				State = 329; type();
				State = 330; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public TermAtomFormContext termAtomForm() {
			return GetRuleContext<TermAtomFormContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_gd);
		int _la;
		try {
			State = 380;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; termAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335; Match(LB);
				State = 336; Match(AND);
				State = 338;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 337; gd();
					}
					}
					State = 340;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 342; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344; Match(LB);
				State = 345; Match(OR);
				State = 347;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 346; gd();
					}
					}
					State = 349;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 351; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 353; Match(LB);
				State = 354; Match(NOT);
				State = 355; gd();
				State = 356; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 358; Match(LB);
				State = 359; Match(IMPLY);
				State = 360; gd();
				State = 361; gd();
				State = 362; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 364; Match(LB);
				State = 365; Match(EXISTS);
				State = 366; Match(LB);
				State = 367; listVariable();
				State = 368; Match(RB);
				State = 369; gd();
				State = 370; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 372; Match(LB);
				State = 373; Match(FORALL);
				State = 374; Match(LB);
				State = 375; listVariable();
				State = 376; Match(RB);
				State = 377; gd();
				State = 378; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermAtomFormContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode GEQ() { return GetToken(PlanningParser.GEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(PlanningParser.NEQ, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredContext pred() {
			return GetRuleContext<PredContext>(0);
		}
		public ITerminalNode LT() { return GetToken(PlanningParser.LT, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode LEQ() { return GetToken(PlanningParser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(PlanningParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public TermAtomFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_termAtomForm; }
	}

	[RuleVersion(0)]
	public TermAtomFormContext termAtomForm() {
		TermAtomFormContext _localctx = new TermAtomFormContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_termAtomForm);
		int _la;
		try {
			State = 428;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 382; Match(LB);
				State = 383; pred();
				State = 387;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER) | (1L << VAR))) != 0)) {
					{
					{
					State = 384; term();
					}
					}
					State = 389;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 390; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392; Match(LB);
				State = 393; Match(EQ);
				State = 394; term();
				State = 395; term();
				State = 396; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 398; Match(LB);
				State = 399; Match(NEQ);
				State = 400; term();
				State = 401; term();
				State = 402; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 404; Match(LB);
				State = 405; Match(LT);
				State = 406; term();
				State = 407; term();
				State = 408; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 410; Match(LB);
				State = 411; Match(LEQ);
				State = 412; term();
				State = 413; term();
				State = 414; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 416; Match(LB);
				State = 417; Match(GT);
				State = 418; term();
				State = 419; term();
				State = 420; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 422; Match(LB);
				State = 423; Match(GEQ);
				State = 424; term();
				State = 425; term();
				State = 426; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermLiteralContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public TermAtomFormContext termAtomForm() {
			return GetRuleContext<TermAtomFormContext>(0);
		}
		public TermLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_termLiteral; }
	}

	[RuleVersion(0)]
	public TermLiteralContext termLiteral() {
		TermLiteralContext _localctx = new TermLiteralContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_termLiteral);
		try {
			State = 436;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430; termAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; Match(LB);
				State = 432; Match(NOT);
				State = 433; termAtomForm();
				State = 434; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdEventContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public GdEventContext gdEvent(int i) {
			return GetRuleContext<GdEventContext>(i);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public IReadOnlyList<GdEventContext> gdEvent() {
			return GetRuleContexts<GdEventContext>();
		}
		public EventFormulaTermContext eventFormulaTerm() {
			return GetRuleContext<EventFormulaTermContext>(0);
		}
		public GdEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gdEvent; }
	}

	[RuleVersion(0)]
	public GdEventContext gdEvent() {
		GdEventContext _localctx = new GdEventContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_gdEvent);
		int _la;
		try {
			State = 461;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; eventFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; Match(LB);
				State = 440; Match(NOT);
				State = 441; gdEvent();
				State = 442; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 444; Match(LB);
				State = 445; Match(OR);
				State = 447;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 446; gdEvent();
					}
					}
					State = 449;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 451; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 453; Match(LB);
				State = 454; Match(EXISTS);
				State = 455; Match(LB);
				State = 456; listVariable();
				State = 457; Match(RB);
				State = 458; gdEvent();
				State = 459; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventFormulaTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EventSymbolContext eventSymbol() {
			return GetRuleContext<EventSymbolContext>(0);
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public EventFormulaTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_eventFormulaTerm; }
	}

	[RuleVersion(0)]
	public EventFormulaTermContext eventFormulaTerm() {
		EventFormulaTermContext _localctx = new EventFormulaTermContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_eventFormulaTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(LB);
			State = 464; eventSymbol();
			State = 468;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER) | (1L << VAR))) != 0)) {
				{
				{
				State = 465; term();
				}
				}
				State = 470;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 471; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermContext : ParserRuleContext {
		public IReadOnlyList<ConstTermContext> constTerm() {
			return GetRuleContexts<ConstTermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public ConstTermContext constTerm(int i) {
			return GetRuleContext<ConstTermContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ITerminalNode PLUS() { return GetToken(PlanningParser.PLUS, 0); }
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public ConstTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constTerm; }
	}

	[RuleVersion(0)]
	public ConstTermContext constTerm() {
		ConstTermContext _localctx = new ConstTermContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_constTerm);
		try {
			State = 492;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473; Match(NAME);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474; Match(INTEGER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 475; Match(LB);
				State = 476; Match(MINUS);
				State = 477; constTerm();
				State = 478; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 480; Match(LB);
				State = 481; Match(MINUS);
				State = 482; constTerm();
				State = 483; constTerm();
				State = 484; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 486; Match(LB);
				State = 487; Match(PLUS);
				State = 488; constTerm();
				State = 489; constTerm();
				State = 490; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode MINUS() { return GetToken(PlanningParser.MINUS, 0); }
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ITerminalNode PLUS() { return GetToken(PlanningParser.PLUS, 0); }
		public ITerminalNode INTEGER() { return GetToken(PlanningParser.INTEGER, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_term);
		try {
			State = 514;
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 494; Match(NAME);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495; Match(VAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 496; Match(INTEGER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 497; Match(LB);
				State = 498; Match(MINUS);
				State = 499; term();
				State = 500; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 502; Match(LB);
				State = 503; Match(MINUS);
				State = 504; term();
				State = 505; term();
				State = 506; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 508; Match(LB);
				State = 509; Match(PLUS);
				State = 510; term();
				State = 511; term();
				State = 512; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_effect);
		int _la;
		try {
			State = 526;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516; Match(LB);
				State = 517; Match(AND);
				State = 519;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 518; cEffect();
					}
					}
					State = 521;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 523; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 525; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public TermLiteralContext termLiteral() {
			return GetRuleContext<TermLiteralContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_cEffect);
		try {
			State = 543;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 528; Match(LB);
				State = 529; Match(FORALL);
				State = 530; Match(LB);
				State = 531; listVariable();
				State = 532; Match(RB);
				State = 533; effect();
				State = 534; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 536; Match(LB);
				State = 537; Match(WHEN);
				State = 538; gd();
				State = 539; condEffect();
				State = 540; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 542; termLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public IReadOnlyList<TermLiteralContext> termLiteral() {
			return GetRuleContexts<TermLiteralContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public TermLiteralContext termLiteral(int i) {
			return GetRuleContext<TermLiteralContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_condEffect);
		int _la;
		try {
			State = 555;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 545; Match(LB);
				State = 546; Match(AND);
				State = 548;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 547; termLiteral();
					}
					}
					State = 550;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 552; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 554; termLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerProblemContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public NumericSettingContext numericSetting() {
			return GetRuleContext<NumericSettingContext>(0);
		}
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ServerProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_serverProblem; }
	}

	[RuleVersion(0)]
	public ServerProblemContext serverProblem() {
		ServerProblemContext _localctx = new ServerProblemContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_serverProblem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(LB);
			State = 558; Match(DEF);
			State = 559; Match(LB);
			State = 560; Match(PROM);
			State = 561; problemName();
			State = 562; Match(RB);
			State = 563; Match(LB);
			State = 564; Match(COLON);
			State = 565; Match(DOM);
			State = 566; domainName();
			State = 567; Match(RB);
			State = 569;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 568; numericSetting();
				}
				break;
			}
			State = 572;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 571; objectDeclaration();
				}
				break;
			}
			State = 574; init();
			State = 575; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problemName; }
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domainName; }
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode AGENTS() { return GetToken(PlanningParser.AGENTS, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public AgentDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentDefine; }
	}

	[RuleVersion(0)]
	public AgentDefineContext agentDefine() {
		AgentDefineContext _localctx = new AgentDefineContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_agentDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; Match(LB);
			State = 582; Match(COLON);
			State = 583; Match(AGENTS);
			State = 585;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 584; Match(NAME);
				}
				}
				State = 587;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 589; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; Match(LB);
			State = 592; Match(COLON);
			State = 593; Match(OBJS);
			State = 594; listName();
			State = 595; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericSettingContext : ParserRuleContext {
		public ITerminalNode INTEGER(int i) {
			return GetToken(PlanningParser.INTEGER, i);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode NUMS() { return GetToken(PlanningParser.NUMS, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public IReadOnlyList<NumericSymbolContext> numericSymbol() {
			return GetRuleContexts<NumericSymbolContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public IReadOnlyList<ITerminalNode> INTEGER() { return GetTokens(PlanningParser.INTEGER); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public NumericSymbolContext numericSymbol(int i) {
			return GetRuleContext<NumericSymbolContext>(i);
		}
		public NumericSettingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericSetting; }
	}

	[RuleVersion(0)]
	public NumericSettingContext numericSetting() {
		NumericSettingContext _localctx = new NumericSettingContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_numericSetting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597; Match(LB);
			State = 598; Match(COLON);
			State = 599; Match(NUMS);
			State = 605;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 600; Match(LB);
				State = 601; numericSymbol();
				State = 602; Match(INTEGER);
				State = 603; Match(RB);
				}
				}
				State = 607;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 609; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public IReadOnlyList<ConstTermAtomFormContext> constTermAtomForm() {
			return GetRuleContexts<ConstTermAtomFormContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ConstTermAtomFormContext constTermAtomForm(int i) {
			return GetRuleContext<ConstTermAtomFormContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611; Match(LB);
			State = 612; Match(COLON);
			State = 613; Match(INIT);
			State = 617;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 614; constTermAtomForm();
				}
				}
				State = 619;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 620; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermGdContext : ParserRuleContext {
		public IReadOnlyList<ConstTermGdContext> constTermGd() {
			return GetRuleContexts<ConstTermGdContext>();
		}
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ConstTermGdContext constTermGd(int i) {
			return GetRuleContext<ConstTermGdContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ConstTermAtomFormContext constTermAtomForm() {
			return GetRuleContext<ConstTermAtomFormContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public ConstTermLiteralContext constTermLiteral() {
			return GetRuleContext<ConstTermLiteralContext>(0);
		}
		public ConstTermGdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constTermGd; }
	}

	[RuleVersion(0)]
	public ConstTermGdContext constTermGd() {
		ConstTermGdContext _localctx = new ConstTermGdContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_constTermGd);
		int _la;
		try {
			State = 669;
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 622; constTermAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 623; constTermLiteral();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 624; Match(LB);
				State = 625; Match(AND);
				State = 627;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 626; constTermGd();
					}
					}
					State = 629;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 631; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 633; Match(LB);
				State = 634; Match(OR);
				State = 636;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 635; constTermGd();
					}
					}
					State = 638;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LB );
				State = 640; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 642; Match(LB);
				State = 643; Match(NOT);
				State = 644; constTermGd();
				State = 645; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 647; Match(LB);
				State = 648; Match(IMPLY);
				State = 649; constTermGd();
				State = 650; constTermGd();
				State = 651; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 653; Match(LB);
				State = 654; Match(EXISTS);
				State = 655; Match(LB);
				State = 656; listVariable();
				State = 657; Match(RB);
				State = 658; gd();
				State = 659; Match(RB);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 661; Match(LB);
				State = 662; Match(FORALL);
				State = 663; Match(LB);
				State = 664; listVariable();
				State = 665; Match(RB);
				State = 666; gd();
				State = 667; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermAtomFormContext : ParserRuleContext {
		public IReadOnlyList<ConstTermContext> constTerm() {
			return GetRuleContexts<ConstTermContext>();
		}
		public ITerminalNode GEQ() { return GetToken(PlanningParser.GEQ, 0); }
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PredContext pred() {
			return GetRuleContext<PredContext>(0);
		}
		public ITerminalNode LT() { return GetToken(PlanningParser.LT, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ConstTermContext constTerm(int i) {
			return GetRuleContext<ConstTermContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(PlanningParser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(PlanningParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public ConstTermAtomFormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constTermAtomForm; }
	}

	[RuleVersion(0)]
	public ConstTermAtomFormContext constTermAtomForm() {
		ConstTermAtomFormContext _localctx = new ConstTermAtomFormContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_constTermAtomForm);
		int _la;
		try {
			State = 711;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 671; Match(LB);
				State = 672; pred();
				State = 676;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LB) | (1L << NAME) | (1L << INTEGER))) != 0)) {
					{
					{
					State = 673; constTerm();
					}
					}
					State = 678;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 679; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 681; Match(LB);
				State = 682; Match(EQ);
				State = 683; constTerm();
				State = 684; constTerm();
				State = 685; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 687; Match(LB);
				State = 688; Match(LT);
				State = 689; constTerm();
				State = 690; constTerm();
				State = 691; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 693; Match(LB);
				State = 694; Match(LEQ);
				State = 695; constTerm();
				State = 696; constTerm();
				State = 697; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 699; Match(LB);
				State = 700; Match(GT);
				State = 701; constTerm();
				State = 702; constTerm();
				State = 703; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 705; Match(LB);
				State = 706; Match(GEQ);
				State = 707; constTerm();
				State = 708; constTerm();
				State = 709; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTermLiteralContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ConstTermAtomFormContext constTermAtomForm() {
			return GetRuleContext<ConstTermAtomFormContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public ConstTermLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constTermLiteral; }
	}

	[RuleVersion(0)]
	public ConstTermLiteralContext constTermLiteral() {
		ConstTermLiteralContext _localctx = new ConstTermLiteralContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_constTermLiteral);
		try {
			State = 719;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 713; constTermAtomForm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 714; Match(LB);
				State = 715; Match(NOT);
				State = 716; constTermAtomForm();
				State = 717; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClientProblemContext : ParserRuleContext {
		public NumericSettingContext numericSetting() {
			return GetRuleContext<NumericSettingContext>(0);
		}
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitKnowledgeContext initKnowledge() {
			return GetRuleContext<InitKnowledgeContext>(0);
		}
		public ITerminalNode AGENTID() { return GetToken(PlanningParser.AGENTID, 0); }
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public AgentDefineContext agentDefine() {
			return GetRuleContext<AgentDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public InitBeliefContext initBelief() {
			return GetRuleContext<InitBeliefContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public AgentIdContext agentId() {
			return GetRuleContext<AgentIdContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ClientProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_clientProblem; }
	}

	[RuleVersion(0)]
	public ClientProblemContext clientProblem() {
		ClientProblemContext _localctx = new ClientProblemContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_clientProblem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721; Match(LB);
			State = 722; Match(DEF);
			State = 723; Match(LB);
			State = 724; Match(PROM);
			State = 725; problemName();
			State = 726; Match(RB);
			State = 727; Match(LB);
			State = 728; Match(COLON);
			State = 729; Match(DOM);
			State = 730; domainName();
			State = 731; Match(RB);
			State = 732; agentDefine();
			State = 733; Match(LB);
			State = 734; Match(COLON);
			State = 735; Match(AGENTID);
			State = 736; agentId();
			State = 737; Match(RB);
			State = 739;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 738; objectDeclaration();
				}
				break;
			}
			State = 742;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 741; numericSetting();
				}
				break;
			}
			State = 745;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 744; initKnowledge();
				}
				break;
			}
			State = 748;
			_la = _input.La(1);
			if (_la==LB) {
				{
				State = 747; initBelief();
				}
			}

			State = 750; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitKnowledgeContext : ParserRuleContext {
		public ConstTermGdContext constTermGd() {
			return GetRuleContext<ConstTermGdContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode INITKNOWLEDGE() { return GetToken(PlanningParser.INITKNOWLEDGE, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitKnowledgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initKnowledge; }
	}

	[RuleVersion(0)]
	public InitKnowledgeContext initKnowledge() {
		InitKnowledgeContext _localctx = new InitKnowledgeContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_initKnowledge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 752; Match(LB);
			State = 753; Match(COLON);
			State = 754; Match(INITKNOWLEDGE);
			State = 755; constTermGd();
			State = 756; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitBeliefContext : ParserRuleContext {
		public ConstTermGdContext constTermGd() {
			return GetRuleContext<ConstTermGdContext>(0);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode INITBELIEF() { return GetToken(PlanningParser.INITBELIEF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitBeliefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_initBelief; }
	}

	[RuleVersion(0)]
	public InitBeliefContext initBelief() {
		InitBeliefContext _localctx = new InitBeliefContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_initBelief);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; Match(LB);
			State = 759; Match(COLON);
			State = 760; Match(INITBELIEF);
			State = 761; constTermGd();
			State = 762; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentIdContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public AgentIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentId; }
	}

	[RuleVersion(0)]
	public AgentIdContext agentId() {
		AgentIdContext _localctx = new AgentIdContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_agentId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3:\x301\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x5\x2h\n\x2\x3\x2\x5\x2k\n\x2\x3\x2\x5\x2n\n\x2"+
		"\x3\x2\a\x2q\n\x2\f\x2\xE\x2t\v\x2\x3\x2\a\x2w\n\x2\f\x2\xE\x2z\v\x2\x3"+
		"\x2\a\x2}\n\x2\f\x2\xE\x2\x80\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x6\x3\x88\n\x3\r\x3\xE\x3\x89\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x6\x5\x94\n\x5\r\x5\xE\x5\x95\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x6\x6\x9E\n\x6\r\x6\xE\x6\x9F\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xB2\n\t\x3\n\x3\n"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xC0\n\v\x3\v\x3"+
		"\v\x3\v\x5\v\xC5\n\v\x3\v\x3\v\x3\v\x5\v\xCA\n\v\x3\v\x3\v\x3\f\x3\f\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xDA\n\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x5\xF\xED\n\xF\x3\xF\x6\xF\xF0\n\xF\r\xF\xE\xF\xF1"+
		"\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x5\x11\x102\n\x11\x3\x11\x3\x11\x3\x11\x5\x11"+
		"\x107\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x6"+
		"\x13\x111\n\x13\r\x13\xE\x13\x112\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x6\x13\x11B\n\x13\r\x13\xE\x13\x11C\x3\x13\x3\x13\x5\x13\x121\n\x13"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5\x15\x128\n\x15\x3\x16\x3\x16\x3"+
		"\x16\x5\x16\x12D\n\x16\x3\x17\a\x17\x130\n\x17\f\x17\xE\x17\x133\v\x17"+
		"\x3\x17\x6\x17\x136\n\x17\r\x17\xE\x17\x137\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x5\x17\x13E\n\x17\x3\x18\a\x18\x141\n\x18\f\x18\xE\x18\x144\v\x18\x3"+
		"\x18\x6\x18\x147\n\x18\r\x18\xE\x18\x148\x3\x18\x3\x18\x3\x18\x3\x18\x5"+
		"\x18\x14F\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x6\x19\x155\n\x19\r\x19\xE"+
		"\x19\x156\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x6\x19\x15E\n\x19\r\x19\xE"+
		"\x19\x15F\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x5\x19\x17F\n\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\x184\n\x1A\f\x1A\xE\x1A"+
		"\x187\v\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5"+
		"\x1A\x1AF\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x1B7"+
		"\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x6\x1C\x1C2\n\x1C\r\x1C\xE\x1C\x1C3\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x1D0\n\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\a\x1D\x1D5\n\x1D\f\x1D\xE\x1D\x1D8\v\x1D\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x1EF\n\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x205\n\x1F\x3 \x3 \x3 \x6 \x20A\n \r \xE \x20B\x3 \x3 \x3 \x5"+
		" \x211\n \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!"+
		"\x5!\x222\n!\x3\"\x3\"\x3\"\x6\"\x227\n\"\r\"\xE\"\x228\x3\"\x3\"\x3\""+
		"\x5\"\x22E\n\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x23C"+
		"\n#\x3#\x5#\x23F\n#\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3&\x3&\x6&\x24C"+
		"\n&\r&\xE&\x24D\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3("+
		"\x3(\x3(\x3(\x3(\x6(\x260\n(\r(\xE(\x261\x3(\x3(\x3)\x3)\x3)\x3)\a)\x26A"+
		"\n)\f)\xE)\x26D\v)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x6*\x276\n*\r*\xE*\x277"+
		"\x3*\x3*\x3*\x3*\x3*\x6*\x27F\n*\r*\xE*\x280\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x3*\x3*\x3*\x3*\x5*\x2A0\n*\x3+\x3+\x3+\a+\x2A5\n+\f+\xE+\x2A8\v"+
		"+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+"+
		"\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x2CA"+
		"\n+\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x2D2\n,\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x2E6\n-\x3-\x5-\x2E9\n-"+
		"\x3-\x5-\x2EC\n-\x3-\x5-\x2EF\n-\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x3/\x3"+
		"/\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x2\x2\x2\x31\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38"+
		"\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V"+
		"\x2X\x2Z\x2\\\x2^\x2\x2\x3\x4\x2\x15\x16\x36\x36\x32B\x2`\x3\x2\x2\x2"+
		"\x4\x83\x3\x2\x2\x2\x6\x8D\x3\x2\x2\x2\b\x8F\x3\x2\x2\x2\n\x99\x3\x2\x2"+
		"\x2\f\xA3\x3\x2\x2\x2\xE\xA8\x3\x2\x2\x2\x10\xB1\x3\x2\x2\x2\x12\xB3\x3"+
		"\x2\x2\x2\x14\xB5\x3\x2\x2\x2\x16\xCD\x3\x2\x2\x2\x18\xCF\x3\x2\x2\x2"+
		"\x1A\xE0\x3\x2\x2\x2\x1C\xE2\x3\x2\x2\x2\x1E\xF5\x3\x2\x2\x2 \xF7\x3\x2"+
		"\x2\x2\"\x10D\x3\x2\x2\x2$\x120\x3\x2\x2\x2&\x122\x3\x2\x2\x2(\x127\x3"+
		"\x2\x2\x2*\x12C\x3\x2\x2\x2,\x13D\x3\x2\x2\x2.\x14E\x3\x2\x2\x2\x30\x17E"+
		"\x3\x2\x2\x2\x32\x1AE\x3\x2\x2\x2\x34\x1B6\x3\x2\x2\x2\x36\x1CF\x3\x2"+
		"\x2\x2\x38\x1D1\x3\x2\x2\x2:\x1EE\x3\x2\x2\x2<\x204\x3\x2\x2\x2>\x210"+
		"\x3\x2\x2\x2@\x221\x3\x2\x2\x2\x42\x22D\x3\x2\x2\x2\x44\x22F\x3\x2\x2"+
		"\x2\x46\x243\x3\x2\x2\x2H\x245\x3\x2\x2\x2J\x247\x3\x2\x2\x2L\x251\x3"+
		"\x2\x2\x2N\x257\x3\x2\x2\x2P\x265\x3\x2\x2\x2R\x29F\x3\x2\x2\x2T\x2C9"+
		"\x3\x2\x2\x2V\x2D1\x3\x2\x2\x2X\x2D3\x3\x2\x2\x2Z\x2F2\x3\x2\x2\x2\\\x2F8"+
		"\x3\x2\x2\x2^\x2FE\x3\x2\x2\x2`\x61\a\x1D\x2\x2\x61\x62\a\x5\x2\x2\x62"+
		"\x63\a\x1D\x2\x2\x63\x64\a\x3\x2\x2\x64\x65\a\x36\x2\x2\x65g\a\x1E\x2"+
		"\x2\x66h\x5\x4\x3\x2g\x66\x3\x2\x2\x2gh\x3\x2\x2\x2hj\x3\x2\x2\x2ik\x5"+
		"\b\x5\x2ji\x3\x2\x2\x2jk\x3\x2\x2\x2km\x3\x2\x2\x2ln\x5\n\x6\x2ml\x3\x2"+
		"\x2\x2mn\x3\x2\x2\x2nr\x3\x2\x2\x2oq\x5\x14\v\x2po\x3\x2\x2\x2qt\x3\x2"+
		"\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2sx\x3\x2\x2\x2tr\x3\x2\x2\x2uw\x5\x1C"+
		"\xF\x2vu\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2y~\x3\x2"+
		"\x2\x2zx\x3\x2\x2\x2{}\x5 \x11\x2|{\x3\x2\x2\x2}\x80\x3\x2\x2\x2~|\x3"+
		"\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x81\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x81\x82"+
		"\a\x1E\x2\x2\x82\x3\x3\x2\x2\x2\x83\x84\a\x1D\x2\x2\x84\x85\a!\x2\x2\x85"+
		"\x87\a\x13\x2\x2\x86\x88\x5\x6\x4\x2\x87\x86\x3\x2\x2\x2\x88\x89\x3\x2"+
		"\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B"+
		"\x8C\a\x1E\x2\x2\x8C\x5\x3\x2\x2\x2\x8D\x8E\a\x36\x2\x2\x8E\a\x3\x2\x2"+
		"\x2\x8F\x90\a\x1D\x2\x2\x90\x91\a!\x2\x2\x91\x93\a\b\x2\x2\x92\x94\x5"+
		"\x10\t\x2\x93\x92\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2"+
		"\x95\x96\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x98\a\x1E\x2\x2\x98\t\x3"+
		"\x2\x2\x2\x99\x9A\a\x1D\x2\x2\x9A\x9B\a!\x2\x2\x9B\x9D\a\t\x2\x2\x9C\x9E"+
		"\x5\f\a\x2\x9D\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2"+
		"\x9F\xA0\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA2\a\x1E\x2\x2\xA2\v\x3"+
		"\x2\x2\x2\xA3\xA4\a\x1D\x2\x2\xA4\xA5\x5\xE\b\x2\xA5\xA6\x5.\x18\x2\xA6"+
		"\xA7\a\x1E\x2\x2\xA7\r\x3\x2\x2\x2\xA8\xA9\a\x36\x2\x2\xA9\xF\x3\x2\x2"+
		"\x2\xAA\xB2\a\x36\x2\x2\xAB\xAC\a\x1D\x2\x2\xAC\xAD\a\x36\x2\x2\xAD\xAE"+
		"\x5:\x1E\x2\xAE\xAF\x5:\x1E\x2\xAF\xB0\a\x1E\x2\x2\xB0\xB2\x3\x2\x2\x2"+
		"\xB1\xAA\x3\x2\x2\x2\xB1\xAB\x3\x2\x2\x2\xB2\x11\x3\x2\x2\x2\xB3\xB4\t"+
		"\x2\x2\x2\xB4\x13\x3\x2\x2\x2\xB5\xB6\a\x1D\x2\x2\xB6\xB7\a!\x2\x2\xB7"+
		"\xB8\a\v\x2\x2\xB8\xBF\x5\x16\f\x2\xB9\xBA\a!\x2\x2\xBA\xBB\a\r\x2\x2"+
		"\xBB\xBC\a\x1D\x2\x2\xBC\xBD\x5.\x18\x2\xBD\xBE\a\x1E\x2\x2\xBE\xC0\x3"+
		"\x2\x2\x2\xBF\xB9\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC4\x3\x2\x2\x2"+
		"\xC1\xC2\a!\x2\x2\xC2\xC3\a\xE\x2\x2\xC3\xC5\x5(\x15\x2\xC4\xC1\x3\x2"+
		"\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC9\x3\x2\x2\x2\xC6\xC7\a!\x2\x2\xC7\xC8"+
		"\a\x14\x2\x2\xC8\xCA\x5*\x16\x2\xC9\xC6\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2"+
		"\xCA\xCB\x3\x2\x2\x2\xCB\xCC\a\x1E\x2\x2\xCC\x15\x3\x2\x2\x2\xCD\xCE\a"+
		"\x36\x2\x2\xCE\x17\x3\x2\x2\x2\xCF\xD0\a\x1D\x2\x2\xD0\xD1\a!\x2\x2\xD1"+
		"\xD2\a\xF\x2\x2\xD2\xD9\x5\x1A\xE\x2\xD3\xD4\a!\x2\x2\xD4\xD5\a\r\x2\x2"+
		"\xD5\xD6\a\x1D\x2\x2\xD6\xD7\x5.\x18\x2\xD7\xD8\a\x1E\x2\x2\xD8\xDA\x3"+
		"\x2\x2\x2\xD9\xD3\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2"+
		"\xDB\xDC\a!\x2\x2\xDC\xDD\a\f\x2\x2\xDD\xDE\x5\x36\x1C\x2\xDE\xDF\a\x1E"+
		"\x2\x2\xDF\x19\x3\x2\x2\x2\xE0\xE1\a\x36\x2\x2\xE1\x1B\x3\x2\x2\x2\xE2"+
		"\xE3\a\x1D\x2\x2\xE3\xE4\a!\x2\x2\xE4\xE5\a\n\x2\x2\xE5\xEC\x5\x1E\x10"+
		"\x2\xE6\xE7\a!\x2\x2\xE7\xE8\a\r\x2\x2\xE8\xE9\a\x1D\x2\x2\xE9\xEA\x5"+
		".\x18\x2\xEA\xEB\a\x1E\x2\x2\xEB\xED\x3\x2\x2\x2\xEC\xE6\x3\x2\x2\x2\xEC"+
		"\xED\x3\x2\x2\x2\xED\xEF\x3\x2\x2\x2\xEE\xF0\x5\x18\r\x2\xEF\xEE\x3\x2"+
		"\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2"+
		"\xF3\x3\x2\x2\x2\xF3\xF4\a\x1E\x2\x2\xF4\x1D\x3\x2\x2\x2\xF5\xF6\a\x36"+
		"\x2\x2\xF6\x1F\x3\x2\x2\x2\xF7\xF8\a\x1D\x2\x2\xF8\xF9\a!\x2\x2\xF9\xFA"+
		"\a\x10\x2\x2\xFA\x101\x5\"\x12\x2\xFB\xFC\a!\x2\x2\xFC\xFD\a\r\x2\x2\xFD"+
		"\xFE\a\x1D\x2\x2\xFE\xFF\x5.\x18\x2\xFF\x100\a\x1E\x2\x2\x100\x102\x3"+
		"\x2\x2\x2\x101\xFB\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x106\x3\x2\x2"+
		"\x2\x103\x104\a!\x2\x2\x104\x105\a\xE\x2\x2\x105\x107\x5(\x15\x2\x106"+
		"\x103\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108\x109"+
		"\a!\x2\x2\x109\x10A\a\f\x2\x2\x10A\x10B\x5$\x13\x2\x10B\x10C\a\x1E\x2"+
		"\x2\x10C!\x3\x2\x2\x2\x10D\x10E\a\x36\x2\x2\x10E#\x3\x2\x2\x2\x10F\x111"+
		"\x5\x36\x1C\x2\x110\x10F\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x110\x3"+
		"\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x121\x3\x2\x2\x2\x114\x11A\a\x1D"+
		"\x2\x2\x115\x116\a\x1D\x2\x2\x116\x117\x5&\x14\x2\x117\x118\x5\x36\x1C"+
		"\x2\x118\x119\a\x1E\x2\x2\x119\x11B\x3\x2\x2\x2\x11A\x115\x3\x2\x2\x2"+
		"\x11B\x11C\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D"+
		"\x11E\x3\x2\x2\x2\x11E\x11F\a\x1E\x2\x2\x11F\x121\x3\x2\x2\x2\x120\x110"+
		"\x3\x2\x2\x2\x120\x114\x3\x2\x2\x2\x121%\x3\x2\x2\x2\x122\x123\a\x37\x2"+
		"\x2\x123\'\x3\x2\x2\x2\x124\x128\x5\x30\x19\x2\x125\x126\a\x1D\x2\x2\x126"+
		"\x128\a\x1E\x2\x2\x127\x124\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x128)\x3"+
		"\x2\x2\x2\x129\x12D\x5> \x2\x12A\x12B\a\x1D\x2\x2\x12B\x12D\a\x1E\x2\x2"+
		"\x12C\x129\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D+\x3\x2\x2\x2\x12E\x130"+
		"\a\x36\x2\x2\x12F\x12E\x3\x2\x2\x2\x130\x133\x3\x2\x2\x2\x131\x12F\x3"+
		"\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x13E\x3\x2\x2\x2\x133\x131\x3\x2"+
		"\x2\x2\x134\x136\a\x36\x2\x2\x135\x134\x3\x2\x2\x2\x136\x137\x3\x2\x2"+
		"\x2\x137\x135\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2"+
		"\x139\x13A\a%\x2\x2\x13A\x13B\x5\x12\n\x2\x13B\x13C\x5,\x17\x2\x13C\x13E"+
		"\x3\x2\x2\x2\x13D\x131\x3\x2\x2\x2\x13D\x135\x3\x2\x2\x2\x13E-\x3\x2\x2"+
		"\x2\x13F\x141\a\x38\x2\x2\x140\x13F\x3\x2\x2\x2\x141\x144\x3\x2\x2\x2"+
		"\x142\x140\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x14F\x3\x2\x2\x2\x144"+
		"\x142\x3\x2\x2\x2\x145\x147\a\x38\x2\x2\x146\x145\x3\x2\x2\x2\x147\x148"+
		"\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14A\x3"+
		"\x2\x2\x2\x14A\x14B\a%\x2\x2\x14B\x14C\x5\x12\n\x2\x14C\x14D\x5.\x18\x2"+
		"\x14D\x14F\x3\x2\x2\x2\x14E\x142\x3\x2\x2\x2\x14E\x146\x3\x2\x2\x2\x14F"+
		"/\x3\x2\x2\x2\x150\x17F\x5\x32\x1A\x2\x151\x152\a\x1D\x2\x2\x152\x154"+
		"\a/\x2\x2\x153\x155\x5\x30\x19\x2\x154\x153\x3\x2\x2\x2\x155\x156\x3\x2"+
		"\x2\x2\x156\x154\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x158\x3\x2\x2"+
		"\x2\x158\x159\a\x1E\x2\x2\x159\x17F\x3\x2\x2\x2\x15A\x15B\a\x1D\x2\x2"+
		"\x15B\x15D\a\x30\x2\x2\x15C\x15E\x5\x30\x19\x2\x15D\x15C\x3\x2\x2\x2\x15E"+
		"\x15F\x3\x2\x2\x2\x15F\x15D\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161"+
		"\x3\x2\x2\x2\x161\x162\a\x1E\x2\x2\x162\x17F\x3\x2\x2\x2\x163\x164\a\x1D"+
		"\x2\x2\x164\x165\a\x31\x2\x2\x165\x166\x5\x30\x19\x2\x166\x167\a\x1E\x2"+
		"\x2\x167\x17F\x3\x2\x2\x2\x168\x169\a\x1D\x2\x2\x169\x16A\a\x32\x2\x2"+
		"\x16A\x16B\x5\x30\x19\x2\x16B\x16C\x5\x30\x19\x2\x16C\x16D\a\x1E\x2\x2"+
		"\x16D\x17F\x3\x2\x2\x2\x16E\x16F\a\x1D\x2\x2\x16F\x170\a\x34\x2\x2\x170"+
		"\x171\a\x1D\x2\x2\x171\x172\x5.\x18\x2\x172\x173\a\x1E\x2\x2\x173\x174"+
		"\x5\x30\x19\x2\x174\x175\a\x1E\x2\x2\x175\x17F\x3\x2\x2\x2\x176\x177\a"+
		"\x1D\x2\x2\x177\x178\a\x33\x2\x2\x178\x179\a\x1D\x2\x2\x179\x17A\x5.\x18"+
		"\x2\x17A\x17B\a\x1E\x2\x2\x17B\x17C\x5\x30\x19\x2\x17C\x17D\a\x1E\x2\x2"+
		"\x17D\x17F\x3\x2\x2\x2\x17E\x150\x3\x2\x2\x2\x17E\x151\x3\x2\x2\x2\x17E"+
		"\x15A\x3\x2\x2\x2\x17E\x163\x3\x2\x2\x2\x17E\x168\x3\x2\x2\x2\x17E\x16E"+
		"\x3\x2\x2\x2\x17E\x176\x3\x2\x2\x2\x17F\x31\x3\x2\x2\x2\x180\x181\a\x1D"+
		"\x2\x2\x181\x185\x5\xE\b\x2\x182\x184\x5<\x1F\x2\x183\x182\x3\x2\x2\x2"+
		"\x184\x187\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186"+
		"\x188\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2\x188\x189\a\x1E\x2\x2\x189\x1AF"+
		"\x3\x2\x2\x2\x18A\x18B\a\x1D\x2\x2\x18B\x18C\a)\x2\x2\x18C\x18D\x5<\x1F"+
		"\x2\x18D\x18E\x5<\x1F\x2\x18E\x18F\a\x1E\x2\x2\x18F\x1AF\x3\x2\x2\x2\x190"+
		"\x191\a\x1D\x2\x2\x191\x192\a*\x2\x2\x192\x193\x5<\x1F\x2\x193\x194\x5"+
		"<\x1F\x2\x194\x195\a\x1E\x2\x2\x195\x1AF\x3\x2\x2\x2\x196\x197\a\x1D\x2"+
		"\x2\x197\x198\a+\x2\x2\x198\x199\x5<\x1F\x2\x199\x19A\x5<\x1F\x2\x19A"+
		"\x19B\a\x1E\x2\x2\x19B\x1AF\x3\x2\x2\x2\x19C\x19D\a\x1D\x2\x2\x19D\x19E"+
		"\a,\x2\x2\x19E\x19F\x5<\x1F\x2\x19F\x1A0\x5<\x1F\x2\x1A0\x1A1\a\x1E\x2"+
		"\x2\x1A1\x1AF\x3\x2\x2\x2\x1A2\x1A3\a\x1D\x2\x2\x1A3\x1A4\a-\x2\x2\x1A4"+
		"\x1A5\x5<\x1F\x2\x1A5\x1A6\x5<\x1F\x2\x1A6\x1A7\a\x1E\x2\x2\x1A7\x1AF"+
		"\x3\x2\x2\x2\x1A8\x1A9\a\x1D\x2\x2\x1A9\x1AA\a.\x2\x2\x1AA\x1AB\x5<\x1F"+
		"\x2\x1AB\x1AC\x5<\x1F\x2\x1AC\x1AD\a\x1E\x2\x2\x1AD\x1AF\x3\x2\x2\x2\x1AE"+
		"\x180\x3\x2\x2\x2\x1AE\x18A\x3\x2\x2\x2\x1AE\x190\x3\x2\x2\x2\x1AE\x196"+
		"\x3\x2\x2\x2\x1AE\x19C\x3\x2\x2\x2\x1AE\x1A2\x3\x2\x2\x2\x1AE\x1A8\x3"+
		"\x2\x2\x2\x1AF\x33\x3\x2\x2\x2\x1B0\x1B7\x5\x32\x1A\x2\x1B1\x1B2\a\x1D"+
		"\x2\x2\x1B2\x1B3\a\x31\x2\x2\x1B3\x1B4\x5\x32\x1A\x2\x1B4\x1B5\a\x1E\x2"+
		"\x2\x1B5\x1B7\x3\x2\x2\x2\x1B6\x1B0\x3\x2\x2\x2\x1B6\x1B1\x3\x2\x2\x2"+
		"\x1B7\x35\x3\x2\x2\x2\x1B8\x1D0\x5\x38\x1D\x2\x1B9\x1BA\a\x1D\x2\x2\x1BA"+
		"\x1BB\a\x31\x2\x2\x1BB\x1BC\x5\x36\x1C\x2\x1BC\x1BD\a\x1E\x2\x2\x1BD\x1D0"+
		"\x3\x2\x2\x2\x1BE\x1BF\a\x1D\x2\x2\x1BF\x1C1\a\x30\x2\x2\x1C0\x1C2\x5"+
		"\x36\x1C\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C1\x3\x2"+
		"\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1C6\a\x1E\x2"+
		"\x2\x1C6\x1D0\x3\x2\x2\x2\x1C7\x1C8\a\x1D\x2\x2\x1C8\x1C9\a\x34\x2\x2"+
		"\x1C9\x1CA\a\x1D\x2\x2\x1CA\x1CB\x5.\x18\x2\x1CB\x1CC\a\x1E\x2\x2\x1CC"+
		"\x1CD\x5\x36\x1C\x2\x1CD\x1CE\a\x1E\x2\x2\x1CE\x1D0\x3\x2\x2\x2\x1CF\x1B8"+
		"\x3\x2\x2\x2\x1CF\x1B9\x3\x2\x2\x2\x1CF\x1BE\x3\x2\x2\x2\x1CF\x1C7\x3"+
		"\x2\x2\x2\x1D0\x37\x3\x2\x2\x2\x1D1\x1D2\a\x1D\x2\x2\x1D2\x1D6\x5\x16"+
		"\f\x2\x1D3\x1D5\x5<\x1F\x2\x1D4\x1D3\x3\x2\x2\x2\x1D5\x1D8\x3\x2\x2\x2"+
		"\x1D6\x1D4\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D9\x3\x2\x2\x2\x1D8"+
		"\x1D6\x3\x2\x2\x2\x1D9\x1DA\a\x1E\x2\x2\x1DA\x39\x3\x2\x2\x2\x1DB\x1EF"+
		"\a\x36\x2\x2\x1DC\x1EF\a\x37\x2\x2\x1DD\x1DE\a\x1D\x2\x2\x1DE\x1DF\a%"+
		"\x2\x2\x1DF\x1E0\x5:\x1E\x2\x1E0\x1E1\a\x1E\x2\x2\x1E1\x1EF\x3\x2\x2\x2"+
		"\x1E2\x1E3\a\x1D\x2\x2\x1E3\x1E4\a%\x2\x2\x1E4\x1E5\x5:\x1E\x2\x1E5\x1E6"+
		"\x5:\x1E\x2\x1E6\x1E7\a\x1E\x2\x2\x1E7\x1EF\x3\x2\x2\x2\x1E8\x1E9\a\x1D"+
		"\x2\x2\x1E9\x1EA\a&\x2\x2\x1EA\x1EB\x5:\x1E\x2\x1EB\x1EC\x5:\x1E\x2\x1EC"+
		"\x1ED\a\x1E\x2\x2\x1ED\x1EF\x3\x2\x2\x2\x1EE\x1DB\x3\x2\x2\x2\x1EE\x1DC"+
		"\x3\x2\x2\x2\x1EE\x1DD\x3\x2\x2\x2\x1EE\x1E2\x3\x2\x2\x2\x1EE\x1E8\x3"+
		"\x2\x2\x2\x1EF;\x3\x2\x2\x2\x1F0\x205\a\x36\x2\x2\x1F1\x205\a\x38\x2\x2"+
		"\x1F2\x205\a\x37\x2\x2\x1F3\x1F4\a\x1D\x2\x2\x1F4\x1F5\a%\x2\x2\x1F5\x1F6"+
		"\x5<\x1F\x2\x1F6\x1F7\a\x1E\x2\x2\x1F7\x205\x3\x2\x2\x2\x1F8\x1F9\a\x1D"+
		"\x2\x2\x1F9\x1FA\a%\x2\x2\x1FA\x1FB\x5<\x1F\x2\x1FB\x1FC\x5<\x1F\x2\x1FC"+
		"\x1FD\a\x1E\x2\x2\x1FD\x205\x3\x2\x2\x2\x1FE\x1FF\a\x1D\x2\x2\x1FF\x200"+
		"\a&\x2\x2\x200\x201\x5<\x1F\x2\x201\x202\x5<\x1F\x2\x202\x203\a\x1E\x2"+
		"\x2\x203\x205\x3\x2\x2\x2\x204\x1F0\x3\x2\x2\x2\x204\x1F1\x3\x2\x2\x2"+
		"\x204\x1F2\x3\x2\x2\x2\x204\x1F3\x3\x2\x2\x2\x204\x1F8\x3\x2\x2\x2\x204"+
		"\x1FE\x3\x2\x2\x2\x205=\x3\x2\x2\x2\x206\x207\a\x1D\x2\x2\x207\x209\a"+
		"/\x2\x2\x208\x20A\x5@!\x2\x209\x208\x3\x2\x2\x2\x20A\x20B\x3\x2\x2\x2"+
		"\x20B\x209\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D"+
		"\x20E\a\x1E\x2\x2\x20E\x211\x3\x2\x2\x2\x20F\x211\x5@!\x2\x210\x206\x3"+
		"\x2\x2\x2\x210\x20F\x3\x2\x2\x2\x211?\x3\x2\x2\x2\x212\x213\a\x1D\x2\x2"+
		"\x213\x214\a\x33\x2\x2\x214\x215\a\x1D\x2\x2\x215\x216\x5.\x18\x2\x216"+
		"\x217\a\x1E\x2\x2\x217\x218\x5> \x2\x218\x219\a\x1E\x2\x2\x219\x222\x3"+
		"\x2\x2\x2\x21A\x21B\a\x1D\x2\x2\x21B\x21C\a\x35\x2\x2\x21C\x21D\x5\x30"+
		"\x19\x2\x21D\x21E\x5\x42\"\x2\x21E\x21F\a\x1E\x2\x2\x21F\x222\x3\x2\x2"+
		"\x2\x220\x222\x5\x34\x1B\x2\x221\x212\x3\x2\x2\x2\x221\x21A\x3\x2\x2\x2"+
		"\x221\x220\x3\x2\x2\x2\x222\x41\x3\x2\x2\x2\x223\x224\a\x1D\x2\x2\x224"+
		"\x226\a/\x2\x2\x225\x227\x5\x34\x1B\x2\x226\x225\x3\x2\x2\x2\x227\x228"+
		"\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2\x229\x22A\x3"+
		"\x2\x2\x2\x22A\x22B\a\x1E\x2\x2\x22B\x22E\x3\x2\x2\x2\x22C\x22E\x5\x34"+
		"\x1B\x2\x22D\x223\x3\x2\x2\x2\x22D\x22C\x3\x2\x2\x2\x22E\x43\x3\x2\x2"+
		"\x2\x22F\x230\a\x1D\x2\x2\x230\x231\a\x5\x2\x2\x231\x232\a\x1D\x2\x2\x232"+
		"\x233\a\x4\x2\x2\x233\x234\x5\x46$\x2\x234\x235\a\x1E\x2\x2\x235\x236"+
		"\a\x1D\x2\x2\x236\x237\a!\x2\x2\x237\x238\a\x3\x2\x2\x238\x239\x5H%\x2"+
		"\x239\x23B\a\x1E\x2\x2\x23A\x23C\x5N(\x2\x23B\x23A\x3\x2\x2\x2\x23B\x23C"+
		"\x3\x2\x2\x2\x23C\x23E\x3\x2\x2\x2\x23D\x23F\x5L\'\x2\x23E\x23D\x3\x2"+
		"\x2\x2\x23E\x23F\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x241\x5P)\x2\x241"+
		"\x242\a\x1E\x2\x2\x242\x45\x3\x2\x2\x2\x243\x244\a\x36\x2\x2\x244G\x3"+
		"\x2\x2\x2\x245\x246\a\x36\x2\x2\x246I\x3\x2\x2\x2\x247\x248\a\x1D\x2\x2"+
		"\x248\x249\a!\x2\x2\x249\x24B\a:\x2\x2\x24A\x24C\a\x36\x2\x2\x24B\x24A"+
		"\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x24B\x3\x2\x2\x2\x24D\x24E\x3"+
		"\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250\a\x1E\x2\x2\x250K\x3\x2\x2\x2"+
		"\x251\x252\a\x1D\x2\x2\x252\x253\a!\x2\x2\x253\x254\a\x1A\x2\x2\x254\x255"+
		"\x5,\x17\x2\x255\x256\a\x1E\x2\x2\x256M\x3\x2\x2\x2\x257\x258\a\x1D\x2"+
		"\x2\x258\x259\a!\x2\x2\x259\x25F\a\x13\x2\x2\x25A\x25B\a\x1D\x2\x2\x25B"+
		"\x25C\x5\x6\x4\x2\x25C\x25D\a\x37\x2\x2\x25D\x25E\a\x1E\x2\x2\x25E\x260"+
		"\x3\x2\x2\x2\x25F\x25A\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x25F\x3"+
		"\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x264\a\x1E"+
		"\x2\x2\x264O\x3\x2\x2\x2\x265\x266\a\x1D\x2\x2\x266\x267\a!\x2\x2\x267"+
		"\x26B\a\x1B\x2\x2\x268\x26A\x5T+\x2\x269\x268\x3\x2\x2\x2\x26A\x26D\x3"+
		"\x2\x2\x2\x26B\x269\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2\x26C\x26E\x3\x2"+
		"\x2\x2\x26D\x26B\x3\x2\x2\x2\x26E\x26F\a\x1E\x2\x2\x26FQ\x3\x2\x2\x2\x270"+
		"\x2A0\x5T+\x2\x271\x2A0\x5V,\x2\x272\x273\a\x1D\x2\x2\x273\x275\a/\x2"+
		"\x2\x274\x276\x5R*\x2\x275\x274\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277"+
		"\x275\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27A"+
		"\a\x1E\x2\x2\x27A\x2A0\x3\x2\x2\x2\x27B\x27C\a\x1D\x2\x2\x27C\x27E\a\x30"+
		"\x2\x2\x27D\x27F\x5R*\x2\x27E\x27D\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280"+
		"\x27E\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282\x283"+
		"\a\x1E\x2\x2\x283\x2A0\x3\x2\x2\x2\x284\x285\a\x1D\x2\x2\x285\x286\a\x31"+
		"\x2\x2\x286\x287\x5R*\x2\x287\x288\a\x1E\x2\x2\x288\x2A0\x3\x2\x2\x2\x289"+
		"\x28A\a\x1D\x2\x2\x28A\x28B\a\x32\x2\x2\x28B\x28C\x5R*\x2\x28C\x28D\x5"+
		"R*\x2\x28D\x28E\a\x1E\x2\x2\x28E\x2A0\x3\x2\x2\x2\x28F\x290\a\x1D\x2\x2"+
		"\x290\x291\a\x34\x2\x2\x291\x292\a\x1D\x2\x2\x292\x293\x5.\x18\x2\x293"+
		"\x294\a\x1E\x2\x2\x294\x295\x5\x30\x19\x2\x295\x296\a\x1E\x2\x2\x296\x2A0"+
		"\x3\x2\x2\x2\x297\x298\a\x1D\x2\x2\x298\x299\a\x33\x2\x2\x299\x29A\a\x1D"+
		"\x2\x2\x29A\x29B\x5.\x18\x2\x29B\x29C\a\x1E\x2\x2\x29C\x29D\x5\x30\x19"+
		"\x2\x29D\x29E\a\x1E\x2\x2\x29E\x2A0\x3\x2\x2\x2\x29F\x270\x3\x2\x2\x2"+
		"\x29F\x271\x3\x2\x2\x2\x29F\x272\x3\x2\x2\x2\x29F\x27B\x3\x2\x2\x2\x29F"+
		"\x284\x3\x2\x2\x2\x29F\x289\x3\x2\x2\x2\x29F\x28F\x3\x2\x2\x2\x29F\x297"+
		"\x3\x2\x2\x2\x2A0S\x3\x2\x2\x2\x2A1\x2A2\a\x1D\x2\x2\x2A2\x2A6\x5\xE\b"+
		"\x2\x2A3\x2A5\x5:\x1E\x2\x2A4\x2A3\x3\x2\x2\x2\x2A5\x2A8\x3\x2\x2\x2\x2A6"+
		"\x2A4\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A9\x3\x2\x2\x2\x2A8\x2A6"+
		"\x3\x2\x2\x2\x2A9\x2AA\a\x1E\x2\x2\x2AA\x2CA\x3\x2\x2\x2\x2AB\x2AC\a\x1D"+
		"\x2\x2\x2AC\x2AD\a)\x2\x2\x2AD\x2AE\x5:\x1E\x2\x2AE\x2AF\x5:\x1E\x2\x2AF"+
		"\x2B0\a\x1E\x2\x2\x2B0\x2CA\x3\x2\x2\x2\x2B1\x2B2\a\x1D\x2\x2\x2B2\x2B3"+
		"\a+\x2\x2\x2B3\x2B4\x5:\x1E\x2\x2B4\x2B5\x5:\x1E\x2\x2B5\x2B6\a\x1E\x2"+
		"\x2\x2B6\x2CA\x3\x2\x2\x2\x2B7\x2B8\a\x1D\x2\x2\x2B8\x2B9\a,\x2\x2\x2B9"+
		"\x2BA\x5:\x1E\x2\x2BA\x2BB\x5:\x1E\x2\x2BB\x2BC\a\x1E\x2\x2\x2BC\x2CA"+
		"\x3\x2\x2\x2\x2BD\x2BE\a\x1D\x2\x2\x2BE\x2BF\a-\x2\x2\x2BF\x2C0\x5:\x1E"+
		"\x2\x2C0\x2C1\x5:\x1E\x2\x2C1\x2C2\a\x1E\x2\x2\x2C2\x2CA\x3\x2\x2\x2\x2C3"+
		"\x2C4\a\x1D\x2\x2\x2C4\x2C5\a.\x2\x2\x2C5\x2C6\x5:\x1E\x2\x2C6\x2C7\x5"+
		":\x1E\x2\x2C7\x2C8\a\x1E\x2\x2\x2C8\x2CA\x3\x2\x2\x2\x2C9\x2A1\x3\x2\x2"+
		"\x2\x2C9\x2AB\x3\x2\x2\x2\x2C9\x2B1\x3\x2\x2\x2\x2C9\x2B7\x3\x2\x2\x2"+
		"\x2C9\x2BD\x3\x2\x2\x2\x2C9\x2C3\x3\x2\x2\x2\x2CAU\x3\x2\x2\x2\x2CB\x2D2"+
		"\x5T+\x2\x2CC\x2CD\a\x1D\x2\x2\x2CD\x2CE\a\x31\x2\x2\x2CE\x2CF\x5T+\x2"+
		"\x2CF\x2D0\a\x1E\x2\x2\x2D0\x2D2\x3\x2\x2\x2\x2D1\x2CB\x3\x2\x2\x2\x2D1"+
		"\x2CC\x3\x2\x2\x2\x2D2W\x3\x2\x2\x2\x2D3\x2D4\a\x1D\x2\x2\x2D4\x2D5\a"+
		"\x5\x2\x2\x2D5\x2D6\a\x1D\x2\x2\x2D6\x2D7\a\x4\x2\x2\x2D7\x2D8\x5\x46"+
		"$\x2\x2D8\x2D9\a\x1E\x2\x2\x2D9\x2DA\a\x1D\x2\x2\x2DA\x2DB\a!\x2\x2\x2DB"+
		"\x2DC\a\x3\x2\x2\x2DC\x2DD\x5H%\x2\x2DD\x2DE\a\x1E\x2\x2\x2DE\x2DF\x5"+
		"J&\x2\x2DF\x2E0\a\x1D\x2\x2\x2E0\x2E1\a!\x2\x2\x2E1\x2E2\a\x6\x2\x2\x2E2"+
		"\x2E3\x5^\x30\x2\x2E3\x2E5\a\x1E\x2\x2\x2E4\x2E6\x5L\'\x2\x2E5\x2E4\x3"+
		"\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E8\x3\x2\x2\x2\x2E7\x2E9\x5N(\x2"+
		"\x2E8\x2E7\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x2EB\x3\x2\x2\x2\x2EA"+
		"\x2EC\x5Z.\x2\x2EB\x2EA\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2EE\x3"+
		"\x2\x2\x2\x2ED\x2EF\x5\\/\x2\x2EE\x2ED\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2"+
		"\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0\x2F1\a\x1E\x2\x2\x2F1Y\x3\x2\x2\x2\x2F2"+
		"\x2F3\a\x1D\x2\x2\x2F3\x2F4\a!\x2\x2\x2F4\x2F5\a\x18\x2\x2\x2F5\x2F6\x5"+
		"R*\x2\x2F6\x2F7\a\x1E\x2\x2\x2F7[\x3\x2\x2\x2\x2F8\x2F9\a\x1D\x2\x2\x2F9"+
		"\x2FA\a!\x2\x2\x2FA\x2FB\a\x19\x2\x2\x2FB\x2FC\x5R*\x2\x2FC\x2FD\a\x1E"+
		"\x2\x2\x2FD]\x3\x2\x2\x2\x2FE\x2FF\a\x36\x2\x2\x2FF_\x3\x2\x2\x2>gjmr"+
		"x~\x89\x95\x9F\xB1\xBF\xC4\xC9\xD9\xEC\xF1\x101\x106\x112\x11C\x120\x127"+
		"\x12C\x131\x137\x13D\x142\x148\x14E\x156\x15F\x17E\x185\x1AE\x1B6\x1C3"+
		"\x1CF\x1D6\x1EE\x204\x20B\x210\x221\x228\x22D\x23B\x23E\x24D\x261\x26B"+
		"\x277\x280\x29F\x2A6\x2C9\x2D1\x2E5\x2E8\x2EB\x2EE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
