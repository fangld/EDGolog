//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\Planning.g4 by ANTLR 4.2.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class PlanningParser : Parser {
	public const int
		DOM=1, PROM=2, DEF=3, REQ=4, TYPE=5, PRED=6, ACT=7, PARM=8, PRE=9, EFF=10, 
		OBJ=11, EITHER=12, OBJS=13, INIT=14, AGENTS=15, GOAL=16, AT=17, STRIPS=18, 
		TYPING=19, LB=20, RB=21, LSB=22, RSB=23, COLON=24, QM=25, COMMA=26, UL=27, 
		DASH=28, PLUS=29, MINUS=30, MULT=31, DIV=32, EQ=33, LT=34, LEQ=35, GT=36, 
		GEQ=37, AND=38, OR=39, NOT=40, IMPLY=41, FORALL=42, EXISTS=43, WHEN=44, 
		PREF=45, BINCOMP=46, BINOP=47, LETTER=48, DIGIT=49, NAME=50, CHAR=51, 
		NUMBER=52, DECIMAL=53, VAR=54, FUNSYM=55, WS=56;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'domain'", "'problem'", "'define'", "'requirements'", "'types'", 
		"'predicates'", "'action'", "'parameters'", "'precondition'", "'effect'", 
		"'object'", "'either'", "'objects'", "'init'", "'agents'", "'goal'", "'at'", 
		"'strips'", "'typing'", "'('", "')'", "'['", "']'", "':'", "'?'", "'.'", 
		"'_'", "DASH", "'+'", "MINUS", "'*'", "'/'", "'='", "'<'", "'<='", "'>'", 
		"'>='", "'and'", "'or'", "'not'", "'imply'", "'forall'", "'exists'", "'when'", 
		"'preference'", "BINCOMP", "BINOP", "LETTER", "DIGIT", "NAME", "CHAR", 
		"NUMBER", "DECIMAL", "VAR", "FUNSYM", "WS"
	};
	public const int
		RULE_domain = 0, RULE_requireDefine = 1, RULE_requireKey = 2, RULE_strips = 3, 
		RULE_typing = 4, RULE_typeDefine = 5, RULE_predicatesDefine = 6, RULE_atomicFormulaSkeleton = 7, 
		RULE_predicate = 8, RULE_primitiveType = 9, RULE_type = 10, RULE_structureDefine = 11, 
		RULE_actionDefine = 12, RULE_actionSymbol = 13, RULE_actionDefBody = 14, 
		RULE_emptyOrPreGD = 15, RULE_emptyOrEffect = 16, RULE_listName = 17, RULE_listVariable = 18, 
		RULE_preGD = 19, RULE_prefGD = 20, RULE_prefName = 21, RULE_gd = 22, RULE_atomicFormulaTerm = 23, 
		RULE_literalTerm = 24, RULE_term = 25, RULE_effect = 26, RULE_cEffect = 27, 
		RULE_pEffect = 28, RULE_condEffect = 29, RULE_functionTerm = 30, RULE_problem = 31, 
		RULE_problemName = 32, RULE_domainName = 33, RULE_agentDefine = 34, RULE_objectDeclaration = 35, 
		RULE_init = 36, RULE_gdName = 37, RULE_atomicFormulaName = 38, RULE_literalName = 39;
	public static readonly string[] ruleNames = {
		"domain", "requireDefine", "requireKey", "strips", "typing", "typeDefine", 
		"predicatesDefine", "atomicFormulaSkeleton", "predicate", "primitiveType", 
		"type", "structureDefine", "actionDefine", "actionSymbol", "actionDefBody", 
		"emptyOrPreGD", "emptyOrEffect", "listName", "listVariable", "preGD", 
		"prefGD", "prefName", "gd", "atomicFormulaTerm", "literalTerm", "term", 
		"effect", "cEffect", "pEffect", "condEffect", "functionTerm", "problem", 
		"problemName", "domainName", "agentDefine", "objectDeclaration", "init", 
		"gdName", "atomicFormulaName", "literalName"
	};

	public override string GrammarFileName { get { return "Planning.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PlanningParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<StructureDefineContext> structureDefine() {
			return GetRuleContexts<StructureDefineContext>();
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicatesDefineContext predicatesDefine() {
			return GetRuleContext<PredicatesDefineContext>(0);
		}
		public TypeDefineContext typeDefine() {
			return GetRuleContext<TypeDefineContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public StructureDefineContext structureDefine(int i) {
			return GetRuleContext<StructureDefineContext>(i);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domain; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterDomain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitDomain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_domain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(LB);
			State = 81; Match(DEF);
			State = 82; Match(LB);
			State = 83; Match(DOM);
			State = 84; Match(NAME);
			State = 85; Match(RB);
			State = 87;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 86; requireDefine();
				}
				break;
			}
			State = 90;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 89; typeDefine();
				}
				break;
			}
			State = 93;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 92; predicatesDefine();
				}
				break;
			}
			State = 98;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LB) {
				{
				{
				State = 95; structureDefine();
				}
				}
				State = 100;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 101; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireDefineContext : ParserRuleContext {
		public RequireKeyContext requireKey(int i) {
			return GetRuleContext<RequireKeyContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode REQ() { return GetToken(PlanningParser.REQ, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<RequireKeyContext> requireKey() {
			return GetRuleContexts<RequireKeyContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public RequireDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterRequireDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitRequireDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireDefineContext requireDefine() {
		RequireDefineContext _localctx = new RequireDefineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_requireDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(LB);
			State = 104; Match(COLON);
			State = 105; Match(REQ);
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 106; requireKey();
				}
				}
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==COLON );
			State = 111; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireKeyContext : ParserRuleContext {
		public StripsContext strips() {
			return GetRuleContext<StripsContext>(0);
		}
		public TypingContext typing() {
			return GetRuleContext<TypingContext>(0);
		}
		public RequireKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_requireKey; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterRequireKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitRequireKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequireKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequireKeyContext requireKey() {
		RequireKeyContext _localctx = new RequireKeyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_requireKey);
		try {
			State = 115;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113; strips();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; typing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StripsContext : ParserRuleContext {
		public ITerminalNode STRIPS() { return GetToken(PlanningParser.STRIPS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public StripsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_strips; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterStrips(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitStrips(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrips(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StripsContext strips() {
		StripsContext _localctx = new StripsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_strips);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(COLON);
			State = 118; Match(STRIPS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypingContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPING() { return GetToken(PlanningParser.TYPING, 0); }
		public TypingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typing; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTyping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTyping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypingContext typing() {
		TypingContext _localctx = new TypingContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_typing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(COLON);
			State = 121; Match(TYPING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(PlanningParser.TYPE, 0); }
		public TypeDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTypeDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTypeDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefineContext typeDefine() {
		TypeDefineContext _localctx = new TypeDefineContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_typeDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(LB);
			State = 124; Match(COLON);
			State = 125; Match(TYPE);
			State = 126; listName();
			State = 127; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatesDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaSkeletonContext atomicFormulaSkeleton(int i) {
			return GetRuleContext<AtomicFormulaSkeletonContext>(i);
		}
		public IReadOnlyList<AtomicFormulaSkeletonContext> atomicFormulaSkeleton() {
			return GetRuleContexts<AtomicFormulaSkeletonContext>();
		}
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ITerminalNode PRED() { return GetToken(PlanningParser.PRED, 0); }
		public PredicatesDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicatesDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicatesDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicatesDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatesDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatesDefineContext predicatesDefine() {
		PredicatesDefineContext _localctx = new PredicatesDefineContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_predicatesDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(LB);
			State = 130; Match(COLON);
			State = 131; Match(PRED);
			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 132; atomicFormulaSkeleton();
				}
				}
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LB );
			State = 137; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaSkeletonContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public AtomicFormulaSkeletonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaSkeleton; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaSkeleton(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaSkeleton(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaSkeleton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaSkeletonContext atomicFormulaSkeleton() {
		AtomicFormulaSkeletonContext _localctx = new AtomicFormulaSkeletonContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_atomicFormulaSkeleton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(LB);
			State = 140; predicate();
			State = 141; listVariable();
			State = 142; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode OBJ() { return GetToken(PlanningParser.OBJ, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primitiveType; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_la = _input.La(1);
			if ( !(_la==OBJ || _la==NAME) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrimitiveTypeContext primitiveType(int i) {
			return GetRuleContext<PrimitiveTypeContext>(i);
		}
		public ITerminalNode EITHER() { return GetToken(PlanningParser.EITHER, 0); }
		public IReadOnlyList<PrimitiveTypeContext> primitiveType() {
			return GetRuleContexts<PrimitiveTypeContext>();
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			State = 158;
			switch (_input.La(1)) {
			case OBJ:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148; primitiveType();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(LB);
				State = 150; Match(EITHER);
				State = 152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 151; primitiveType();
					}
					}
					State = 154;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OBJ || _la==NAME );
				State = 156; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDefineContext : ParserRuleContext {
		public ActionDefineContext actionDefine() {
			return GetRuleContext<ActionDefineContext>(0);
		}
		public StructureDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_structureDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterStructureDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitStructureDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDefineContext structureDefine() {
		StructureDefineContext _localctx = new StructureDefineContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_structureDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; actionDefine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefineContext : ParserRuleContext {
		public ActionDefBodyContext actionDefBody() {
			return GetRuleContext<ActionDefBodyContext>(0);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public ITerminalNode PARM() { return GetToken(PlanningParser.PARM, 0); }
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public ActionSymbolContext actionSymbol() {
			return GetRuleContext<ActionSymbolContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public ITerminalNode ACT() { return GetToken(PlanningParser.ACT, 0); }
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefineContext actionDefine() {
		ActionDefineContext _localctx = new ActionDefineContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_actionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(LB);
			State = 163; Match(COLON);
			State = 164; Match(ACT);
			State = 165; actionSymbol();
			State = 166; Match(COLON);
			State = 167; Match(PARM);
			State = 168; Match(LB);
			State = 169; listVariable();
			State = 170; Match(RB);
			State = 171; actionDefBody();
			State = 172; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSymbolContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ActionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionSymbol; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionSymbolContext actionSymbol() {
		ActionSymbolContext _localctx = new ActionSymbolContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_actionSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionDefBodyContext : ParserRuleContext {
		public EmptyOrEffectContext emptyOrEffect() {
			return GetRuleContext<EmptyOrEffectContext>(0);
		}
		public ITerminalNode PRE() { return GetToken(PlanningParser.PRE, 0); }
		public ITerminalNode EFF() { return GetToken(PlanningParser.EFF, 0); }
		public EmptyOrPreGDContext emptyOrPreGD() {
			return GetRuleContext<EmptyOrPreGDContext>(0);
		}
		public ITerminalNode COLON(int i) {
			return GetToken(PlanningParser.COLON, i);
		}
		public IReadOnlyList<ITerminalNode> COLON() { return GetTokens(PlanningParser.COLON); }
		public ActionDefBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actionDefBody; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterActionDefBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitActionDefBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionDefBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionDefBodyContext actionDefBody() {
		ActionDefBodyContext _localctx = new ActionDefBodyContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_actionDefBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 176; Match(COLON);
				State = 177; Match(PRE);
				State = 178; emptyOrPreGD();
				}
				break;
			}
			State = 184;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 181; Match(COLON);
				State = 182; Match(EFF);
				State = 183; emptyOrEffect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrPreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PreGDContext preGD() {
			return GetRuleContext<PreGDContext>(0);
		}
		public EmptyOrPreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrPreGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrPreGDContext emptyOrPreGD() {
		EmptyOrPreGDContext _localctx = new EmptyOrPreGDContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_emptyOrPreGD);
		try {
			State = 189;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; preGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; Match(LB);
				State = 188; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyOrEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EmptyOrEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_emptyOrEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEmptyOrEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEmptyOrEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyOrEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyOrEffectContext emptyOrEffect() {
		EmptyOrEffectContext _localctx = new EmptyOrEffectContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_emptyOrEffect);
		try {
			State = 194;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; effect();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192; Match(LB);
				State = 193; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_listName);
		int _la;
		try {
			State = 211;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 196; Match(NAME);
					}
					}
					State = 201;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 202; Match(NAME);
					}
					}
					State = 205;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NAME );
				State = 207; Match(DASH);
				State = 208; type();
				State = 209; listName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		public ITerminalNode VAR(int i) {
			return GetToken(PlanningParser.VAR, i);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<ITerminalNode> VAR() { return GetTokens(PlanningParser.VAR); }
		public ITerminalNode DASH() { return GetToken(PlanningParser.DASH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listVariable; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterListVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitListVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_listVariable);
		int _la;
		try {
			State = 228;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==VAR) {
					{
					{
					State = 213; Match(VAR);
					}
					}
					State = 218;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 219; Match(VAR);
					}
					}
					State = 222;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR );
				State = 224; Match(DASH);
				State = 225; type();
				State = 226; listVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PreGDContext preGD(int i) {
			return GetRuleContext<PreGDContext>(i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public IReadOnlyList<PreGDContext> preGD() {
			return GetRuleContexts<PreGDContext>();
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public PrefGDContext prefGD() {
			return GetRuleContext<PrefGDContext>(0);
		}
		public PreGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_preGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPreGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPreGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreGDContext preGD() {
		PreGDContext _localctx = new PreGDContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_preGD);
		int _la;
		try {
			State = 246;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230; prefGD();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231; Match(LB);
				State = 232; Match(AND);
				State = 236;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 233; preGD();
					}
					}
					State = 238;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 239; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 240; Match(LB);
				State = 241; Match(FORALL);
				State = 242; listVariable();
				State = 243; preGD();
				State = 244; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefGDContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode PREF() { return GetToken(PlanningParser.PREF, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PrefNameContext prefName() {
			return GetRuleContext<PrefNameContext>(0);
		}
		public PrefGDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefGD; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrefGD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrefGD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefGD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefGDContext prefGD() {
		PrefGDContext _localctx = new PrefGDContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_prefGD);
		try {
			State = 255;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; gd();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249; Match(LB);
				State = 250; Match(PREF);
				State = 251; prefName();
				State = 252; gd();
				State = 253; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public PrefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPrefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPrefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefNameContext prefName() {
		PrefNameContext _localctx = new PrefNameContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_prefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public LiteralTermContext literalTerm() {
			return GetRuleContext<LiteralTermContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public IReadOnlyList<GdContext> gd() {
			return GetRuleContexts<GdContext>();
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdContext gd(int i) {
			return GetRuleContext<GdContext>(i);
		}
		public GdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gd; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterGd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitGd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdContext gd() {
		GdContext _localctx = new GdContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_gd);
		int _la;
		try {
			State = 301;
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260; literalTerm();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 261; Match(LB);
				State = 262; Match(AND);
				State = 266;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 263; gd();
					}
					}
					State = 268;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 269; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 270; Match(LB);
				State = 271; Match(OR);
				State = 275;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 272; gd();
					}
					}
					State = 277;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 278; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 279; Match(LB);
				State = 280; Match(IMPLY);
				State = 281; gd();
				State = 282; gd();
				State = 283; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 285; Match(LB);
				State = 286; Match(EXISTS);
				State = 287; Match(LB);
				State = 288; listVariable();
				State = 289; Match(RB);
				State = 290; gd();
				State = 291; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 293; Match(LB);
				State = 294; Match(FORALL);
				State = 295; Match(LB);
				State = 296; listVariable();
				State = 297; Match(RB);
				State = 298; gd();
				State = 299; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public AtomicFormulaTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaTermContext atomicFormulaTerm() {
		AtomicFormulaTermContext _localctx = new AtomicFormulaTermContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_atomicFormulaTerm);
		int _la;
		try {
			State = 322;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; Match(LB);
				State = 304; predicate();
				State = 308;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 305; term();
					}
					}
					State = 310;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 311; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; Match(LB);
				State = 314; Match(EQ);
				State = 318;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << VAR) | (1L << FUNSYM))) != 0)) {
					{
					{
					State = 315; term();
					}
					}
					State = 320;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 321; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTermContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public LiteralTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterLiteralTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitLiteralTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTermContext literalTerm() {
		LiteralTermContext _localctx = new LiteralTermContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_literalTerm);
		try {
			State = 330;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; atomicFormulaTerm();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325; Match(LB);
				State = 326; Match(NOT);
				State = 327; atomicFormulaTerm();
				State = 328; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(PlanningParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public FunctionTermContext functionTerm() {
			return GetRuleContext<FunctionTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_term; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_term);
		try {
			State = 335;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332; Match(NAME);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333; Match(VAR);
				}
				break;
			case FUNSYM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 334; functionTerm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public CEffectContext cEffect(int i) {
			return GetRuleContext<CEffectContext>(i);
		}
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<CEffectContext> cEffect() {
			return GetRuleContexts<CEffectContext>();
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_effect);
		int _la;
		try {
			State = 347;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337; Match(LB);
				State = 338; Match(AND);
				State = 342;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 339; cEffect();
					}
					}
					State = 344;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 345; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; cEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public PEffectContext pEffect() {
			return GetRuleContext<PEffectContext>(0);
		}
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public CondEffectContext condEffect() {
			return GetRuleContext<CondEffectContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public ITerminalNode WHEN() { return GetToken(PlanningParser.WHEN, 0); }
		public CEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_cEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CEffectContext cEffect() {
		CEffectContext _localctx = new CEffectContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_cEffect);
		try {
			State = 362;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349; Match(LB);
				State = 350; Match(FORALL);
				State = 351; listVariable();
				State = 352; effect();
				State = 353; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355; Match(LB);
				State = 356; Match(WHEN);
				State = 357; gd();
				State = 358; condEffect();
				State = 359; Match(RB);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 361; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public AtomicFormulaTermContext atomicFormulaTerm() {
			return GetRuleContext<AtomicFormulaTermContext>(0);
		}
		public PEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_pEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterPEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitPEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PEffectContext pEffect() {
		PEffectContext _localctx = new PEffectContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_pEffect);
		try {
			State = 370;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; Match(LB);
				State = 365; Match(NOT);
				State = 366; atomicFormulaTerm();
				State = 367; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369; atomicFormulaTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondEffectContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public IReadOnlyList<PEffectContext> pEffect() {
			return GetRuleContexts<PEffectContext>();
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public PEffectContext pEffect(int i) {
			return GetRuleContext<PEffectContext>(i);
		}
		public CondEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_condEffect; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterCondEffect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitCondEffect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondEffectContext condEffect() {
		CondEffectContext _localctx = new CondEffectContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_condEffect);
		int _la;
		try {
			State = 382;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372; Match(LB);
				State = 373; Match(AND);
				State = 377;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 374; pEffect();
					}
					}
					State = 379;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 380; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381; pEffect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTermContext : ParserRuleContext {
		public IReadOnlyList<TermContext> term() {
			return GetRuleContexts<TermContext>();
		}
		public ITerminalNode FUNSYM() { return GetToken(PlanningParser.FUNSYM, 0); }
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public FunctionTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterFunctionTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitFunctionTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTermContext functionTerm() {
		FunctionTermContext _localctx = new FunctionTermContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_functionTerm);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(FUNSYM);
			State = 388;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 385; term();
					}
					} 
				}
				State = 390;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemContext : ParserRuleContext {
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public AgentDefineContext agentDefine() {
			return GetRuleContext<AgentDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public ITerminalNode PROM() { return GetToken(PlanningParser.PROM, 0); }
		public ITerminalNode DEF() { return GetToken(PlanningParser.DEF, 0); }
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public RequireDefineContext requireDefine() {
			return GetRuleContext<RequireDefineContext>(0);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ProblemNameContext problemName() {
			return GetRuleContext<ProblemNameContext>(0);
		}
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public DomainNameContext domainName() {
			return GetRuleContext<DomainNameContext>(0);
		}
		public ITerminalNode DOM() { return GetToken(PlanningParser.DOM, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public ProblemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problem; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterProblem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitProblem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemContext problem() {
		ProblemContext _localctx = new ProblemContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_problem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(LB);
			State = 392; Match(DEF);
			State = 393; Match(LB);
			State = 394; Match(PROM);
			State = 395; problemName();
			State = 396; Match(RB);
			State = 397; Match(LB);
			State = 398; Match(COLON);
			State = 399; Match(DOM);
			State = 400; domainName();
			State = 401; Match(RB);
			State = 402; agentDefine();
			State = 404;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 403; requireDefine();
				}
				break;
			}
			State = 407;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 406; objectDeclaration();
				}
				break;
			}
			State = 409; init();
			State = 410; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProblemNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public ProblemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_problemName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterProblemName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitProblemName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProblemName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProblemNameContext problemName() {
		ProblemNameContext _localctx = new ProblemNameContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_problemName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(PlanningParser.NAME, 0); }
		public DomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_domainName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterDomainName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitDomainName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomainName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DomainNameContext domainName() {
		DomainNameContext _localctx = new DomainNameContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_domainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentDefineContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode AGENTS() { return GetToken(PlanningParser.AGENTS, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public AgentDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_agentDefine; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAgentDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAgentDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentDefineContext agentDefine() {
		AgentDefineContext _localctx = new AgentDefineContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_agentDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(LB);
			State = 417; Match(COLON);
			State = 418; Match(AGENTS);
			State = 420;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 419; Match(NAME);
				}
				}
				State = 422;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAME );
			State = 424; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public ITerminalNode OBJS() { return GetToken(PlanningParser.OBJS, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_objectDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(LB);
			State = 427; Match(COLON);
			State = 428; Match(OBJS);
			State = 429; listName();
			State = 430; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public GdNameContext gdName() {
			return GetRuleContext<GdNameContext>(0);
		}
		public ITerminalNode INIT() { return GetToken(PlanningParser.INIT, 0); }
		public ITerminalNode COLON() { return GetToken(PlanningParser.COLON, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(LB);
			State = 433; Match(COLON);
			State = 434; Match(INIT);
			State = 435; gdName();
			State = 436; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdNameContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(PlanningParser.EXISTS, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode AND() { return GetToken(PlanningParser.AND, 0); }
		public IReadOnlyList<GdNameContext> gdName() {
			return GetRuleContexts<GdNameContext>();
		}
		public ITerminalNode OR() { return GetToken(PlanningParser.OR, 0); }
		public ITerminalNode FORALL() { return GetToken(PlanningParser.FORALL, 0); }
		public GdNameContext gdName(int i) {
			return GetRuleContext<GdNameContext>(i);
		}
		public ITerminalNode RB(int i) {
			return GetToken(PlanningParser.RB, i);
		}
		public IReadOnlyList<ITerminalNode> LB() { return GetTokens(PlanningParser.LB); }
		public GdContext gd() {
			return GetRuleContext<GdContext>(0);
		}
		public ITerminalNode LB(int i) {
			return GetToken(PlanningParser.LB, i);
		}
		public IReadOnlyList<ITerminalNode> RB() { return GetTokens(PlanningParser.RB); }
		public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public LiteralNameContext literalName() {
			return GetRuleContext<LiteralNameContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(PlanningParser.IMPLY, 0); }
		public GdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_gdName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterGdName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitGdName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdNameContext gdName() {
		GdNameContext _localctx = new GdNameContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_gdName);
		int _la;
		try {
			State = 480;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; literalName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 440; Match(LB);
				State = 441; Match(AND);
				State = 445;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 442; gdName();
					}
					}
					State = 447;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 448; Match(RB);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 449; Match(LB);
				State = 450; Match(OR);
				State = 454;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LB) {
					{
					{
					State = 451; gdName();
					}
					}
					State = 456;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 457; Match(RB);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 458; Match(LB);
				State = 459; Match(IMPLY);
				State = 460; gdName();
				State = 461; gdName();
				State = 462; Match(RB);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 464; Match(LB);
				State = 465; Match(EXISTS);
				State = 466; Match(LB);
				State = 467; listVariable();
				State = 468; Match(RB);
				State = 469; gd();
				State = 470; Match(RB);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 472; Match(LB);
				State = 473; Match(FORALL);
				State = 474; Match(LB);
				State = 475; listVariable();
				State = 476; Match(RB);
				State = 477; gd();
				State = 478; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicFormulaNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode NAME(int i) {
			return GetToken(PlanningParser.NAME, i);
		}
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(PlanningParser.NAME); }
		public ITerminalNode EQ() { return GetToken(PlanningParser.EQ, 0); }
		public AtomicFormulaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atomicFormulaName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterAtomicFormulaName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitAtomicFormulaName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicFormulaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicFormulaNameContext atomicFormulaName() {
		AtomicFormulaNameContext _localctx = new AtomicFormulaNameContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_atomicFormulaName);
		int _la;
		try {
			State = 501;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482; Match(LB);
				State = 483; predicate();
				State = 487;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 484; Match(NAME);
					}
					}
					State = 489;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 490; Match(RB);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492; Match(LB);
				State = 493; Match(EQ);
				State = 497;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 494; Match(NAME);
					}
					}
					State = 499;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 500; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNameContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(PlanningParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(PlanningParser.RB, 0); }
		public AtomicFormulaNameContext atomicFormulaName() {
			return GetRuleContext<AtomicFormulaNameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlanningParser.NOT, 0); }
		public LiteralNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_literalName; }
		public override void EnterRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.EnterLiteralName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlanningListener typedListener = listener as IPlanningListener;
			if (typedListener != null) typedListener.ExitLiteralName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlanningVisitor<TResult> typedVisitor = visitor as IPlanningVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNameContext literalName() {
		LiteralNameContext _localctx = new LiteralNameContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_literalName);
		try {
			State = 509;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 503; atomicFormulaName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504; Match(LB);
				State = 505; Match(NOT);
				State = 506; atomicFormulaName();
				State = 507; Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3:\x202\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2Z\n\x2\x3\x2\x5\x2]\n\x2\x3"+
		"\x2\x5\x2`\n\x2\x3\x2\a\x2\x63\n\x2\f\x2\xE\x2\x66\v\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x6\x3n\n\x3\r\x3\xE\x3o\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x5\x4v\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\b\x3\b\x3\b\x3\b\x6\b\x88\n\b\r\b\xE\b\x89\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x6\f\x9B\n\f"+
		"\r\f\xE\f\x9C\x3\f\x3\f\x5\f\xA1\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x10\x5\x10\xB6\n\x10\x3\x10\x3\x10\x3\x10\x5\x10\xBB\n\x10\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\xC0\n\x11\x3\x12\x3\x12\x3\x12\x5\x12\xC5\n"+
		"\x12\x3\x13\a\x13\xC8\n\x13\f\x13\xE\x13\xCB\v\x13\x3\x13\x6\x13\xCE\n"+
		"\x13\r\x13\xE\x13\xCF\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xD6\n\x13\x3"+
		"\x14\a\x14\xD9\n\x14\f\x14\xE\x14\xDC\v\x14\x3\x14\x6\x14\xDF\n\x14\r"+
		"\x14\xE\x14\xE0\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xE7\n\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\a\x15\xED\n\x15\f\x15\xE\x15\xF0\v\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xF9\n\x15\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x102\n\x16\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x10B\n\x18\f\x18\xE\x18\x10E\v\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x114\n\x18\f\x18\xE\x18\x117\v\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\x130\n\x18\x3\x19\x3\x19\x3\x19\a\x19\x135"+
		"\n\x19\f\x19\xE\x19\x138\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x13F\n\x19\f\x19\xE\x19\x142\v\x19\x3\x19\x5\x19\x145\n\x19\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x14D\n\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x152\n\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\x157\n\x1C\f\x1C\xE\x1C"+
		"\x15A\v\x1C\x3\x1C\x3\x1C\x5\x1C\x15E\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D"+
		"\x16D\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x175\n\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\a\x1F\x17A\n\x1F\f\x1F\xE\x1F\x17D\v\x1F\x3\x1F"+
		"\x3\x1F\x5\x1F\x181\n\x1F\x3 \x3 \a \x185\n \f \xE \x188\v \x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x197\n!\x3!\x5!\x19A\n!"+
		"\x3!\x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3$\x6$\x1A7\n$\r$\xE$\x1A8"+
		"\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\a\'\x1BE\n\'\f\'\xE\'\x1C1\v\'\x3\'\x3\'\x3\'\x3\'\a\'\x1C7"+
		"\n\'\f\'\xE\'\x1CA\v\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5"+
		"\'\x1E3\n\'\x3(\x3(\x3(\a(\x1E8\n(\f(\xE(\x1EB\v(\x3(\x3(\x3(\x3(\x3("+
		"\a(\x1F2\n(\f(\xE(\x1F5\v(\x3(\x5(\x1F8\n(\x3)\x3)\x3)\x3)\x3)\x3)\x5"+
		")\x200\n)\x3)\x2\x2\x2*\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2"+
		"\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2\x2\x3\x4\x2\r\r\x34\x34\x215\x2R\x3"+
		"\x2\x2\x2\x4i\x3\x2\x2\x2\x6u\x3\x2\x2\x2\bw\x3\x2\x2\x2\nz\x3\x2\x2\x2"+
		"\f}\x3\x2\x2\x2\xE\x83\x3\x2\x2\x2\x10\x8D\x3\x2\x2\x2\x12\x92\x3\x2\x2"+
		"\x2\x14\x94\x3\x2\x2\x2\x16\xA0\x3\x2\x2\x2\x18\xA2\x3\x2\x2\x2\x1A\xA4"+
		"\x3\x2\x2\x2\x1C\xB0\x3\x2\x2\x2\x1E\xB5\x3\x2\x2\x2 \xBF\x3\x2\x2\x2"+
		"\"\xC4\x3\x2\x2\x2$\xD5\x3\x2\x2\x2&\xE6\x3\x2\x2\x2(\xF8\x3\x2\x2\x2"+
		"*\x101\x3\x2\x2\x2,\x103\x3\x2\x2\x2.\x12F\x3\x2\x2\x2\x30\x144\x3\x2"+
		"\x2\x2\x32\x14C\x3\x2\x2\x2\x34\x151\x3\x2\x2\x2\x36\x15D\x3\x2\x2\x2"+
		"\x38\x16C\x3\x2\x2\x2:\x174\x3\x2\x2\x2<\x180\x3\x2\x2\x2>\x182\x3\x2"+
		"\x2\x2@\x189\x3\x2\x2\x2\x42\x19E\x3\x2\x2\x2\x44\x1A0\x3\x2\x2\x2\x46"+
		"\x1A2\x3\x2\x2\x2H\x1AC\x3\x2\x2\x2J\x1B2\x3\x2\x2\x2L\x1E2\x3\x2\x2\x2"+
		"N\x1F7\x3\x2\x2\x2P\x1FF\x3\x2\x2\x2RS\a\x16\x2\x2ST\a\x5\x2\x2TU\a\x16"+
		"\x2\x2UV\a\x3\x2\x2VW\a\x34\x2\x2WY\a\x17\x2\x2XZ\x5\x4\x3\x2YX\x3\x2"+
		"\x2\x2YZ\x3\x2\x2\x2Z\\\x3\x2\x2\x2[]\x5\f\a\x2\\[\x3\x2\x2\x2\\]\x3\x2"+
		"\x2\x2]_\x3\x2\x2\x2^`\x5\xE\b\x2_^\x3\x2\x2\x2_`\x3\x2\x2\x2`\x64\x3"+
		"\x2\x2\x2\x61\x63\x5\x18\r\x2\x62\x61\x3\x2\x2\x2\x63\x66\x3\x2\x2\x2"+
		"\x64\x62\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65g\x3\x2\x2\x2\x66\x64\x3\x2"+
		"\x2\x2gh\a\x17\x2\x2h\x3\x3\x2\x2\x2ij\a\x16\x2\x2jk\a\x1A\x2\x2km\a\x6"+
		"\x2\x2ln\x5\x6\x4\x2ml\x3\x2\x2\x2no\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2"+
		"\x2\x2pq\x3\x2\x2\x2qr\a\x17\x2\x2r\x5\x3\x2\x2\x2sv\x5\b\x5\x2tv\x5\n"+
		"\x6\x2us\x3\x2\x2\x2ut\x3\x2\x2\x2v\a\x3\x2\x2\x2wx\a\x1A\x2\x2xy\a\x14"+
		"\x2\x2y\t\x3\x2\x2\x2z{\a\x1A\x2\x2{|\a\x15\x2\x2|\v\x3\x2\x2\x2}~\a\x16"+
		"\x2\x2~\x7F\a\x1A\x2\x2\x7F\x80\a\a\x2\x2\x80\x81\x5$\x13\x2\x81\x82\a"+
		"\x17\x2\x2\x82\r\x3\x2\x2\x2\x83\x84\a\x16\x2\x2\x84\x85\a\x1A\x2\x2\x85"+
		"\x87\a\b\x2\x2\x86\x88\x5\x10\t\x2\x87\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2"+
		"\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C"+
		"\a\x17\x2\x2\x8C\xF\x3\x2\x2\x2\x8D\x8E\a\x16\x2\x2\x8E\x8F\x5\x12\n\x2"+
		"\x8F\x90\x5&\x14\x2\x90\x91\a\x17\x2\x2\x91\x11\x3\x2\x2\x2\x92\x93\a"+
		"\x34\x2\x2\x93\x13\x3\x2\x2\x2\x94\x95\t\x2\x2\x2\x95\x15\x3\x2\x2\x2"+
		"\x96\xA1\x5\x14\v\x2\x97\x98\a\x16\x2\x2\x98\x9A\a\xE\x2\x2\x99\x9B\x5"+
		"\x14\v\x2\x9A\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2"+
		"\x9C\x9D\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F\a\x17\x2\x2\x9F\xA1\x3"+
		"\x2\x2\x2\xA0\x96\x3\x2\x2\x2\xA0\x97\x3\x2\x2\x2\xA1\x17\x3\x2\x2\x2"+
		"\xA2\xA3\x5\x1A\xE\x2\xA3\x19\x3\x2\x2\x2\xA4\xA5\a\x16\x2\x2\xA5\xA6"+
		"\a\x1A\x2\x2\xA6\xA7\a\t\x2\x2\xA7\xA8\x5\x1C\xF\x2\xA8\xA9\a\x1A\x2\x2"+
		"\xA9\xAA\a\n\x2\x2\xAA\xAB\a\x16\x2\x2\xAB\xAC\x5&\x14\x2\xAC\xAD\a\x17"+
		"\x2\x2\xAD\xAE\x5\x1E\x10\x2\xAE\xAF\a\x17\x2\x2\xAF\x1B\x3\x2\x2\x2\xB0"+
		"\xB1\a\x34\x2\x2\xB1\x1D\x3\x2\x2\x2\xB2\xB3\a\x1A\x2\x2\xB3\xB4\a\v\x2"+
		"\x2\xB4\xB6\x5 \x11\x2\xB5\xB2\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xBA"+
		"\x3\x2\x2\x2\xB7\xB8\a\x1A\x2\x2\xB8\xB9\a\f\x2\x2\xB9\xBB\x5\"\x12\x2"+
		"\xBA\xB7\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\x1F\x3\x2\x2\x2\xBC\xC0\x5"+
		"(\x15\x2\xBD\xBE\a\x16\x2\x2\xBE\xC0\a\x17\x2\x2\xBF\xBC\x3\x2\x2\x2\xBF"+
		"\xBD\x3\x2\x2\x2\xC0!\x3\x2\x2\x2\xC1\xC5\x5\x36\x1C\x2\xC2\xC3\a\x16"+
		"\x2\x2\xC3\xC5\a\x17\x2\x2\xC4\xC1\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5"+
		"#\x3\x2\x2\x2\xC6\xC8\a\x34\x2\x2\xC7\xC6\x3\x2\x2\x2\xC8\xCB\x3\x2\x2"+
		"\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xD6\x3\x2\x2\x2\xCB\xC9"+
		"\x3\x2\x2\x2\xCC\xCE\a\x34\x2\x2\xCD\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2"+
		"\x2\xCF\xCD\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2"+
		"\a\x1E\x2\x2\xD2\xD3\x5\x16\f\x2\xD3\xD4\x5$\x13\x2\xD4\xD6\x3\x2\x2\x2"+
		"\xD5\xC9\x3\x2\x2\x2\xD5\xCD\x3\x2\x2\x2\xD6%\x3\x2\x2\x2\xD7\xD9\a\x38"+
		"\x2\x2\xD8\xD7\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA"+
		"\xDB\x3\x2\x2\x2\xDB\xE7\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDF\a\x38"+
		"\x2\x2\xDE\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0"+
		"\xE1\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE3\a\x1E\x2\x2\xE3\xE4\x5\x16"+
		"\f\x2\xE4\xE5\x5&\x14\x2\xE5\xE7\x3\x2\x2\x2\xE6\xDA\x3\x2\x2\x2\xE6\xDE"+
		"\x3\x2\x2\x2\xE7\'\x3\x2\x2\x2\xE8\xF9\x5*\x16\x2\xE9\xEA\a\x16\x2\x2"+
		"\xEA\xEE\a(\x2\x2\xEB\xED\x5(\x15\x2\xEC\xEB\x3\x2\x2\x2\xED\xF0\x3\x2"+
		"\x2\x2\xEE\xEC\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF1\x3\x2\x2\x2\xF0"+
		"\xEE\x3\x2\x2\x2\xF1\xF9\a\x17\x2\x2\xF2\xF3\a\x16\x2\x2\xF3\xF4\a,\x2"+
		"\x2\xF4\xF5\x5&\x14\x2\xF5\xF6\x5(\x15\x2\xF6\xF7\a\x17\x2\x2\xF7\xF9"+
		"\x3\x2\x2\x2\xF8\xE8\x3\x2\x2\x2\xF8\xE9\x3\x2\x2\x2\xF8\xF2\x3\x2\x2"+
		"\x2\xF9)\x3\x2\x2\x2\xFA\x102\x5.\x18\x2\xFB\xFC\a\x16\x2\x2\xFC\xFD\a"+
		"/\x2\x2\xFD\xFE\x5,\x17\x2\xFE\xFF\x5.\x18\x2\xFF\x100\a\x17\x2\x2\x100"+
		"\x102\x3\x2\x2\x2\x101\xFA\x3\x2\x2\x2\x101\xFB\x3\x2\x2\x2\x102+\x3\x2"+
		"\x2\x2\x103\x104\a\x34\x2\x2\x104-\x3\x2\x2\x2\x105\x130\x5\x30\x19\x2"+
		"\x106\x130\x5\x32\x1A\x2\x107\x108\a\x16\x2\x2\x108\x10C\a(\x2\x2\x109"+
		"\x10B\x5.\x18\x2\x10A\x109\x3\x2\x2\x2\x10B\x10E\x3\x2\x2\x2\x10C\x10A"+
		"\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10F\x3\x2\x2\x2\x10E\x10C\x3"+
		"\x2\x2\x2\x10F\x130\a\x17\x2\x2\x110\x111\a\x16\x2\x2\x111\x115\a)\x2"+
		"\x2\x112\x114\x5.\x18\x2\x113\x112\x3\x2\x2\x2\x114\x117\x3\x2\x2\x2\x115"+
		"\x113\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x118\x3\x2\x2\x2\x117\x115"+
		"\x3\x2\x2\x2\x118\x130\a\x17\x2\x2\x119\x11A\a\x16\x2\x2\x11A\x11B\a+"+
		"\x2\x2\x11B\x11C\x5.\x18\x2\x11C\x11D\x5.\x18\x2\x11D\x11E\a\x17\x2\x2"+
		"\x11E\x130\x3\x2\x2\x2\x11F\x120\a\x16\x2\x2\x120\x121\a-\x2\x2\x121\x122"+
		"\a\x16\x2\x2\x122\x123\x5&\x14\x2\x123\x124\a\x17\x2\x2\x124\x125\x5."+
		"\x18\x2\x125\x126\a\x17\x2\x2\x126\x130\x3\x2\x2\x2\x127\x128\a\x16\x2"+
		"\x2\x128\x129\a,\x2\x2\x129\x12A\a\x16\x2\x2\x12A\x12B\x5&\x14\x2\x12B"+
		"\x12C\a\x17\x2\x2\x12C\x12D\x5.\x18\x2\x12D\x12E\a\x17\x2\x2\x12E\x130"+
		"\x3\x2\x2\x2\x12F\x105\x3\x2\x2\x2\x12F\x106\x3\x2\x2\x2\x12F\x107\x3"+
		"\x2\x2\x2\x12F\x110\x3\x2\x2\x2\x12F\x119\x3\x2\x2\x2\x12F\x11F\x3\x2"+
		"\x2\x2\x12F\x127\x3\x2\x2\x2\x130/\x3\x2\x2\x2\x131\x132\a\x16\x2\x2\x132"+
		"\x136\x5\x12\n\x2\x133\x135\x5\x34\x1B\x2\x134\x133\x3\x2\x2\x2\x135\x138"+
		"\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x139\x3"+
		"\x2\x2\x2\x138\x136\x3\x2\x2\x2\x139\x13A\a\x17\x2\x2\x13A\x145\x3\x2"+
		"\x2\x2\x13B\x13C\a\x16\x2\x2\x13C\x140\a#\x2\x2\x13D\x13F\x5\x34\x1B\x2"+
		"\x13E\x13D\x3\x2\x2\x2\x13F\x142\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x140"+
		"\x141\x3\x2\x2\x2\x141\x143\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x143\x145"+
		"\a\x17\x2\x2\x144\x131\x3\x2\x2\x2\x144\x13B\x3\x2\x2\x2\x145\x31\x3\x2"+
		"\x2\x2\x146\x14D\x5\x30\x19\x2\x147\x148\a\x16\x2\x2\x148\x149\a*\x2\x2"+
		"\x149\x14A\x5\x30\x19\x2\x14A\x14B\a\x17\x2\x2\x14B\x14D\x3\x2\x2\x2\x14C"+
		"\x146\x3\x2\x2\x2\x14C\x147\x3\x2\x2\x2\x14D\x33\x3\x2\x2\x2\x14E\x152"+
		"\a\x34\x2\x2\x14F\x152\a\x38\x2\x2\x150\x152\x5> \x2\x151\x14E\x3\x2\x2"+
		"\x2\x151\x14F\x3\x2\x2\x2\x151\x150\x3\x2\x2\x2\x152\x35\x3\x2\x2\x2\x153"+
		"\x154\a\x16\x2\x2\x154\x158\a(\x2\x2\x155\x157\x5\x38\x1D\x2\x156\x155"+
		"\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x158\x159\x3"+
		"\x2\x2\x2\x159\x15B\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x15E\a\x17"+
		"\x2\x2\x15C\x15E\x5\x38\x1D\x2\x15D\x153\x3\x2\x2\x2\x15D\x15C\x3\x2\x2"+
		"\x2\x15E\x37\x3\x2\x2\x2\x15F\x160\a\x16\x2\x2\x160\x161\a,\x2\x2\x161"+
		"\x162\x5&\x14\x2\x162\x163\x5\x36\x1C\x2\x163\x164\a\x17\x2\x2\x164\x16D"+
		"\x3\x2\x2\x2\x165\x166\a\x16\x2\x2\x166\x167\a.\x2\x2\x167\x168\x5.\x18"+
		"\x2\x168\x169\x5<\x1F\x2\x169\x16A\a\x17\x2\x2\x16A\x16D\x3\x2\x2\x2\x16B"+
		"\x16D\x5:\x1E\x2\x16C\x15F\x3\x2\x2\x2\x16C\x165\x3\x2\x2\x2\x16C\x16B"+
		"\x3\x2\x2\x2\x16D\x39\x3\x2\x2\x2\x16E\x16F\a\x16\x2\x2\x16F\x170\a*\x2"+
		"\x2\x170\x171\x5\x30\x19\x2\x171\x172\a\x17\x2\x2\x172\x175\x3\x2\x2\x2"+
		"\x173\x175\x5\x30\x19\x2\x174\x16E\x3\x2\x2\x2\x174\x173\x3\x2\x2\x2\x175"+
		";\x3\x2\x2\x2\x176\x177\a\x16\x2\x2\x177\x17B\a(\x2\x2\x178\x17A\x5:\x1E"+
		"\x2\x179\x178\x3\x2\x2\x2\x17A\x17D\x3\x2\x2\x2\x17B\x179\x3\x2\x2\x2"+
		"\x17B\x17C\x3\x2\x2\x2\x17C\x17E\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17E"+
		"\x181\a\x17\x2\x2\x17F\x181\x5:\x1E\x2\x180\x176\x3\x2\x2\x2\x180\x17F"+
		"\x3\x2\x2\x2\x181=\x3\x2\x2\x2\x182\x186\a\x39\x2\x2\x183\x185\x5\x34"+
		"\x1B\x2\x184\x183\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2\x186\x184\x3\x2\x2"+
		"\x2\x186\x187\x3\x2\x2\x2\x187?\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x189"+
		"\x18A\a\x16\x2\x2\x18A\x18B\a\x5\x2\x2\x18B\x18C\a\x16\x2\x2\x18C\x18D"+
		"\a\x4\x2\x2\x18D\x18E\x5\x42\"\x2\x18E\x18F\a\x17\x2\x2\x18F\x190\a\x16"+
		"\x2\x2\x190\x191\a\x1A\x2\x2\x191\x192\a\x3\x2\x2\x192\x193\x5\x44#\x2"+
		"\x193\x194\a\x17\x2\x2\x194\x196\x5\x46$\x2\x195\x197\x5\x4\x3\x2\x196"+
		"\x195\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x199\x3\x2\x2\x2\x198\x19A"+
		"\x5H%\x2\x199\x198\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x19B\x3\x2\x2"+
		"\x2\x19B\x19C\x5J&\x2\x19C\x19D\a\x17\x2\x2\x19D\x41\x3\x2\x2\x2\x19E"+
		"\x19F\a\x34\x2\x2\x19F\x43\x3\x2\x2\x2\x1A0\x1A1\a\x34\x2\x2\x1A1\x45"+
		"\x3\x2\x2\x2\x1A2\x1A3\a\x16\x2\x2\x1A3\x1A4\a\x1A\x2\x2\x1A4\x1A6\a\x11"+
		"\x2\x2\x1A5\x1A7\a\x34\x2\x2\x1A6\x1A5\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2"+
		"\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2"+
		"\x1AA\x1AB\a\x17\x2\x2\x1ABG\x3\x2\x2\x2\x1AC\x1AD\a\x16\x2\x2\x1AD\x1AE"+
		"\a\x1A\x2\x2\x1AE\x1AF\a\xF\x2\x2\x1AF\x1B0\x5$\x13\x2\x1B0\x1B1\a\x17"+
		"\x2\x2\x1B1I\x3\x2\x2\x2\x1B2\x1B3\a\x16\x2\x2\x1B3\x1B4\a\x1A\x2\x2\x1B4"+
		"\x1B5\a\x10\x2\x2\x1B5\x1B6\x5L\'\x2\x1B6\x1B7\a\x17\x2\x2\x1B7K\x3\x2"+
		"\x2\x2\x1B8\x1E3\x5N(\x2\x1B9\x1E3\x5P)\x2\x1BA\x1BB\a\x16\x2\x2\x1BB"+
		"\x1BF\a(\x2\x2\x1BC\x1BE\x5L\'\x2\x1BD\x1BC\x3\x2\x2\x2\x1BE\x1C1\x3\x2"+
		"\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0\x1C2\x3\x2\x2"+
		"\x2\x1C1\x1BF\x3\x2\x2\x2\x1C2\x1E3\a\x17\x2\x2\x1C3\x1C4\a\x16\x2\x2"+
		"\x1C4\x1C8\a)\x2\x2\x1C5\x1C7\x5L\'\x2\x1C6\x1C5\x3\x2\x2\x2\x1C7\x1CA"+
		"\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CB\x3"+
		"\x2\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CB\x1E3\a\x17\x2\x2\x1CC\x1CD\a\x16"+
		"\x2\x2\x1CD\x1CE\a+\x2\x2\x1CE\x1CF\x5L\'\x2\x1CF\x1D0\x5L\'\x2\x1D0\x1D1"+
		"\a\x17\x2\x2\x1D1\x1E3\x3\x2\x2\x2\x1D2\x1D3\a\x16\x2\x2\x1D3\x1D4\a-"+
		"\x2\x2\x1D4\x1D5\a\x16\x2\x2\x1D5\x1D6\x5&\x14\x2\x1D6\x1D7\a\x17\x2\x2"+
		"\x1D7\x1D8\x5.\x18\x2\x1D8\x1D9\a\x17\x2\x2\x1D9\x1E3\x3\x2\x2\x2\x1DA"+
		"\x1DB\a\x16\x2\x2\x1DB\x1DC\a,\x2\x2\x1DC\x1DD\a\x16\x2\x2\x1DD\x1DE\x5"+
		"&\x14\x2\x1DE\x1DF\a\x17\x2\x2\x1DF\x1E0\x5.\x18\x2\x1E0\x1E1\a\x17\x2"+
		"\x2\x1E1\x1E3\x3\x2\x2\x2\x1E2\x1B8\x3\x2\x2\x2\x1E2\x1B9\x3\x2\x2\x2"+
		"\x1E2\x1BA\x3\x2\x2\x2\x1E2\x1C3\x3\x2\x2\x2\x1E2\x1CC\x3\x2\x2\x2\x1E2"+
		"\x1D2\x3\x2\x2\x2\x1E2\x1DA\x3\x2\x2\x2\x1E3M\x3\x2\x2\x2\x1E4\x1E5\a"+
		"\x16\x2\x2\x1E5\x1E9\x5\x12\n\x2\x1E6\x1E8\a\x34\x2\x2\x1E7\x1E6\x3\x2"+
		"\x2\x2\x1E8\x1EB\x3\x2\x2\x2\x1E9\x1E7\x3\x2\x2\x2\x1E9\x1EA\x3\x2\x2"+
		"\x2\x1EA\x1EC\x3\x2\x2\x2\x1EB\x1E9\x3\x2\x2\x2\x1EC\x1ED\a\x17\x2\x2"+
		"\x1ED\x1F8\x3\x2\x2\x2\x1EE\x1EF\a\x16\x2\x2\x1EF\x1F3\a#\x2\x2\x1F0\x1F2"+
		"\a\x34\x2\x2\x1F1\x1F0\x3\x2\x2\x2\x1F2\x1F5\x3\x2\x2\x2\x1F3\x1F1\x3"+
		"\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F6\x3\x2\x2\x2\x1F5\x1F3\x3\x2"+
		"\x2\x2\x1F6\x1F8\a\x17\x2\x2\x1F7\x1E4\x3\x2\x2\x2\x1F7\x1EE\x3\x2\x2"+
		"\x2\x1F8O\x3\x2\x2\x2\x1F9\x200\x5N(\x2\x1FA\x1FB\a\x16\x2\x2\x1FB\x1FC"+
		"\a*\x2\x2\x1FC\x1FD\x5N(\x2\x1FD\x1FE\a\x17\x2\x2\x1FE\x200\x3\x2\x2\x2"+
		"\x1FF\x1F9\x3\x2\x2\x2\x1FF\x1FA\x3\x2\x2\x2\x200Q\x3\x2\x2\x2\x31Y\\"+
		"_\x64ou\x89\x9C\xA0\xB5\xBA\xBF\xC4\xC9\xCF\xD5\xDA\xE0\xE6\xEE\xF8\x101"+
		"\x10C\x115\x12F\x136\x140\x144\x14C\x151\x158\x15D\x16C\x174\x17B\x180"+
		"\x186\x196\x199\x1A8\x1BF\x1C8\x1E2\x1E9\x1F3\x1F7\x1FF";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
