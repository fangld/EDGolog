//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\EDGolog\LanguageRecognition\HighLevelProgram.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageRecognition {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class HighLevelProgramParser : Parser {
	public const int
		IF=1, THEN=2, ELSE=3, ENDIF=4, WHILE=5, DO=6, ENDWHILE=7, LB=8, RB=9, 
		COLON=10, SEMICOLON=11, QM=12, COMMA=13, UL=14, DASH=15, AND=16, OR=17, 
		NOT=18, IMPLY=19, FORALL=20, EXISTS=21, LETTER=22, DIGIT=23, NAME=24, 
		CHAR=25, NUMBER=26, DECIMAL=27, VAR=28, FUNSYM=29, WS=30;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'if'", "'then'", "'else'", "'endif'", "'while'", "'do'", 
		"'endwhile'", "'('", "')'", "':'", "';'", "'?'", "','", "'_'", "'-'", 
		"'and'", "'or'", "'not'", "'imply'", "'forall'", "'exists'", "LETTER", 
		"DIGIT", "NAME", "CHAR", "NUMBER", "DECIMAL", "VAR", "FUNSYM", "WS"
	};
	public const int
		RULE_program = 0, RULE_formula = 1, RULE_predicate = 2, RULE_action = 3, 
		RULE_listName = 4;
	public static readonly string[] ruleNames = {
		"program", "formula", "predicate", "action", "listName"
	};

	public override string GrammarFileName { get { return "HighLevelProgram.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public HighLevelProgramParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(HighLevelProgramParser.WHILE, 0); }
		public ITerminalNode THEN() { return GetToken(HighLevelProgramParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(HighLevelProgramParser.IF, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(HighLevelProgramParser.SEMICOLON, 0); }
		public FormulaContext formula() {
			return GetRuleContext<FormulaContext>(0);
		}
		public ITerminalNode DO() { return GetToken(HighLevelProgramParser.DO, 0); }
		public ITerminalNode ELSE() { return GetToken(HighLevelProgramParser.ELSE, 0); }
		public IReadOnlyList<ProgramContext> program() {
			return GetRuleContexts<ProgramContext>();
		}
		public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		public ITerminalNode ENDWHILE() { return GetToken(HighLevelProgramParser.ENDWHILE, 0); }
		public ITerminalNode ENDIF() { return GetToken(HighLevelProgramParser.ENDIF, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_program; }
		public override void EnterRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelProgramVisitor<TResult> typedVisitor = visitor as IHighLevelProgramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		return program(0);
	}

	private ProgramContext program(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ProgramContext _localctx = new ProgramContext(_ctx, _parentState);
		ProgramContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_program, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 11; action();
				}
				break;

			case 2:
				{
				State = 12; Match(IF);
				State = 13; formula(0);
				State = 14; Match(THEN);
				State = 15; program(0);
				State = 16; Match(ELSE);
				State = 17; program(0);
				State = 18; Match(ENDIF);
				}
				break;

			case 3:
				{
				State = 20; Match(IF);
				State = 21; formula(0);
				State = 22; Match(THEN);
				State = 23; program(0);
				State = 24; Match(ENDIF);
				}
				break;

			case 4:
				{
				State = 26; Match(WHILE);
				State = 27; formula(0);
				State = 28; Match(DO);
				State = 29; program(0);
				State = 30; Match(ENDWHILE);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 39;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ProgramContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_program);
					State = 34;
					if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
					State = 35; Match(SEMICOLON);
					State = 36; program(5);
					}
					} 
				}
				State = 41;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FormulaContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(HighLevelProgramParser.LB, 0); }
		public IReadOnlyList<FormulaContext> formula() {
			return GetRuleContexts<FormulaContext>();
		}
		public ITerminalNode AND() { return GetToken(HighLevelProgramParser.AND, 0); }
		public ITerminalNode RB() { return GetToken(HighLevelProgramParser.RB, 0); }
		public ITerminalNode OR() { return GetToken(HighLevelProgramParser.OR, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(HighLevelProgramParser.NOT, 0); }
		public FormulaContext formula(int i) {
			return GetRuleContext<FormulaContext>(i);
		}
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formula; }
		public override void EnterRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.EnterFormula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.ExitFormula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelProgramVisitor<TResult> typedVisitor = visitor as IHighLevelProgramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		return formula(0);
	}

	private FormulaContext formula(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		FormulaContext _localctx = new FormulaContext(_ctx, _parentState);
		FormulaContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_formula, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			switch (_input.La(1)) {
			case NOT:
				{
				State = 43; Match(NOT);
				State = 44; formula(3);
				}
				break;
			case NAME:
				{
				State = 45; predicate();
				}
				break;
			case LB:
				{
				State = 46; Match(LB);
				State = 47; formula(0);
				State = 48; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 60;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 58;
					switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						_localctx = new FormulaContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_formula);
						State = 52;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 53; Match(AND);
						State = 54; formula(3);
						}
						break;

					case 2:
						{
						_localctx = new FormulaContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_formula);
						State = 55;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 56; Match(OR);
						State = 57; formula(2);
						}
						break;
					}
					} 
				}
				State = 62;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(HighLevelProgramParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(HighLevelProgramParser.RB, 0); }
		public ITerminalNode NAME() { return GetToken(HighLevelProgramParser.NAME, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_predicate; }
		public override void EnterRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelProgramVisitor<TResult> typedVisitor = visitor as IHighLevelProgramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(NAME);
			State = 64; Match(LB);
			State = 65; listName();
			State = 66; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(HighLevelProgramParser.LB, 0); }
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode RB() { return GetToken(HighLevelProgramParser.RB, 0); }
		public ITerminalNode NAME() { return GetToken(HighLevelProgramParser.NAME, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_action; }
		public override void EnterRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelProgramVisitor<TResult> typedVisitor = visitor as IHighLevelProgramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(NAME);
			State = 69; Match(LB);
			State = 70; listName();
			State = 71; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListNameContext : ParserRuleContext {
		public ListNameContext listName() {
			return GetRuleContext<ListNameContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(HighLevelProgramParser.COMMA, 0); }
		public ITerminalNode NAME() { return GetToken(HighLevelProgramParser.NAME, 0); }
		public ListNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_listName; }
		public override void EnterRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.EnterListName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHighLevelProgramListener typedListener = listener as IHighLevelProgramListener;
			if (typedListener != null) typedListener.ExitListName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelProgramVisitor<TResult> typedVisitor = visitor as IHighLevelProgramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListNameContext listName() {
		ListNameContext _localctx = new ListNameContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_listName);
		try {
			State = 77;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; Match(NAME);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; Match(NAME);
				State = 75; Match(COMMA);
				State = 76; listName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return program_sempred((ProgramContext)_localctx, predIndex);

		case 1: return formula_sempred((FormulaContext)_localctx, predIndex);
		}
		return true;
	}
	private bool program_sempred(ProgramContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool formula_sempred(FormulaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 2);

		case 2: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 R\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2#\n\x2\x3\x2\x3\x2\x3\x2\a\x2("+
		"\n\x2\f\x2\xE\x2+\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x5\x3\x35\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3=\n\x3\f\x3\xE"+
		"\x3@\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6P\n\x6\x3\x6\x2\x2\x4\x2\x4\a\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\x2\x2U\x2\"\x3\x2\x2\x2\x4\x34\x3\x2\x2\x2\x6\x41\x3"+
		"\x2\x2\x2\b\x46\x3\x2\x2\x2\nO\x3\x2\x2\x2\f\r\b\x2\x1\x2\r#\x5\b\x5\x2"+
		"\xE\xF\a\x3\x2\x2\xF\x10\x5\x4\x3\x2\x10\x11\a\x4\x2\x2\x11\x12\x5\x2"+
		"\x2\x2\x12\x13\a\x5\x2\x2\x13\x14\x5\x2\x2\x2\x14\x15\a\x6\x2\x2\x15#"+
		"\x3\x2\x2\x2\x16\x17\a\x3\x2\x2\x17\x18\x5\x4\x3\x2\x18\x19\a\x4\x2\x2"+
		"\x19\x1A\x5\x2\x2\x2\x1A\x1B\a\x6\x2\x2\x1B#\x3\x2\x2\x2\x1C\x1D\a\a\x2"+
		"\x2\x1D\x1E\x5\x4\x3\x2\x1E\x1F\a\b\x2\x2\x1F \x5\x2\x2\x2 !\a\t\x2\x2"+
		"!#\x3\x2\x2\x2\"\f\x3\x2\x2\x2\"\xE\x3\x2\x2\x2\"\x16\x3\x2\x2\x2\"\x1C"+
		"\x3\x2\x2\x2#)\x3\x2\x2\x2$%\f\x6\x2\x2%&\a\r\x2\x2&(\x5\x2\x2\a\'$\x3"+
		"\x2\x2\x2(+\x3\x2\x2\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*\x3\x3\x2\x2\x2+"+
		")\x3\x2\x2\x2,-\b\x3\x1\x2-.\a\x14\x2\x2.\x35\x5\x4\x3\x5/\x35\x5\x6\x4"+
		"\x2\x30\x31\a\n\x2\x2\x31\x32\x5\x4\x3\x2\x32\x33\a\v\x2\x2\x33\x35\x3"+
		"\x2\x2\x2\x34,\x3\x2\x2\x2\x34/\x3\x2\x2\x2\x34\x30\x3\x2\x2\x2\x35>\x3"+
		"\x2\x2\x2\x36\x37\f\x4\x2\x2\x37\x38\a\x12\x2\x2\x38=\x5\x4\x3\x5\x39"+
		":\f\x3\x2\x2:;\a\x13\x2\x2;=\x5\x4\x3\x4<\x36\x3\x2\x2\x2<\x39\x3\x2\x2"+
		"\x2=@\x3\x2\x2\x2><\x3\x2\x2\x2>?\x3\x2\x2\x2?\x5\x3\x2\x2\x2@>\x3\x2"+
		"\x2\x2\x41\x42\a\x1A\x2\x2\x42\x43\a\n\x2\x2\x43\x44\x5\n\x6\x2\x44\x45"+
		"\a\v\x2\x2\x45\a\x3\x2\x2\x2\x46G\a\x1A\x2\x2GH\a\n\x2\x2HI\x5\n\x6\x2"+
		"IJ\a\v\x2\x2J\t\x3\x2\x2\x2KP\a\x1A\x2\x2LM\a\x1A\x2\x2MN\a\xF\x2\x2N"+
		"P\x5\n\x6\x2OK\x3\x2\x2\x2OL\x3\x2\x2\x2P\v\x3\x2\x2\x2\b\")\x34<>O";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageRecognition
